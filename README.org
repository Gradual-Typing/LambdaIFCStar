#+TITLE: Documentation of LambdaIFCStar
#+AUTHOR: Tianyu Chen

#+OPTIONS: toc:nil num:nil

#+MACRO: surface $\lambda_{\mathtt{IFC}}^\star$
#+MACRO: cc $\lambda_{\mathtt{IFC}}^{c}$
#+MACRO: surface_old $\lambda_{\mathtt{SEC}}^\star$
#+MACRO: cc_old $\lambda_{\mathtt{SEC}}^{c}$
#+MACRO: dynifc $\lambda_{\mathtt{SEC}}$

#+EXPORT_FILE_NAME: README_NEW

* {{{surface}}}, A Gradual Security-Typed Programming Language

{{{surface}}} is an experimental gradual security-typed programming language.
{{{surface}}} is /gradual/, in that it provides the programmer with the freedom
of choice between runtime versus compile-time enforcement. {{{surface}}} is
/secure/, because it enforces information-flow security and satisfies
noninterference.

On the technical side, {{{surface}}} is the only programming language design
that combines gradual typing with information-flow control (IFC) without making any
sacrifices. {{{surface}}} (1) satisfies noninterference (the security
guarantee), (2) satisfies the gradual guarantee, (3) enjoys type-guided
classification, and (4) utilizes NSU checking to enforce implicit flows through
the heap with no static analysis required. The semantics of {{{surface}}} is the
first gradual security-typed language to be specified using /coercion calculi/
(a la Henglein).

* A Tale of Two Gradual Security Languages

This repository contains the [[https://wiki.portal.chalmers.se/agda][Agda]] mechanization of {{{surface}}} as well as its
sibling gradual security-typed language, {{{surface_old}}}:

1. {{{surface_old}}} is a gradual security language that is vigilant (that is, a
   runtime error is triggered if inconsistent type annotations are detected) but
   does not enable type-guided classification (that is, type annotations do not
   affect the security level of runtime values). The development of
   {{{surface_old}}} is reported in our Arxiv draft
   [[https://arxiv.org/abs/2211.15745][Mechanized Noninterference for Gradual Security]]
   (*Chen and Siek [2022]*). The semantics of
   {{{surface_old}}} is given by compiling to the cast calculus {{{cc_old}}},
   which utilizes type-based casts as its cast representation.
2. {{{surface}}} is a gradual security language that enjoys /both/ vigilance as
   well as type-guided classification, thus enabling type-based reasoning for
   both explicit and implicit information flows. The development of
   {{{surface}}} is reported in our upcoming [[https://pldi24.sigplan.org/details/pldi-2024-papers/66/Quest-Complete-The-Holy-Grail-of-Gradual-Security][PLDI 2024]] paper
   [[https://homes.luddy.indiana.edu/chen512/lambdaifcstarv2.pdf][Quest Complete: The Holy Grail of Gradual Security]]
   (*Chen and Siek [2024]*). The semantics of {{{surface}}} is given by compiling
   to another cast calculus {{{cc}}}, in which we adapt ideas from
   the Coercion Calculus of Henglein [1994] to IFC.

Both cast calculi, {{{cc}}} and {{{cc_old}}}, support blame-tracking. Casts are
inserted on-demand, only when there is insufficient information during
compilation to decide whether a security policy is enforced or not.

* Quick Start Guide

** Software prerequisites

*** Software dependencies for checking proofs:

+ [[https://wiki.portal.chalmers.se/agda][Agda]] =2.6.4=
+ [[https://github.com/agda/agda-stdlib][Agda standard library]] =v1.7.3 (0817da6)=
+ [[https://github.com/jsiek/abstract-binding-trees/][The Abstract Binding Trees library]]
+ [[https://www.gnu.org/software/make/][GNU Make]]

*** Software dependencies for running demos:

+ [[https://www.haskell.org/ghc/][GHC]] with [[https://wiki.portal.chalmers.se/agda/Docs/MAlonzo][MAlonzo]]

*** Software dependencies for drawing simulation diagrams:

- [[https://tug.org/xetex/][XeLaTeX]] and =latexmk=
- [[https://graphviz.org/][GraphViz]] (specifically, =dot=)
- [[https://dot2tex.readthedocs.io/en/latest/][Dot2TeX]]
- [[https://www.zsh.org/][Zsh]] (for running plotting scripts)

** Building the project

+ To build everything, simply run =make= at the top level of this repository.
   This will build the proofs, the runnable demo, and a simulation explorer.

+ Alternatively, to check the proofs only, run ~make proofs~.
   The type-checker of Agda makes sure all the proofs are correct.

+ Alternatively, to build the simulator only, run ~make sim~.

** Running the demo programs of {{{surface_old}}}

We include example programs written in {{{surface_old}}}. To get a taste of
{{{surface_old}}} running in action, please build everything first and then run
~bin/RunDemo~.

* Selected Project Code Structure

All Agda source files are located in the [[./src][=src/=]] directory and end with =.agda=. A
(fairly) large part of the code-base is shared between {{{surface}}} and
{{{surface_old}}}.

** Meta-theoretical results and demo programs

There are three top-level modules in the [[./src][=src/=]] directory:

1. [[./src/Proofs.agda][*=Proofs=*]]: sources the proofs of important *meta-theoretical results*
  in the following modules:
  * Here are some meta-theoretical results for {{{surface_old}}} and its cast
    calculus {{{cc_old}}}:
    * [[./src/CC/TypeSafety.agda][=CC.TypeSafety=]]: {{{cc_old}}} is type safe by satisfying progress and
      preservation.
    * [[./src/CC/BigStepPreservation.agda][=CC.BigStepPreservation=]]: The big-step semantics of {{{cc_old}}} also
      preserves types. The big-step semantics
    * [[./src/CC/BigStepErasedDeterministic.agda][=CC.BigStepErasedDeterministic=]]: The big-step evaluation of erased
      {{{cc_old}}} is deterministic.
    * [[./src/CC/Noninterference.agda][=CC.Noninterference=]]: {{{cc_old}}} satisfies termination-insensitive
      noninterference (TINI).
    * [[./src/CC/Compile.agda][=CC.Compile=]]: The compilation from {{{surface_old}}} to {{{cc_old}}}
      preserves types.
  * Here are meta-theoretical results for {{{surface}}} and its cast calculus
    {{{cc}}}:
    * [[./src/CC2/Progress.agda][=CC2.Progress=]]: {{{cc}}} satisfies progress, so that a well-typed {{{cc}}}
      term is either a value or a blame, which does not reduce, or the term
      takes one reduction step.
    * [[./src/CC2/Preservation.agda][=CC2.Preservation=]]: The operational semantics of {{{cc}}} preserves types
      and the well-typedness of heap.
    * [[./src/Compile/CompilationPresTypes.agda][=Compile.CompilationPresTypes=]]: The compilation from {{{surface}}} to
      {{{cc}}} preserves types.
    * [[./src/Surface2/GradualGuarantee.agda][=Surface2.GradualGuarantee=]]: {{{surface}}} satisfies the gradual
      guarantee.
2. [[./src/RunDemo.agda][*=RunDemo=*]]: The program runs a stepper on the following {{{surface_old}}}
  programs and pretty-prints their reduction sequences to command line using [[./src/PrettyPrinter/Console/PP.agda][the
  Console pretty-printer backend]]:
  * The stepper that generates reduction sequences for {{{cc_old}}} in string
    format is defined in [[./src/CC/Interp.agda][=CC.Interp=]].
  * [[./src/ExamplePrograms/Demo/Example1.agda][=ExamplePrograms.Demo.Example1=]]: This example shows that {{{surface_old}}}
    indeed facilitates both compile-time (static) and runtime (dynamic)
    information-flow control. If a {{{surface_old}}} program is fully
    statically-typed, the type system of {{{surface_old}}} alone guarantees
    security. If type information is insufficient, the runtime of
    {{{surface_old}}} performs security checks during program execution. The
    transition between static and dynamic IFC enforcement is controlled by the
    programmer, depending on the precision of type annotations.
  - [[./src/ExamplePrograms/Demo/Example2.agda][=ExamplePrograms.Demo.Example2=]]: This example establishes the intuition that
    even if the programmer opts for dynamic IFC enforcement, {{{surface_old}}}
    still guards against any possible information leak through the heap.
  - [[./src/ExamplePrograms/Demo/Example3.agda][=ExamplePrograms.Demo.Example3=]]: This example shows that moving type
    annotations to be less precise (more dynamic) does not change the runtime
    behavior of a {{{surface_old}}} program.
3. [[./src/RunSimulation.agda][*=RunSimulation=*]]: The program runs a simulator that simulates between
  {{{cc_old}}} terms of different precision. The output defaults to
  [[./src/PrettyPrinter/GraphViz][the GraphViz pretty-printer backend]], which
  will place =*.dot= files that represent the simulation diagrams in the [[./plot][=plot/=]]
  directory.
  * The simulator is defined in [[./src/Simulator/Simulator.agda][=Simulator.Simulator=]].
  * The list of example {{{cc_old}}} terms to run can be found in
    [[./src/ExamplePrograms/Simulation/Examples.agda][=ExamplePrograms.Simulation.Examples=]].
  * Please refer to the =README= file in [[./plot][=plot/=]] for the instructions of
    generating the simulation diagrams in PDF format.

** Noteworthy technical definitions

*** General technical definitions in directory =Common/=

+ [[./src/Common/SecurityLabels.agda][=Common.SecurityLabels=]]: Definitions of /security labels/ as well as
  predicates, relations and operators on security labels.
+ [[./src/Common/Types.agda][=Common.Types=]]: Definitions of /(security) types/ as well as predicates,
  relations and operators on types.
+ [[./src/Common/BlameLabels.agda][=Common.BlameLabels=]]: This module defines /blame labels/, which are
  identifiers of casts. In case a cast fails, it raises a cast error, called
  blame, that contains its blame label. In this way, the programmer knows which
  cast is causing the problem.
+ [[./src/Common/TypeBasedCast.agda][=Common.TypeBasedCast=]]: This module defines /type-based casts/ between two
  security types. In particular, {{{cc_old}}} uses type-based cast as its
  cast representation.
+ [[./src/Common/Coercions.agda][=Common.Coercions=]]: This modules defines the coercion-based cast
  representation used by {{{cc}}}; in particular, it defines the /security
  coercions on values/ of {{{cc}}}.

*** Technical definitions of the surface language {{{surface_old}}} in =Surface/=

*** Technical definitions of the cast calculus {{{cc_old}}} in =CC/=

*** Technical definitions of the surface language {{{surface}}} in =Surface2/=

*** Technical definitions of the cast calculus {{{cc}}} in =CC2/=

**** The coercion calculus for security labels

**** Security label expressions that represent PC
