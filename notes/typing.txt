
--------------------------------------- Const
    Γ ; Σ ; gc ; pc ⊢ $ k ⇐ ` Bool of ℓ

             Σ(n ℓ̂) ≡ just T
------------------------------------------------- Addr
    Γ ; Σ ; gc ⊢ addr n ℓ̂ ⇐ Ref (T of ℓ̂) of ℓ

         Γ ∋ x ⦂ A
---------------------------------- Var
    Γ ; Σ ; gc ⊢ ` x ⇐ A

           ∀ pc. A ∷ Γ ; Σ ; g ; pc ⊢ N ⇐ B
---------------------------------------------- Lambda
    Γ ; Σ ; gc ⊢ ƛ N ⇐ ⟦ g ⟧ A → B of ℓ

  Γ ; Σ ; pc′ ; pc ⊢ L ⇐ ⟦ ℓᶜ ⟧ A → B of ℓ
  Γ ; Σ ; pc′ ; pc ⊢ M ⇐ A
              pc′ ⋎ ℓ ≼ ℓᶜ
               C = stamp B ℓ
--------------------------------------- App
  Γ ; Σ ; pc′ ; pc ⊢ app L M ℓᶜ A B ℓ ⇐ C

    Γ ; Σ ; gc ; pc ⊢ L ⇐ ⟦ ⋆ ⟧ A → B of g
    Γ ; Σ ; gc ; pc ⊢ M ⇐ A
               C = stamp B g
--------------------------------------- App!
    Γ ; Σ ; gc ; pc ⊢ app! L M A B g ⇐ C

    Γ ; Σ ; pc′ ; pc ⊢ L ⇐ ` Bool of ℓ
    ∀ pc. Γ ; Σ ; pc′ ⋎ ℓ ; pc ⊢ M ⇐ A
    ∀ pc. Γ ; Σ ; pc′ ⋎ ℓ ; pc ⊢ N ⇐ A
               B = stamp A ℓ
---------------------------------------- If
    Γ ; Σ ; pc′ ; pc ⊢ if L A ℓ M N ⇐ B

    Γ ; Σ ; gc ; pc ⊢ L ⇐ ` Bool of g
    ∀ pc. Γ ; Σ ; ⋆ ; pc ⊢ M ⇐ A
    ∀ pc. Γ ; Σ ; ⋆ ; pc ⊢ N ⇐ A
               B = stamp A g
---------------------------------------- If!
    Γ ; Σ ; gc ; pc ⊢ if! L A g M N ⇐ B

    Γ ; Σ ; gc ; pc ⊢ M ⇐ A
    ∀ pc. A ∷ Γ ; Σ ; gc ; pc ⊢ N ⇐ B
--------------------------------------- Let
    Γ ; Σ ; gc ; pc ⊢ `let M A N ⇐ B

    Γ ; Σ ; pc′ ; pc ⊢ M ⇐ T of l ℓ
               pc′ ≼ ℓ
      A = Ref (T of l ℓ) of low
-------------------------------------- RefStatic
    Γ ; Σ ; pc′ ; pc ⊢ ref⟦ ℓ ⟧ T M ⇐ A

    Γ ; Σ ; ⋆ ; pc ⊢ M ⇐ T of l ℓ
      A = Ref (T of l ℓ) of low
-------------------------------------- Ref?
    Γ ; Σ ; ⋆ ; pc ⊢ ref?⟦ ℓ ⟧ T M ⇐ A

    Γ ; Σ ; gc ; pc ⊢ M ⇐ T of l ℓ
               pc ≼ ℓ
      A = Ref (T of l ℓ) of l low
---------------------------------------------------------- Ref✓
    Γ ; Σ ; gc ; pc ⊢ ref✓⟦ ℓ ⟧ T M ⇐ A

   Γ ; Σ ; gc ; pc ⊢ M ⇐ Ref A of g
             B = stamp A g
--------------------------------------------- Deref
   Γ ; Σ ; gc ; pc ⊢ ! M A g ⇐ B

   Γ ; Σ ; l pc′ ; pc ⊢ L ⇐ Ref (T of l ℓ̂) of l ℓ
   Γ ; Σ ; l pc′ ; pc ⊢ M ⇐ T of l ℓ̂
            pc′ ⋎ ℓ ≼ ℓ̂
             A = Unit
--------------------------------------------- AssignStatic
   Γ ; Σ ; l pc′ ; pc ⊢ assign L M T ℓ̂ ℓ ⇐ A

   Γ ; Σ ; gc ; pc ⊢ L ⇐ Ref (T of ⋆) of ⋆
   ∀ pc. Γ ; Σ ; gc ; pc ⊢ M ⇐ T of ⋆
             A = Unit
---------------------------------------------------- Assign?
   Γ ; Σ ; gc ; pc ⊢ assign? L M T p ⇐ A

   Γ ; Σ ; gc ; pc ⊢ L ⇐ Ref (T of l ℓ̂) of l ℓ
   Γ ; Σ ; gc ; pc ⊢ M ⇐ T of l ℓ̂
           pc ⋎ ℓ ≼ ℓ̂
             A = Unit
--------------------------------------------- Assign✓
   Γ ; Σ ; gc ; pc ⊢ assign✓ L M T ℓ̂ ℓ ⇐ A

   Γ ; Σ ; ℓ ; ℓ ⊢ M ⇐ A
----------------------------------- ProtPC
   Γ ; Σ ; gc ; pc ⊢ ⦃ ℓ ⦄ M ⇐ A

   Γ ; Σ ; ⋆ ; ℓ ⊢ M ⇐ A
----------------------------------- ProtPC!
   Γ ; Σ ; gc ; pc ⊢ ⦃ ℓ ⟨ ℓ ! ⟩ ⦄ M ⇐ A

   Γ ; Σ ; gc ; pc ⊢ M ⇐ A
        B = stamp A ℓ
----------------------------------------- ProtVal
   Γ ; Σ ; gc ; pc ⊢ M ⟪ ℓ ⟫ ⇐ B

Note: in the proof version we may instead have a term `prot 𝓋 ℓ M`
whose typing includes a constraint `ℓ ≼ ℓ′` where ℓ′ is the security
level of 𝓋.

   Γ ; Σ ; gc ⊢ M ⇐ A   c : A ⇒ B
-------------------------------------------- Cast
   Γ ; Σ ; gc ⊢ M ⟨ c ⟩ ⇐ B

------------------------------------ Blame
   Γ ; Σ ; gc ⊢ blame p ⇐ A
