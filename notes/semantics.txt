PC and PC Expressions

PC Expr  e_pc    ::= low ⟨ c̅  ⟩
PC       pc      ::= low ⟨ c̅ₙ ⟩

Shorthands for PC expressions:

     ⊢ c̅ : low ⇒ g   e_pc=low⟨c̅⟩
  ----------------------------------
           ⊢ e_pc : g

       c̅₁ —→ c̅₂   e_pc₁=low⟨c̅₁⟩  e_pc₂=low⟨c̅₂⟩
  ---------------------------------------------------
              e_pc₁ —→ e_pc₂

stamp : (c̅ₙ : ⊢ ℓ₁ ⇒ g) → (ℓ₂ : StaticLabel) → ⊢ ℓ₁ ⇒ g ⋎̃ ℓ₂
stamp c̅ₙ low = c̅ₙ
stamp ID(low)                 high = ID(low) ⨾ ↑
stamp ID(high)                high = ID(high)
stamp (ID(low) ⨾ ↑)          high = ID(low) ⨾ ↑
stamp (ID(low) ⨾ low !)       high = ID(low) ⨾ ↑ ⨾ high !
stamp (ID(high) ⨾ high !)     high = ID(high) ⨾ high !
stamp (ID(low) ⨾ ↑ ; high !) high = ID(low) ⨾ ↑ ; high !

stamp : PC → StaticLabel → PC
stamp (low ⟨ c̅ₙ ⟩) ℓ = low ⟨ stamp c̅ₙ ℓ ⟩

pc_err : BlameLabel → PCExpr
pc_err p = low ⟨ ⊥ᵖ ⟩

_⟨_⟩ : PCExpr → (c : ⊢ g₁ ⇒ g₂) → PCExpr
(low ⟨ c̅ ⟩) ⟨ c ⟩ = low ⟨ c̅ ⨾ c ⟩

_⟨_⟩ : PCExpr → (c̅ : ⊢ g₁ ⇒ g₂) → PCExpr
(low ⟨ c̅₁ ⟩) ⟨ c̅₂ ⟩ = low ⟨ c̅₁ ⨟ c̅₂ ⟩


Expressions
M ::= app L M A B ℓ | app! L M A B g
    | if  L A ℓ M N | if!  L A g M N
    | let M N | ref⟦ ℓ ⟧ M | ref?⟦ ℓ ⟧ M p | ! M
    | assign  L M T ℓ̂ ℓ | assign? L M T p
    | □ ⟨ c ⟩ | ⦃ pc ⦄ M ⟪ ℓ ⟫ | { c̅ } M ⟪ ℓ ⟫ | blame p

Raw values   Vᵣ, Wᵣ ::= k  | ƛ N | addr n ℓ
Values       V, W   ::= Vᵣ | Vᵣ ⟨ cᵢ ⟩


Frames
F ::= app  □ M A B ℓ | app  V □ A B ℓ
    | app! □ M A B g | app! V □ A B g
    | if   □ A ℓ M N | if!  □ A g M N
    | let □ N | ref⟦ ℓ ⟧ □ | ref?⟦ ℓ ⟧ □ p | ! □
    | assign  □ M T ℓ̂ ℓ | assign  V □ T ℓ̂ ℓ
    | assign? □ M T p   | assign? V □ T p
    | □ ⟨ c ⟩


         M ∣ μ ∣ pc —→ N ∣ μ′
-----------------------------------------
  plug M F ∣ μ ∣ pc —→ plug N F ∣ μ′


plug (blame p) F ∣ μ ∣ pc —→ blame p ∣ μ


      (stamp pc ℓ) ⟨ g₁ ⋎̃ ℓ ⇒ g₂ ⟩ ⟨ c̅ ⟩ —↠ pc′
-------------------------------------------------------- ⊢ pc : g₁  ⊢ c̅ : g₂ ⇒ g₃
   { c̅ } M ⟪ ℓ ⟫ ∣ μ ∣ pc —→ ⦃ pc′ ⦄ M ⟪ ℓ ⟫ ∣ μ


      (stamp pc ℓ) ⟨ g₁ ⋎̃ ℓ ⇒ g₂ ⟩ ⟨ c̅ ⟩ —↠ pc_err p
-------------------------------------------------------- ⊢ pc : g₁  ⊢ c̅ : g₂ ⇒ g₃
   { c̅ } M ⟪ ℓ ⟫ ∣ μ ∣ pc —→ blame p


              M ∣ μ ∣ pc′ —→ N ∣ μ′
------------------------------------------------------------
⦃ pc′ ⦄ M ⟪ ℓ ⟫ ∣ μ ∣ pc  —→ ⦃ pc′ ⦄ N ⟪ ℓ ⟫ ∣ μ′


⦃ pc′ ⦄ blame p ⟪ ℓ ⟫ ∣ μ ∣ pc —→ blame p


⦃ _ ⦄ V ⟪ ℓ ⟫ ∣ μ ∣ pc —→ stamp V ℓ ∣ μ


                 c̅ —↠ c̅ₙ
-----------------------------------------------------
    Vᵣ ⟨ cᵣ | c̅ ⟩ ∣ μ | pc —→ Vᵣ ⟨ cᵣ | c̅ₙ ⟩ ∣ μ


                 c̅ —↠ ⊥ᵖ
--------------------------------------------
    Vᵣ ⟨ cᵣ | c̅ ⟩ ∣ μ | pc —→ blame p


k ⟨ id(ι) | id(ℓ) ⟩ ∣ μ ∣ pc —→ k ∣ μ


(Vᵣ ⟨ cᵢ ⟩) ⟨ d ⟩ ∣ μ ∣ pc —→ V ⟨ cᵢ ⨟ d ⟩ ∣ μ


app (ƛ N) V A B ℓ ∣ μ ∣ pc —→ ⦃ stamp pc ℓ ⦄ (N[ V ]) ⟪ ℓ ⟫ ∣ μ


app! (ƛ N) V A B ℓ ∣ μ ∣ pc —→ { id(⋆) } (N[ V ]) ⟪ ℓ ⟫ ∣ μ


app ((ƛ N) ⟨ d̅ | c → d | c̅ₙ ⟩) V A B ℓ ∣ μ ∣ pc —→
     let V ⟨ c ⟩ in ({ d̅ } (N ⟨ d ⟩) ⟪ ∥ c̅ₙ ∥ ⟫) ∣ μ


app! ((ƛ N) ⟨ d̅ | c → d | c̅ₙ ⟩) V A B g ∣ μ ∣ pc —→
     let V ⟨ c ⟩ in ({ d̅ } (N ⟨ d ⟩) ⟪ ∥ c̅ₙ ∥ ⟫) ∣ μ


if true A ℓ M N ∣ μ ∣ pc —→ ⦃ stamp pc ℓ ⦄ M ⟪ ℓ ⟫ ∣ μ


if! true A ℓ M N ∣ μ ∣ pc —→ { id(⋆) } M ⟪ ℓ ⟫ ∣ μ


if (true ⟨ id(𝔹) | ↑ ⟩) A high M N ∣ μ ∣ pc —→ ⦃ stamp pc high ⦄ M ⟪ high ⟫ ∣ μ


if! (true ⟨ id(𝔹) | c̅ₙ ⟩) A g M N ∣ μ ∣ pc —→ { id(⋆) } M ⟪ ∥ c̅ₙ ∥ ⟫ ∣ μ


let V A N ∣ μ ∣ pc —→ N[ V ] ∣ μ


ref⟦ ℓ ⟧ V ∣ μ ∣ pc —→ addr n ℓ ∣ μ(ℓ ↦ μ(ℓ)(n ↦ V))   , n is fresh


                         pc ⟨ ℓ ?ᵖ ⟩ —↠ pc′
-----------------------------------------------------------------------------
  ref?⟦ ℓ ⟧ V p ∣ μ ∣ pc —→ addr n ℓ ∣ μ(ℓ ↦ μ(ℓ)(n ↦ V)) , n is fresh


                         pc ⟨ ℓ ?ᵖ ⟩ —↠ pc_err p
----------------------------------------------------------------------------
                  ref?⟦ ℓ ⟧ V p ∣ μ ∣ pc —→ blame p


                                μ(ℓ̂)(n) = V
----------------------------------------------------------------
  ! (addr n ℓ̂) (T of ℓ̂) ℓ ∣ μ ∣ pc —→ ⦃ pc ⦄ V ⟪ ℓ ⟫ ∣ μ


                                μ(ℓ̂)(n) = V
------------------------------------------------------------------------------------
! (addr n ℓ̂ ⟨ in: c; out: d | c̅ₙ ⟩) A g ∣ μ ∣ pc —→ ⦃ pc ⦄ (V ⟨ d ⟩) ⟪ ∥ c̅ₙ ∥ ⟫


assign (addr n ℓ̂) V T ℓ̂ ℓ ∣ μ ∣ pc —→ unit ∣ μ(ℓ̂ ↦ μ(ℓ̂)(n ↦ V))


------------------------------------------------------------------------
assign (addr n ℓ̂ ⟨ in: c; out: d | c̅ₙ ⟩) V T ℓ̂ ℓ ∣ μ ∣ pc —→
       unit ∣ μ(ℓ̂ ↦ μ(ℓ̂)(n ↦ V⟨c⟩))


     (stamp pc ∥ c̅ₙ ∥) ⟨ g ⋎̃ ∥ c̅ₙ ∥ ⇒ ⋆ ⟩ ⟨ ℓ̂ ?ᵖ ⟩ —↠ pc′
------------------------------------------------------------------------ ⊢ pc : g
assign? (addr n ℓ̂ ⟨ in: c; out: d | c̅ₙ ⟩) V T p ∣ μ | pc —→
        unit | μ(ℓ̂ ↦ μ(ℓ̂)(n ↦ V⟨c⟩))


     (stamp pc ∥ c̅ₙ ∥) ⟨ g ⋎̃ ∥ c̅ₙ ∥ ⇒ ⋆ ⟩ ⟨ ℓ̂ ?ᵖ ⟩ —↠ pc_err p
------------------------------------------------------------------------ ⊢ pc : g
assign? (addr n ℓ̂ ⟨ in: c; out: d | c̅ₙ ⟩) V T p ∣ μ | pc —→
        blame p
