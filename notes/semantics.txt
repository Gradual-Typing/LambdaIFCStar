PC expressions e_pc ::= low ⟨ c̅  ⟩
PC             v_pc ::= low ⟨ c̅ₙ ⟩

expressions
M = app L M ℓᶜ A B ℓ | app! L M A B g
    | if L A ℓ M N | if! L A g M N
    | let M N | ref⟦ ℓ ⟧ T M | ref?⟦ ℓ ⟧ T M p | ! M
    | assign  L M T ℓ̂ ℓ | assign? L M T p
    | □ ⟨ c ⟩ | ⦃ d̅ ⦄ M ⟪ ℓ ⟫ | blame p

raw values   Vᵣ, Wᵣ ::= k | ƛ N | addr n ℓ
values       V, W   ::= Vᵣ | Vᵣ ⟨ cᵢ ⟩


F ::= app □ M ℓᶜ A B ℓ | app V □ ℓᶜ A B ℓ
    | app! □ M A B g | app! V □ A B g
    | if □ A ℓ M N | if! □ A g M N
    | let □ N | ref⟦ ℓ ⟧ T □ | ref?⟦ ℓ ⟧ T □ p | ! □
    | assign  □ M T ℓ̂ ℓ | assign  V □ T ℓ̂ ℓ
    | assign? □ M T p   | assign? V □ T p
    | □ ⟨ c ⟩


       M ∣ μ ∣ v_pc —→ N ∣ μ′
-----------------------------------------
plug M F ∣ μ ∣ v_pc —→ plug N F ∣ μ′


plug (blame p) F ∣ μ ∣ v_pc —→ blame p ∣ μ


          ⊢ c̅ₙ : g₁ ⇒ g₂   ⊢ d̅ : g₃ ⇒ g₄
       (((stamp c̅ₙ ℓ) ⨾ g₂ ⋎̃ ℓ ⇒ g₃) ⨟ d̅) —↠ c̅ₙ′
             M ∣ μ ∣ c̅ₙ′ —→ N ∣ μ′
------------------------------------------------------------
⦃ d̅ ⦄ M ⟪ ℓ ⟫ ∣ μ ∣ low ⟨ c̅ₙ ⟩ —→ ⦃ d̅ ⦄ N ⟪ ℓ ⟫ ∣ μ′


          ⊢ c̅ₙ : g₁ ⇒ g₂   ⊢ d̅ : g₃ ⇒ g₄
       (((stamp c̅ₙ ℓ) ⨾ g₂ ⋎̃ ℓ ⇒ g₃) ⨟ d̅ₙ) —↠ ⊥ᵖ
------------------------------------------------------------
⦃ d̅ ⦄ M ⟪ ℓ ⟫ ∣ μ ∣ low ⟨ c̅ₙ ⟩ —→ blame p ∣ μ′


⦃ d̅ ⦄ blame p ⟪ ℓ ⟫ ∣ μ ∣ v_pc —→ blame p ∣ μ


⦃ _ ⦄ V ⟪ ℓ ⟫ ∣ μ ∣ v_pc —→ stamp V ℓ ∣ μ


               c —↠ cᵢ
------------------------------------------
  Vᵣ ⟨ c ⟩ ∣ μ | v_pc —→ Vᵣ ⟨ cᵢ ⟩ ∣ μ


            c —↠ (cᵣ | ⊥ᵖ)
----------------------------------------
  Vᵣ ⟨ c ⟩ ∣ μ | v_pc —→ blame p


------------------------------------------
  k ⟨ id(ι) | id(ℓ) ⟩ ∣ μ ∣ v_pc —→ k ∣ μ


(Vᵣ ⟨ cᵢ ⟩) ⟨ d ⟩ ∣ μ ∣ v_pc —→ V ⟨ cᵢ ⨟ d ⟩ ∣ μ


-------------------------------------------------------------------------------
app (ƛ N) V ℓᶜ A B ℓ ∣ μ ∣ v_pc —→ ⦃ id ⦄ (N[ V ]) ⟪ ℓ ⟫ ∣ μ


                      ℓ = ∥ c̅ₙ ∥
-------------------------------------------------------------------------------
app ((ƛ N) ⟨ d̅ | c → d | c̅ₙ ⟩) V ℓᶜ A B ℓ ∣ μ ∣ v_pc —→
      let (V ⟨ c ⟩) in (⦃ d̅ ⦄ (N ⟨ d ⟩) ⟪ ℓ ⟫) ∣ μ


-------------------------------------------------------------------------------
app! (ƛ N) V A B ℓ ∣ μ ∣ v_pc —→ ⦃ id ⦄ (N[ V ]) ⟪ ℓ ⟫ ∣ μ


                      ℓ = ∥ c̅ₙ ∥
-----------------------------------------------------------
app! ((ƛ N) ⟨ d̅ | c → d | c̅ₙ ⟩) V A B g ∣ μ ∣ v_pc —→
    let (V ⟨ c ⟩) in (⦃ d̅ ⦄ (N ⟨ d ⟩) ⟪ ℓ ⟫) ∣ μ


if true A ℓ M N ∣ μ ∣ v_pc —→ ⦃ id ⦄ M ⟪ ℓ ⟫ ∣ μ


if (true ⟨ id(𝔹) | ↑ ⟩) A high M N ∣ μ ∣ v_pc —→ ⦃ id ⦄ M ⟪ high ⟫ ∣ μ


if! true A ℓ M N ∣ μ ∣ v_pc —→ ⦃ id ⦄ M ⟪ ℓ ⟫ ∣ μ


                         ℓ = ∥ c̅ₙ ∥
--------------------------------------------------------------------------
if! (true ⟨ id(𝔹) | c̅ₙ ⟩) A g M N ∣ μ ∣ v_pc —→ ⦃ id ⦄ M ⟪ ℓ ⟫ ∣ μ


let V A N ∣ μ ∣ v_pc —→ N[ V ] ∣ μ


------------------------------------------------------------------------------
ref⟦ ℓ ⟧ T V ∣ μ ∣ v_pc —→ addr n ℓ ∣ μ(ℓ ↦ μ(ℓ)(n ↦ V))   , n is fresh


                         c̅ₙ ⨾ ⋆ ⇒ᵖ ℓ —→ c̅ₙ′
-------------------------------------------------------------------------------
ref?⟦ ℓ ⟧ T V p ∣ μ ∣ low ⟨ c̅ₙ ⟩ —→ addr n ℓ ∣ μ(ℓ ↦ μ(ℓ)(n ↦ V)) , n is fresh


                         c̅ₙ ⨾ ⋆ ⇒ᵖ ℓ —→ ⊥ᵖ
---------------------------------------------------------------------------------
ref?⟦ ℓ ⟧ T V p ∣ μ ∣ low ⟨ c̅ₙ ⟩ —→ blame p ∣ μ   , n is fresh


                   μ(ℓ̂)(n) = V
-----------------------------------------------------------
! (addr n ℓ̂) (T of ℓ̂) ℓ ∣ μ ∣ v_pc —→ ⦃ id ⦄ V ⟪ ℓ ⟫ ∣ μ

                          ℓ = ∥ c̅ₙ ∥
                          μ(ℓ̂)(n) = V
-----------------------------------------------------------------------------
! (addr n ℓ̂ ⟨ d̅ | in: c; out: d | c̅ₙ ⟩) A g ∣ μ ∣ v_pc —→ ⦃ id ⦄ (V ⟨ d ⟩) ⟪ ℓ ⟫


assign (addr n ℓ̂) V T ℓ̂ ℓ ∣ μ ∣ v_pc —→ unit ∣ μ(ℓ̂ ↦ μ(ℓ̂)(n ↦ V))


assign (addr n ℓ̂ ⟨ d̅ | in: c; out: d | c̅ₙ ⟩) V T ℓ̂ ℓ ∣ μ ∣ v_pc
   —→ unit ∣ μ(ℓ̂ ↦ μ(ℓ̂)(n ↦ V⟨c⟩))


                         ℓ = ∥ c̅ₙ ∥
               ⊢ c̅ₙ′ : g₁ ⇒ g₂   ⊢ d̅ : g₃ ⇒ g₄
          (((stamp c̅ₙ′ ℓ) ⨾ g₂ ⋎̃ ℓ ⇒ g₃) ⨟ d̅) —↠ c̅ₙ″
-----------------------------------------------------------------------
assign? (addr n ℓ̂ ⟨ d̅ | in: c; out: d | c̅ₙ ⟩) V T p ∣ μ | low ⟨ c̅ₙ′ ⟩ —→
        unit | μ(ℓ̂ ↦ μ(ℓ̂)(n ↦ V⟨c⟩))


                         ℓ = ∥ c̅ₙ ∥
               ⊢ c̅ₙ′ : g₁ ⇒ g₂   ⊢ d̅ : g₃ ⇒ g₄
          (((stamp c̅ₙ′ ℓ) ⨾ g₂ ⋎̃ ℓ ⇒ g₃) ⨟ d̅) —↠ ⊥ᵖ
-----------------------------------------------------------------------
assign? (addr n ℓ̂ ⟨ d̅ | in: c; out: d | c̅ₙ ⟩) V T p ∣ μ | low ⟨ c̅ₙ′ ⟩ —→ blame p

Note: `dₗ` is projecting, where the blame label `p` comes from
