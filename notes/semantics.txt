app (ƛ N) V ℓᶜ A B ℓ ∣ μ ∣ pc —→ (⦃ ℓᶜ ⦄ (N[ V ])) ⟪ ℓ ⟫ ∣ μ


          pc ⟨ pc ⇒ ℓᶜ ⟩ ⟨ dₗ ⟩ —↠ 𝓋
-----------------------------------------------------------
app ((ƛ N) ⟨ dₗ | c → d | cₗ ⟩) V ℓᶜ A B ℓ ∣ μ ∣ pc —→
    ⦃ 𝓋 ⦄ (let (V ⟨ c ⟩) in N ⟨ d ⟩) ⟪ ∥ cₗ ∥ ⟫ ∣ μ


       stamp 𝓋 ℓ ⟨ ty(𝓋) ⋎̃ ℓ ⇒ ⋆ ⟩ —↠ 𝓋′
----------------------------------------------------------------------------
app! (ƛ N) V A B ℓ ∣ μ ∣ 𝓋 —→ ⦃ 𝓋′ ⦄ (N[ V ]) ⟪ ℓ ⟫ ∣ μ


       stamp 𝓋 ∥ cₗ ∥ ⟨ ty(𝓋) ⋎̃ g ⇒ ⋆ ⟩ ⟨ dₗ ⟩ —↠ 𝓋′
-----------------------------------------------------------
app! ((ƛ N) ⟨ dₗ | c → d | cₗ ⟩) V A B g ∣ μ ∣ 𝓋 —→
    (⦃ 𝓋′ ⦄ let (V ⟨ c ⟩) in (N ⟨ stamp d cₗ ⟩)) ∣ μ


if true A ℓ M N ∣ μ ∣ pc —→ ⦃ ℓ ⦄ M ⟪ ℓ ⟫ ∣ μ


if (true ⟨ id(𝔹) | ↑ ⟩) A high M N ∣ μ ∣ pc —→ ⦃ high ⦄ M ⟪ high ⟫ ∣ μ


if! true A ℓ M N ∣ μ ∣ 𝓋 —→ ⦃ stamp 𝓋 ℓ ⦄ M ⟪ ℓ ⟫ ∣ μ

Note: 𝓋 must be of form ℓᶜ ⟨ ℓᶜ ! ⟩ for some ℓᶜ


      stamp 𝓋 ∥ cₗ ∥ ⟨ ty(𝓋) ⋎̃ g ⇒ ⋆ ⟩ —↠ 𝓋′
--------------------------------------------------------------------------
if! (true ⟨ id(𝔹) | cₗ ⟩) A g M N ∣ μ ∣ 𝓋 —→ ⦃ 𝓋′ ⦄ M ⟪ ∥ cₗ ∥ ⟫ ∣ μ


let V A N ∣ μ ∣ 𝓋 —→ N[ V ] ∣ μ


ref⟦ ℓ ⟧ T M ∣ μ ∣ 𝓋 —→ ref✓⟦ ℓ ⟧ T M ∣ μ


  ℓ′ ⟨ ℓ′ ! ⟩ ⟨ ⋆ ⇒ᵖ ℓ ⟩ —↠ 𝓋′
---------------------------------------------------------
ref?⟦ ℓ ⟧ T M p ∣ μ ∣ ℓ′ ⟨ ℓ′ ! ⟩ —→ ref✓⟦ ℓ ⟧ T M ∣ μ


  ℓ′ ⟨ ℓ′ ! ⟩ ⟨ ⋆ ⇒ᵖ ℓ ⟩ —↠ err p
---------------------------------------------------------
ref?⟦ ℓ ⟧ T M p ∣ μ ∣ ℓ′ ⟨ ℓ′ ! ⟩ —→ blame p ∣ μ


ref✓⟦ ℓ ⟧ T V ∣ μ ∣ 𝓋 —→ addr n ℓ ∣ (n ℓ ↦ V) ∷ μ     , n is fresh


                   μ(n ℓ̂) = V
---------------------------------------------------
! (addr n ℓ̂) (T of ℓ̂) ℓ ∣ μ ∣ 𝓋 —→ V ⟪ ℓ ⟫ ∣ μ


                   μ(n ℓ̂) = V
----------------------------------------------------------------------------------------
! (addr n ℓ̂ ⟨ dₗ | in: c; out: d | cₗ ⟩) A g ∣ μ ∣ 𝓋 —→ V ⟪ ∥ cₗ ∥ ⟫ ⟨ stamp d cₗ ⟩


assign L M T ℓ̂ ℓ ∣ μ ∣ 𝓋 —→ assign✓ L M T ℓ̂ ℓ ∣ μ


                                ℓ = ∥ cₗ ∥
                  stamp 𝓋 ℓ ⟨ ty(𝓋) ⋎̃ ℓ ⇒ ⋆ ⟩ ⟨ dₗ ⟩ —↠ 𝓋′
----------------------------------------------------------------------------------------
assign? (addr n ℓ̂ ⟨ dₗ | in: c; out: d | cₗ ⟩) M T p ∣ μ ∣ 𝓋 —→ assign✓ ...

                                ℓ = ∥ cₗ ∥
                  stamp 𝓋 ℓ ⟨ ty(𝓋) ⋎̃ ℓ ⇒ ⋆ ⟩ ⟨ dₗ ⟩ —↠ err p
----------------------------------------------------------------------------------------
assign? (addr n ℓ̂ ⟨ dₗ | in: c; out: d | cₗ ⟩) M T p ∣ μ ∣ 𝓋 —→ blame p


assign✓ (addr n ℓ̂) V T ℓ̂ ℓ ∣ μ ∣ 𝓋 —→ unit ∣ μ(n ℓ̂) = V


assign✓ (addr n ℓ̂ ⟨ dₗ | in: c; out: d | cₗ ⟩) V T ℓ̂ ℓ ∣ μ ∣ 𝓋 —→ unit ∣ μ(n ℓ̂) = (V ⟨ c ⟩)
