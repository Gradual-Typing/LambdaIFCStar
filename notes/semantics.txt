PC           pc ::= low ⟨ c̅ₙ ⟩

expressions
M ::= app L M A B ℓ | app! L M A B g
    | if  L A ℓ M N | if!  L A g M N
    | let M N | ref⟦ ℓ ⟧ T M | ref?⟦ ℓ ⟧ T M p | ! M
    | assign  L M T ℓ̂ ℓ | assign? L M T p
    | □ ⟨ c ⟩ | ⦃ pc ⦄ M ⟪ ℓ ⟫ | { c̅ } M ⟪ ℓ ⟫ | blame p

raw values   Vᵣ, Wᵣ ::= k  | ƛ N | addr n ℓ
values       V, W   ::= Vᵣ | Vᵣ ⟨ cᵢ ⟩


F ::= app  □ M A B ℓ | app  V □ A B ℓ
    | app! □ M A B g | app! V □ A B g
    | if   □ A ℓ M N | if!  □ A g M N
    | let □ N | ref⟦ ℓ ⟧ T □ | ref?⟦ ℓ ⟧ T □ p | ! □
    | assign  □ M T ℓ̂ ℓ | assign  V □ T ℓ̂ ℓ
    | assign? □ M T p   | assign? V □ T p
    | □ ⟨ c ⟩


         M ∣ μ ∣ pc —→ N ∣ μ′
-----------------------------------------
  plug M F ∣ μ ∣ pc —→ plug N F ∣ μ′


plug (blame p) F ∣ μ ∣ pc —→ blame p ∣ μ


       low ⟨ (stamp c̅ₙ ℓ) ⨾ (g₁ ⋎̃ ℓ ⇒ g₂) ⨟ c̅ ⟩ —↠ pc
--------------------------------------------------------------  ⊢ c̅ₙ : low ⇒ g₁  ⊢ c̅ : g₂ ⇒ g₃
   { c̅ } M ⟪ ℓ ⟫ ∣ μ ∣ low ⟨ c̅ₙ ⟩ —→ ⦃ pc ⦄ M ⟪ ℓ ⟫ ∣ μ


  low ⟨ (stamp c̅ₙ ℓ) ⨾ (g₁ ⋎̃ ℓ ⇒ g₂) ⨟ c̅ ⟩ —↠ low ⟨ ⊥ᵖ ⟩
--------------------------------------------------------------  ⊢ c̅ₙ : low ⇒ g₁  ⊢ c̅ : g₂ ⇒ g₃
   { c̅ } M ⟪ ℓ ⟫ ∣ μ ∣ low ⟨ c̅ₙ ⟩ —→ blame p


              M ∣ μ ∣ pc′ —→ N ∣ μ′
------------------------------------------------------------
⦃ pc′ ⦄ M ⟪ ℓ ⟫ ∣ μ ∣ pc  —→ ⦃ pc′ ⦄ N ⟪ ℓ ⟫ ∣ μ′


⦃ pc′ ⦄ blame p ⟪ ℓ ⟫ ∣ μ ∣ pc —→ blame p


⦃ _ ⦄ V ⟪ ℓ ⟫ ∣ μ ∣ pc —→ stamp V ℓ ∣ μ


                c —↠ cᵢ
--------------------------------------------
  Vᵣ ⟨ c ⟩ ∣ μ | pc —→ Vᵣ ⟨ cᵢ ⟩ ∣ μ


            c —↠ (cᵣ | ⊥ᵖ)
--------------------------------------------
    Vᵣ ⟨ c ⟩ ∣ μ | v_pc —→ blame p


k ⟨ id(ι) | id(ℓ) ⟩ ∣ μ ∣ pc —→ k ∣ μ


(Vᵣ ⟨ cᵢ ⟩) ⟨ d ⟩ ∣ μ ∣ pc —→ V ⟨ cᵢ ⨟ d ⟩ ∣ μ


app (ƛ N) V A B ℓ ∣ μ ∣ pc —→ ⦃ stamp pc ℓ ⦄ (N[ V ]) ⟪ ℓ ⟫ ∣ μ


app ((ƛ N) ⟨ d̅ | c → d | c̅ₙ ⟩) V A B ℓ ∣ μ ∣ pc —→ let V ⟨ c ⟩ in ({ d̅ } (N ⟨ d ⟩) ⟪ ∥ c̅ₙ ∥ ⟫) ∣ μ


app! (ƛ N) V A B ℓ ∣ μ ∣ pc —→ { id(⋆) } (N[ V ]) ⟪ ℓ ⟫ ∣ μ


app! ((ƛ N) ⟨ d̅ | c → d | c̅ₙ ⟩) V A B g ∣ μ ∣ pc —→ let V ⟨ c ⟩ in ({ d̅ } (N ⟨ d ⟩) ⟪ ∥ c̅ₙ ∥ ⟫) ∣ μ


if true A ℓ M N ∣ μ ∣ pc —→ ⦃ stamp pc ℓ ⦄ M ⟪ ℓ ⟫ ∣ μ


if (true ⟨ id(𝔹) | ↑ ⟩) A high M N ∣ μ ∣ pc —→ ⦃ stamp pc high ⦄ M ⟪ high ⟫ ∣ μ


if! true A ℓ M N ∣ μ ∣ pc —→ { id(⋆) } M ⟪ ℓ ⟫ ∣ μ


if! (true ⟨ id(𝔹) | c̅ₙ ⟩) A g M N ∣ μ ∣ pc —→ ⦃ id(⋆) ⦄ M ⟪ ∥ c̅ₙ ∥ ⟫ ∣ μ


let V A N ∣ μ ∣ pc —→ N[ V ] ∣ μ


ref⟦ ℓ ⟧ T V ∣ μ ∣ pc —→ addr n ℓ ∣ μ(ℓ ↦ μ(ℓ)(n ↦ V))   , n is fresh


                         low ⟨ c̅ₙ ⨾ ⋆ ⇒ᵖ ℓ ⟩ —↠ pc
--------------------------------------------------------------------------------------
  ref?⟦ ℓ ⟧ T V p ∣ μ ∣ low ⟨ c̅ₙ ⟩ —→ addr n ℓ ∣ μ(ℓ ↦ μ(ℓ)(n ↦ V)) , n is fresh


                       low ⟨ c̅ₙ ⨾ ⋆ ⇒ᵖ ℓ ⟩ —↠ low ⟨ ⊥ᵖ ⟩
---------------------------------------------------------------------------------
                  ref?⟦ ℓ ⟧ T V p ∣ μ ∣ low ⟨ c̅ₙ ⟩ —→ blame p


                          μ(ℓ̂)(n) = V
----------------------------------------------------------------
  ! (addr n ℓ̂) (T of ℓ̂) ℓ ∣ μ ∣ pc —→ ⦃ pc ⦄ V ⟪ ℓ ⟫ ∣ μ


                          μ(ℓ̂)(n) = V
----------------------------------------------------------------------------------------
! (addr n ℓ̂ ⟨ d̅ | in: c; out: d | c̅ₙ ⟩) A g ∣ μ ∣ pc —→ ⦃ pc ⦄ (V ⟨ d ⟩) ⟪ ∥ c̅ₙ ∥ ⟫


assign (addr n ℓ̂) V T ℓ̂ ℓ ∣ μ ∣ v_pc —→ unit ∣ μ(ℓ̂ ↦ μ(ℓ̂)(n ↦ V))


       low ⟨ (stamp c̅ₙ′ ℓ) ⨾ (ℓ′ ⋎ ℓ ⇒ ℓ̂′) ⨟ d̅ ⟩ —↠ pc
----------------------------------------------------------------------------- ⊢ c̅ₙ′ : low ⇒ ℓ′  ⊢ d̅ : ℓ̂′ ⇒ ℓ̂
assign (addr n ℓ̂ ⟨ d̅ | in: c; out: d | c̅ₙ ⟩) V T ℓ̂ ℓ ∣ μ ∣ low ⟨ c̅ₙ′ ⟩ —→
       unit ∣ μ(ℓ̂ ↦ μ(ℓ̂)(n ↦ V⟨c⟩))


       low ⟨ (stamp c̅ₙ′ ℓ) ⨾ (ℓ′ ⋎ ℓ ⇒ ℓ̂′) ⨟ d̅ ⟩ —↠ low ⟨ ⊥ᵖ ⟩
----------------------------------------------------------------------------- ⊢ c̅ₙ′ : low ⇒ ℓ′  ⊢ d̅ : ℓ̂′ ⇒ ℓ̂
assign (addr n ℓ̂ ⟨ d̅ | in: c; out: d | c̅ₙ ⟩) V T ℓ̂ ℓ ∣ μ ∣ low ⟨ c̅ₙ′ ⟩ —→
       blame p


        low ⟨ (stamp c̅ₙ′ ∥ c̅ₙ ∥) ⨾ (g ⋎̃ ∥ c̅ₙ ∥ ⇒ ⋆) ⨟ d̅ ⟩ —↠ pc
----------------------------------------------------------------------------  ⊢ c̅ₙ′ : low ⇒ g  ⊢ d̅ : ⋆ ⇒ ℓ̂
assign? (addr n ℓ̂ ⟨ d̅ | in: c; out: d | c̅ₙ ⟩) V T p ∣ μ | low ⟨ c̅ₙ′ ⟩ —→
        unit | μ(ℓ̂ ↦ μ(ℓ̂)(n ↦ V⟨c⟩))


        low ⟨ (stamp c̅ₙ′ ∥ c̅ₙ ∥) ⨾ (g ⋎̃ ∥ c̅ₙ ∥ ⇒ ⋆) ⨟ d̅ ⟩ —↠ low ⟨ ⊥ᵖ ⟩
----------------------------------------------------------------------------  ⊢ c̅ₙ′ : low ⇒ g  ⊢ d̅ : ⋆ ⇒ ℓ̂
assign? (addr n ℓ̂ ⟨ d̅ | in: c; out: d | c̅ₙ ⟩) V T p ∣ μ | low ⟨ c̅ₙ′ ⟩ —→
        blame p
