PC expressions e_pc ::= low ⟨ c̅  ⟩
PC             v_pc ::= low ⟨ c̅ₙ ⟩

TODO expressions

raw values   Vᵣ, Wᵣ ::= k | ƛ N | addr n
values       V, W   ::= Vᵣ | Vᵣ ⟨ cᵢ ⟩


F ::= app □ M ℓᶜ A B ℓ | app V □ ℓᶜ A B ℓ
    | app! □ M A B g | app! V □ A B g
    | if □ A ℓ M N | if! □ A g M N
    | let □ N | ref⟦ ℓ ⟧ T □ | ref?⟦ ℓ ⟧ T □ p | ! □
    | assign  □ M T ℓ̂ ℓ | assign  V □ T ℓ̂ ℓ
    | assign? □ M T p   | assign? V □ T p
    | □ ⟨ c ⟩

       M ∣ μ ∣ v_pc —→ N ∣ μ′
---------------------------------------
plug M F ∣ μ ∣ v_pc —→ plug N F ∣ μ′


plug (blame p) F ∣ μ ∣ v_pc —→ blame p ∣ μ

                    (stamp c̅ₙ ℓ) ⨾ . ⇒ ℓᶜ —↠ c̅ₙ′
-------------------------------------------------------------------------------
app (ƛ N) V ℓᶜ A B ℓ ∣ μ ∣ low ⟨ c̅ₙ ⟩ —→ ⦃ low ⟨ c̅ₙ ⟩ ⦄ (N[ V ]) ⟪ ℓ ⟫ ∣ μ


          ((stamp c̅ₙ′ ℓ) ⨾ . ⇒ ℓᶜ) ⨟ d̅ₙ —↠ c̅ₙ″
-------------------------------------------------------------------------------
app ((ƛ N) ⟨ d̅ₙ | c → d | c̅ₙ ⟩) V ℓᶜ A B ℓ ∣ μ ∣ low ⟨ c̅ₙ′ ⟩ —→
      let (V ⟨ c ⟩) in (⦃ 𝓋 ⦄ (N ⟨ d ⟩) ⟪ ℓ ⟫) ∣ μ


         (stamp c̅ₙ ℓ) ⨾ . ⇒ ⋆ —↠ c̅ₙ′
------------------------------------------------------------
app! (ƛ N) V A B ℓ ∣ μ ∣ low ⟨ c̅ₙ ⟩ —→ ⦃ low ⟨ c̅ₙ′ ⟩ ⦄ (N[ V ]) ⟪ ℓ ⟫ ∣ μ


                      ℓ = ∥ cₗ ∥
       stamp 𝓋 ℓ ⟨ ty(𝓋) ⋎̃ ℓ ⇒ ⋆ ⟩ ⟨ dₗ ⟩ —↠ 𝓋′
-----------------------------------------------------------
app! ((ƛ N) ⟨ dₗ | c → d | cₗ ⟩) V A B g ∣ μ ∣ 𝓋 —→
    let (V ⟨ c ⟩) in (⦃ 𝓋′ ⦄ (N ⟨ d ⟩) ⟪ ℓ ⟫) ∣ μ

                      ℓ = ∥ cₗ ∥
       stamp 𝓋 ℓ ⟨ ty(𝓋) ⋎̃ ℓ ⇒ ⋆ ⟩ ⟨ dₗ ⟩ —↠ err p
-----------------------------------------------------------------
app! ((ƛ N) ⟨ dₗ | c → d | cₗ ⟩) V A B g ∣ μ ∣ 𝓋 —→ blame p

Note: `dₗ` may contain a projection


if true A ℓ M N ∣ μ ∣ pc —→ ⦃ pc ⋎ ℓ ⦄ M ⟪ ℓ ⟫ ∣ μ

if (true ⟨ id(𝔹) | ↑ ⟩) A high M N ∣ μ ∣ pc —→ ⦃ high ⦄ M ⟪ high ⟫ ∣ μ


if! true A ℓ M N ∣ μ ∣ 𝓋 —→ ⦃ stamp 𝓋 ℓ ⦄ M ⟪ ℓ ⟫ ∣ μ

Note: from typing, 𝓋 must be `ℓᶜ ⟨ ℓᶜ ! ⟩` for some ℓᶜ


                         ℓ = ∥ cₗ ∥
             stamp 𝓋 ℓ ⟨ ty(𝓋) ⋎̃ ℓ ⇒ ⋆ ⟩ —↠ 𝓋′
--------------------------------------------------------------------
if! (true ⟨ id(𝔹) | cₗ ⟩) A g M N ∣ μ ∣ 𝓋 —→ ⦃ 𝓋′ ⦄ M ⟪ ℓ ⟫ ∣ μ


let V A N ∣ μ ∣ 𝓋 —→ N[ V ] ∣ μ


ref⟦ ℓ ⟧ T V ∣ μ ∣ pc —→ addr n ℓ ∣ μ(ℓ ↦ μ(ℓ)(n ↦ V))   , n is fresh

                    ℓ′ ⟨ ℓ′ ! ⟩ ⟨ ⋆ ⇒ᵖ ℓ ⟩ —↠ 𝓋′
-------------------------------------------------------------------------------
ref?⟦ ℓ ⟧ T V p ∣ μ ∣ ℓ′ ⟨ ℓ′ ! ⟩ —→ addr n ℓ ∣ μ(ℓ ↦ μ(ℓ)(n ↦ V)) , n is fresh

Note: implies that ℓ′ ≼ ℓ

                    ℓ′ ⟨ ℓ′ ! ⟩ ⟨ ⋆ ⇒ᵖ ℓ ⟩ —↠ err p
---------------------------------------------------------------------------------
ref?⟦ ℓ ⟧ T V p ∣ μ ∣ ℓ′ ⟨ ℓ′ ! ⟩ —→ blame p ∣ μ   , n is fresh


                   μ(ℓ̂)(n) = V
-----------------------------------------------------------
! (addr n ℓ̂) (T of ℓ̂) ℓ ∣ μ ∣ 𝓋 —→ ⦃ 𝓋 ⦄ V ⟪ ℓ ⟫ ∣ μ

                          ℓ = ∥ cₗ ∥
                          μ(ℓ̂)(n) = V
-----------------------------------------------------------------------------
! (addr n ℓ̂ ⟨ dₗ | in: c; out: d | cₗ ⟩) A g ∣ μ ∣ 𝓋 —→ ⦃ 𝓋 ⦄ (V ⟨ d ⟩) ⟪ ℓ ⟫


assign (addr n ℓ̂) V T ℓ̂ ℓ ∣ μ ∣ pc —→ unit ∣ μ(ℓ̂ ↦ μ(ℓ̂)(n ↦ V))

assign (addr n ℓ̂ ⟨ dₗ | in: c; out: d | cₗ ⟩) V T ℓ̂ ℓ ∣ μ ∣ pc
   —→ unit ∣ μ(ℓ̂ ↦ μ(ℓ̂)(n ↦ V⟨c⟩))

Note: in this case dₗ must be id(ℓ̂). from typing we know pc ⋎ ℓ ≼ ℓ̂, which
implies that the assignment is safe

                         ℓ = ∥ cₗ ∥
          (stamp 𝓋 ℓ) ⟨ ty(𝓋) ⋎̃ ℓ ⇒ ⋆ ⟩ ⟨ dₗ ⟩ —→ 𝓋′
-----------------------------------------------------------------------
assign? (addr n ℓ̂ ⟨ dₗ | in: c; out: d | cₗ ⟩) V T p ∣ μ | 𝓋 —→
        unit | μ(ℓ̂ ↦ μ(ℓ̂)(n ↦ V⟨c⟩))

⊢ dₗ : ⋆ ⇒ ℓ̂

                         ℓ = ∥ cₗ ∥
          stamp 𝓋 ℓ ⟨ ty(𝓋) ⋎̃ ℓ ⇒ ⋆ ⟩ ⟨ dₗ ⟩ —→ err p
----------------------------------------------------------------------------
assign? (addr n ℓ̂ ⟨ dₗ | in: c; out: d | cₗ ⟩) V T p ∣ μ | 𝓋 —→ blame p

Note: `dₗ` is projecting, where the blame label `p` comes from


V ⟨ c ⟩ ⟨ d ⟩ ∣ μ ∣ 𝓋 —→ V ⟨ c ⨟ d ⟩ ∣ μ


V ⟨ cᵣ | ⊥ᵖ ⟩ ∣ μ ∣ 𝓋 —→ blame p ∣ μ


             M ∣ μ ∣ 𝓋′ —→ N ∣ μ′
---------------------------------------------------
⦃ 𝓋′ ⦄ M ⟪ ℓ ⟫ ∣ μ ∣ 𝓋 —→ ⦃ 𝓋′ ⦄ N ⟪ ℓ ⟫ ∣ μ′

⦃ 𝓋′ ⦄ blame p ⟪ ℓ ⟫ ∣ μ ∣ 𝓋 —→ blame p ∣ μ

⦃ 𝓋′ ⦄ V ⟪ ℓ ⟫ ∣ μ ∣ 𝓋 —→ stamp V ℓ ∣ μ
