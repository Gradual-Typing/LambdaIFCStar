V ::= k | ƛ N | addr n ℓ̂
    | k ⟨ id(ι) | cₗℓι ⟩
    | ƛ N ⟨ cₗᵖᶜ | c → d | cₗℓ ⟩
    | addr n ℓ̂ ⟨ cₗ̂ | in: c; out: d | cₗℓ ⟩

F ::= app □ M ℓᶜ A B ℓ | app V □ ℓᶜ A B ℓ
    | app! □ M A B g | app! V □ A B g
    | if □ A ℓ M N | if! □ A g M N
    | let □ N | ref✓⟦ ℓ ⟧ □ | ! □
    | assign? □ M T p | assign✓ □ M T ℓ̂ ℓ | assign✓ V □ M T ℓ̂ ℓ
    | □ ⟨ c ⟩

       M ∣ μ ∣ 𝓋 —→ N ∣ μ′
---------------------------------------
plug M F ∣ μ ∣ 𝓋 —→ plug N F ∣ μ′


plug (blame p) F ∣ μ ∣ 𝓋 —→ blame p ∣ μ


app (ƛ N) V ℓᶜ A B ℓ ∣ μ ∣ pc —→ ⦃ ℓᶜ ⦄ (N[ V ]) ⟪ ℓ ⟫ ∣ μ


           pc ⋎ ℓ ⟨ pc ⋎ ℓ ⇒ ℓᶜ ⟩ ⟨ dₗ ⟩ —↠ 𝓋
-----------------------------------------------------------
app ((ƛ N) ⟨ dₗ | c → d | cₗ ⟩) V ℓᶜ A B ℓ ∣ μ ∣ pc —→
    let (V ⟨ c ⟩) in (⦃ 𝓋 ⦄ (N ⟨ d ⟩) ⟪ ℓ ⟫) ∣ μ


         stamp 𝓋 ℓ ⟨ ty(𝓋) ⋎̃ ℓ ⇒ ⋆ ⟩ —↠ 𝓋′
------------------------------------------------------------
app! (ƛ N) V A B ℓ ∣ μ ∣ 𝓋 —→ ⦃ 𝓋′ ⦄ (N[ V ]) ⟪ ℓ ⟫ ∣ μ


                      ℓ = ∥ cₗ ∥
       stamp 𝓋 ℓ ⟨ ty(𝓋) ⋎̃ ℓ ⇒ ⋆ ⟩ ⟨ dₗ ⟩ —↠ 𝓋′
-----------------------------------------------------------
app! ((ƛ N) ⟨ dₗ | c → d | cₗ ⟩) V A B g ∣ μ ∣ 𝓋 —→
    let (V ⟨ c ⟩) in (⦃ 𝓋′ ⦄ (N ⟨ d ⟩) ⟪ ℓ ⟫) ∣ μ

                      ℓ = ∥ cₗ ∥
       stamp 𝓋 ℓ ⟨ ty(𝓋) ⋎̃ ℓ ⇒ ⋆ ⟩ ⟨ dₗ ⟩ —↠ err p
-----------------------------------------------------------------
app! ((ƛ N) ⟨ dₗ | c → d | cₗ ⟩) V A B g ∣ μ ∣ 𝓋 —→ blame p

Note: `dₗ` may contain a projection


if true A ℓ M N ∣ μ ∣ pc —→ ⦃ pc ⋎ ℓ ⦄ M ⟪ ℓ ⟫ ∣ μ

if (true ⟨ id(𝔹) | ↑ ⟩) A high M N ∣ μ ∣ pc —→ ⦃ high ⦄ M ⟪ high ⟫ ∣ μ


if! true A ℓ M N ∣ μ ∣ 𝓋 —→ ⦃ stamp 𝓋 ℓ ⦄ M ⟪ ℓ ⟫ ∣ μ

Note: from typing, 𝓋 must be `ℓᶜ ⟨ ℓᶜ ! ⟩` for some ℓᶜ


                 ℓ = ∥ cₗ ∥
      stamp 𝓋 ℓ ⟨ ty(𝓋) ⋎̃ ℓ ⇒ ⋆ ⟩ —↠ 𝓋′
--------------------------------------------------------------------
if! (true ⟨ id(𝔹) | cₗ ⟩) A g M N ∣ μ ∣ 𝓋 —→ ⦃ 𝓋′ ⦄ M ⟪ ℓ ⟫ ∣ μ


let V A N ∣ μ ∣ 𝓋 —→ N[ V ] ∣ μ


ref⟦ ℓ ⟧ T M ∣ μ ∣ 𝓋 —→ ref✓⟦ ℓ ⟧ T M ∣ μ


  ℓ′ ⟨ ℓ′ ! ⟩ ⟨ ⋆ ⇒ᵖ ℓ ⟩ —↠ 𝓋′
---------------------------------------------------------
ref?⟦ ℓ ⟧ T M p ∣ μ ∣ ℓ′ ⟨ ℓ′ ! ⟩ —→ ref✓⟦ ℓ ⟧ T M ∣ μ


  ℓ′ ⟨ ℓ′ ! ⟩ ⟨ ⋆ ⇒ᵖ ℓ ⟩ —↠ err p
-----------------------------------------------------
ref?⟦ ℓ ⟧ T M p ∣ μ ∣ ℓ′ ⟨ ℓ′ ! ⟩ —→ blame p ∣ μ


ref✓⟦ ℓ ⟧ T V ∣ μ ∣ 𝓋 —→ addr n ℓ ∣ (n ℓ ↦ V) ∷ μ   , n is fresh

* Alternative rules for reference creation:

ref⟦ ℓ ⟧ T V ∣ μ ∣ pc —→ addr n ℓ ∣ (n ℓ ↦ V) ∷ μ   , n is fresh

                    ℓ′ ⟨ ℓ′ ! ⟩ ⟨ ⋆ ⇒ᵖ ℓ ⟩ —↠ 𝓋′
---------------------------------------------------------------------------------
ref?⟦ ℓ ⟧ T V p ∣ μ ∣ ℓ′ ⟨ ℓ′ ! ⟩ —→ addr n ℓ ∣ (n ℓ ↦ V) ∷ μ   , n is fresh

Note: implies that ℓ′ ≼ ℓ

                    ℓ′ ⟨ ℓ′ ! ⟩ ⟨ ⋆ ⇒ᵖ ℓ ⟩ —↠ err p
---------------------------------------------------------------------------------
ref?⟦ ℓ ⟧ T V p ∣ μ ∣ ℓ′ ⟨ ℓ′ ! ⟩ —→ blame p ∣ μ   , n is fresh


                   μ(n ℓ̂) = V
---------------------------------------------------
! (addr n ℓ̂) (T of ℓ̂) ℓ ∣ μ ∣ 𝓋 —→ V ⟪ ℓ ⟫ ∣ μ


                   μ(n ℓ̂) = V
----------------------------------------------------------------------------------------
! (addr n ℓ̂ ⟨ dₗ | in: c; out: d | cₗ ⟩) A g ∣ μ ∣ 𝓋 —→ V ⟨ d ⟩ ⟪ ∥ cₗ ∥ ⟫


assign L M T ℓ̂ ℓ ∣ μ ∣ 𝓋 —→ assign✓ L M T ℓ̂ ℓ ∣ μ


                                ℓ = ∥ cₗ ∥
                  stamp 𝓋 ℓ ⟨ ty(𝓋) ⋎̃ ℓ ⇒ ⋆ ⟩ ⟨ dₗ ⟩ —↠ 𝓋′
--------------------------------------------------------------------------------
assign? (addr n ℓ̂ ⟨ dₗ | in: c; out: d | cₗ ⟩) M T p ∣ μ ∣ 𝓋 —→ assign✓ ...

                                ℓ = ∥ cₗ ∥
                  stamp 𝓋 ℓ ⟨ ty(𝓋) ⋎̃ ℓ ⇒ ⋆ ⟩ ⟨ dₗ ⟩ —↠ err p
------------------------------------------------------------------------------
assign? (addr n ℓ̂ ⟨ dₗ | in: c; out: d | cₗ ⟩) M T p ∣ μ ∣ 𝓋 —→ blame p


assign✓ (addr n ℓ̂) V T ℓ̂ ℓ ∣ μ ∣ 𝓋 —→ unit ∣ μ(n ℓ̂) = V


assign✓ (addr n ℓ̂ ⟨ dₗ | in: c; out: d | cₗ ⟩) V T ℓ̂ ℓ ∣ μ ∣ 𝓋 —→
        unit ∣ μ(n ℓ̂) = (V ⟨ c ⟩)

* Alternative rules for assignment:

assign (addr n ℓ̂) V T ℓ̂ ℓ ∣ μ ∣ pc —→ unit ∣ μ(n ℓ̂) = V

assign (addr n ℓ̂ ⟨ dₗ | in: c; out: d | cₗ ⟩) V T ℓ̂ ℓ ∣ μ ∣ pc —→ unit ∣ μ(n ℓ̂) = V

Note: in this case dₗ must be id(ℓ̂). from typing we know pc ⋎ ℓ ≼ ℓ̂, which
implies that the assignment is safe

                         ℓ = ∥ cₗ ∥
          stamp 𝓋 ℓ ⟨ ty(𝓋) ⋎̃ ℓ ⇒ ⋆ ⟩ ⟨ dₗ ⟩ —→ 𝓋′
-----------------------------------------------------------------------
assign? (addr n ℓ̂ ⟨ dₗ | in: c; out: d | cₗ ⟩) V T p ∣ μ | 𝓋 —→
        unit | μ(n ℓ̂) = V

⊢ dₗ : ⋆ ⇒ ℓ̂

                         ℓ = ∥ cₗ ∥
          stamp 𝓋 ℓ ⟨ ty(𝓋) ⋎̃ ℓ ⇒ ⋆ ⟩ ⟨ dₗ ⟩ —→ err p
----------------------------------------------------------------------------
assign? (addr n ℓ̂ ⟨ dₗ | in: c; out: d | cₗ ⟩) V T p ∣ μ | 𝓋 —→ blame p

Note: `dₗ` is projecting, where the blame label `p` comes from


V ⟨ c ⟩ ⟨ d ⟩ ∣ μ ∣ 𝓋 —→ V ⟨ c ⨟ d ⟩ ∣ μ


V ⟨ cᵣ | ⊥ᵖ ⟩ ∣ μ ∣ 𝓋 —→ blame p ∣ μ


       M ∣ μ ∣ 𝓋′ —→ N ∣ μ′
------------------------------------------
⦃ 𝓋′ ⦄ M ∣ μ ∣ 𝓋 —→ ⦃ 𝓋′ ⦄ N ∣ μ′

⦃ 𝓋′ ⦄ blame p ∣ μ ∣ 𝓋 —→ blame p ∣ μ


V ⟪ ℓ ⟫ ∣ μ ∣ 𝓋 —→ stamp V ℓ ∣ μ

(blame p) ⟪ ℓ ⟫ ∣ μ ∣ 𝓋 —→ blame p ∣ μ
