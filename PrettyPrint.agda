module PrettyPrint where

open import Data.Bool renaming (Bool to ùîπ)
open import Data.Unit using (‚ä§; tt)
open import Agda.Builtin.String
open import Text.Printf

{- Pretty printing types -}
open import Types
open import BlameLabels

pprint-label : Label ‚Üí String
pprint-label ‚ãÜ = printf "\ESC[35m%s\ESC[0m" "‚ãÜ"
pprint-label (l low) = printf "\ESC[32m%s\ESC[0m" "L"
pprint-label (l high) = printf "\ESC[31m%s\ESC[0m" "H"

pprint-blame-label : BlameLabel ‚Üí String
pprint-blame-label (pos x) = printf "\ESC[90m@%u\ESC[0m" x
pprint-blame-label (neg x) = printf "\ESC[90m@%u\ESC[0m" x

pprint-raw-type : RawType ‚Üí String
pprint-type : Type ‚Üí String

pprint-raw-type (` Bool) = "ùîπ"
pprint-raw-type (` Unit) = "‚ä§"
pprint-raw-type (Ref A) = printf "Ref (%s)" (pprint-type A)
pprint-raw-type (‚ü¶ gc ‚üß A ‚áí B) = printf "‚ü¶%s‚üß (%s) ‚áí (%s)" (pprint-label gc) (pprint-type A) (pprint-type B)

pprint-type (T of g) = printf "%s of %s" (pprint-raw-type T) (pprint-label g)

{- Pretty printing the surface language -}
open import SurfaceLang

pprint-const : ‚àÄ {Œπ} (k : rep Œπ) ‚Üí String
pprint-const {Bool} true  = "true"
pprint-const {Bool} false = "false"
pprint-const {Unit} tt    = "()"

pprint-term : Term ‚Üí String
pprint-term (` x)      = printf "\ESC[4m%u\ESC[0m" x
pprint-term ($ k of ‚Ñì) = printf "%s of %s" (pprint-const k) (pprint-label (l ‚Ñì))
pprint-term (∆õ‚ü¶ pc ‚üß A Àô N of ‚Ñì) =
  printf "Œª‚ü¶%s‚üß %s. %s of %s" (pprint-label (l pc)) (pprint-type A) (pprint-term N) (pprint-label (l ‚Ñì))
pprint-term (L ¬∑ M at p) =
  printf "(%s) (%s) %s" (pprint-term L) (pprint-term M) (pprint-blame-label p)
pprint-term (if L then M else N at p) =
  printf "\ESC[1mif\ESC[0m (%s) \ESC[1mthen\ESC[0m (%s) \ESC[1melse\ESC[0m (%s) %s"
    (pprint-term L) (pprint-term M) (pprint-term N) (pprint-blame-label p)
pprint-term (M ‚à∂ A at p) =
  printf "(%s) \ESC[1m:\ESC[0m %s %s" (pprint-term M) (pprint-type A) (pprint-blame-label p)
pprint-term (`let M `in N) =
  printf "\ESC[1mlet\ESC[0m %s \ESC[1min\ESC[0m\n%s" (pprint-term M) (pprint-term N)
pprint-term (ref‚ü¶ ‚Ñì ‚üß M at p) =
  printf "\ESC[1mref\ESC[0m %s (%s) %s" (pprint-label (l ‚Ñì)) (pprint-term M) (pprint-blame-label p)
pprint-term (! M) = printf "\ESC[1m!\ESC[0m (%s)" (pprint-term M)
pprint-term (L := M at p) =
  printf "(%s) \ESC[1m:=\ESC[0m (%s) %s" (pprint-term L) (pprint-term M) (pprint-blame-label p)

{- Pretty printing the cast calculus -}
open import CC renaming (Term to CCTerm)
open import Heap
open import TypeBasedCast

pprint-addr : Addr ‚Üí String
pprint-addr (a‚ü¶ ‚ÑìÃÇ ‚üß n) = printf "\ESC[7m‚ü¶%s‚üß %u\ESC[0m" (pprint-label (l ‚ÑìÃÇ)) n

pprint-cast : ‚àÄ {A B} ‚Üí Cast A ‚áí B ‚Üí String
pprint-cast (cast A B p A~B) = printf "%s ‚áí %s %s" (pprint-type A) (pprint-type B) (pprint-blame-label p)

pprint-error : CC.Error ‚Üí String
pprint-error (blame p) = printf "\ESC[93mblame\ESC[0m %s" (pprint-blame-label p)
pprint-error nsu-error = "\ESC[93mnsu-error\ESC[0m"

pprint-cc : CCTerm ‚Üí String
pprint-cc (` x) = printf "\ESC[4m%u\ESC[0m" x
pprint-cc (addr a of ‚Ñì) = printf "%s of %s" (pprint-addr a) (pprint-label (l ‚Ñì))
pprint-cc ($ k of ‚Ñì) = printf "%s of %s" (pprint-const k) (pprint-label (l ‚Ñì))
pprint-cc (∆õ‚ü¶ pc ‚üß A Àô N of ‚Ñì) =
  printf "Œª‚ü¶%s‚üß %s. %s of %s" (pprint-label (l pc)) (pprint-type A) (pprint-cc N) (pprint-label (l ‚Ñì))
pprint-cc (L ¬∑ M) =
  printf "(%s) (%s)" (pprint-cc L) (pprint-cc M)
pprint-cc (if L A M N) =
  printf "\ESC[1mif\ESC[0m (%s) \ESC[1mthen\ESC[0m (%s) \ESC[1melse\ESC[0m (%s)"
    (pprint-cc L) (pprint-cc M) (pprint-cc N)
pprint-cc (`let M N) =
  printf "\ESC[1mlet\ESC[0m %s \ESC[1min\ESC[0m\n%s" (pprint-cc M) (pprint-cc N)
pprint-cc (ref‚ü¶ ‚Ñì ‚üß M) =
  printf "\ESC[1mref\ESC[0m %s (%s)" (pprint-label (l ‚Ñì)) (pprint-cc M)
pprint-cc (ref?‚ü¶ ‚Ñì ‚üß M) =
  printf "\ESC[1mref?\ESC[0m %s (%s)" (pprint-label (l ‚Ñì)) (pprint-cc M)
pprint-cc (ref‚úì‚ü¶ ‚Ñì ‚üß M) =
  printf "\ESC[1mref‚úì\ESC[0m %s (%s)" (pprint-label (l ‚Ñì)) (pprint-cc M)
pprint-cc (! M) =
 printf "\ESC[1m!\ESC[0m (%s)" (pprint-cc M)
pprint-cc (L := M) =
  printf "(%s) \ESC[1m:=\ESC[0m (%s)" (pprint-cc L) (pprint-cc M)
pprint-cc (L :=? M) =
  printf "(%s) \ESC[1m:=?\ESC[0m (%s)" (pprint-cc L) (pprint-cc M)
pprint-cc (L :=‚úì M) =
  printf "(%s) \ESC[1m:=‚úì\ESC[0m (%s)" (pprint-cc L) (pprint-cc M)
pprint-cc (prot ‚Ñì M) =
  printf "\ESC[1mprot\ESC[0m %s (%s)" (pprint-label (l ‚Ñì)) (pprint-cc M)
pprint-cc (M ‚ü® c ‚ü©) =
  printf "(%s) \ESC[1m‚ü®\ESC[0m %s \ESC[1m‚ü©\ESC[0m" (pprint-cc M) (pprint-cast c)
pprint-cc (cast-pc g M) =
  printf "\ESC[1mcast-pc\ESC[0m %s (%s)" (pprint-label g) (pprint-cc M)
pprint-cc (error e) =
  printf "\ESC[1merror\ESC[0m %s" (pprint-error e)
pprint-cc ‚óè = "‚óè"


{- Pretty printing single and multi step reductions -}
open import Reduction

print-red-rule : ‚àÄ {M M‚Ä≤ Œº Œº‚Ä≤ pc} ‚Üí M ‚à£ Œº ‚à£ pc ‚Äî‚Üí M‚Ä≤ ‚à£ Œº‚Ä≤ ‚Üí String
print-red-rule (Œæ M‚ÜíM‚Ä≤)           = printf "Œæ(%s)" (print-red-rule M‚ÜíM‚Ä≤)
print-red-rule Œæ-err               = "Œæ-err"
print-red-rule (prot-val _)        = "prot-val"
print-red-rule (prot-ctx M‚ÜíM‚Ä≤)    = printf "prot-ctx(%s)" (print-red-rule M‚ÜíM‚Ä≤)
print-red-rule prot-err            = "prot-err"
print-red-rule (Œ≤ _)               = "Œ≤"
print-red-rule Œ≤-if-true           = "Œ≤-if-true"
print-red-rule Œ≤-if-false          = "Œ≤-if-false"
print-red-rule (Œ≤-let _)           = "Œ≤-let"
print-red-rule ref-static          = "ref-static"
print-red-rule (ref?-ok _)         = "ref?-ok"
print-red-rule (ref?-fail _)       = "ref?-fail"
print-red-rule (ref _ _)           = "ref"
print-red-rule (deref _)           = "deref"
print-red-rule assign-static       = "assign-static"
print-red-rule (assign?-ok _)      = "assign?-ok"
print-red-rule (assign?-fail _)    = "assign?-fail"
print-red-rule (assign _)          = "assign"
print-red-rule (cast _ _ _)        = "cast"
print-red-rule (if-cast-true _)    = "if-cast-true"
print-red-rule (if-cast-false _)   = "if-cast-false"
print-red-rule (fun-cast _ _ _)    = "fun-cast"
print-red-rule (deref-cast _ _)    = "deref-cast"
print-red-rule (assign?-cast _ _)  = "assign?-cast"
print-red-rule (assign-cast _ _ _) = "assign-cast"
print-red-rule (Œ≤-cast-pc _)       = "Œ≤-cast-pc"

pprint-reduction : ‚àÄ {M M‚Ä≤ Œº Œº‚Ä≤ pc} ‚Üí M ‚à£ Œº ‚à£ pc ‚Äî‚Üí M‚Ä≤ ‚à£ Œº‚Ä≤ ‚Üí String
pprint-reduction {M} {M‚Ä≤} M‚ÜíM‚Ä≤ =
  printf "(%s ‚Äî‚Üí‚ü® %s ‚ü© %s)" (pprint-cc M) (print-red-rule M‚ÜíM‚Ä≤) (pprint-cc M‚Ä≤)

pprint-mult-reduction : ‚àÄ {M M‚Ä≤ Œº Œº‚Ä≤ pc} ‚Üí M ‚à£ Œº ‚à£ pc ‚Äî‚Ü† M‚Ä≤ ‚à£ Œº‚Ä≤ ‚Üí String
pprint-mult-reduction (M ‚à£ Œº ‚à£ pc ‚àé) = printf "%s\n  ‚àé" (pprint-cc M)
pprint-mult-reduction {L} {N} (L ‚à£ Œº ‚à£ pc ‚Äî‚Üí‚ü® L‚ÜíM ‚ü© M‚Ü†N) =
  printf "%s\n  ‚Üì ‚ü® %s ‚ü©\n%s"
    (pprint-cc L) (print-red-rule L‚ÜíM) (pprint-mult-reduction M‚Ü†N)
