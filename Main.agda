{-# OPTIONS --guardedness #-}

open import Data.List using ([])
open import Data.Product using (‚àÉ; ‚àÉ-syntax) renaming (_,_ to ‚ü®_,_‚ü©)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)
open import IO

open import Utils
open import Types
open import PrettyPrint
open import HeapTyping
open import Interp

open import Examples

main =
  run {Agda.Primitive.lzero}
    (do
      (putStrLn (pprint-type A‚ÇÅ))
      (putStrLn "")
      (putStrLn (pprint-type A‚ÇÇ))
      (putStrLn "")
      (putStrLn (pprint-term M*))
      (putStrLn "")
      (putStrLn (pprint-cc M*‚áí))
      (putStrLn "")
      (putStrLn (pprint-mult-reduction Rd))
      (putStrLn "")
      (putStrLn (let ‚ü® _ , R ‚ü© = RdN‚ÇÅ in pprint-mult-reduction R))
      (putStrLn "")
      (putStrLn (let ‚ü® _ , R ‚ü© = RdN‚ÇÇ in pprint-mult-reduction R))
      (putStrLn "")
      (putStrLn (let ‚ü® _ , _ , R ‚ü© = interp low ùíûN‚ÇÇ ‚ä¢ùíûN‚ÇÇ ‚àÖ ‚ä¢Œº-nil (‚âæ-l l‚âºl) 42 in pprint-mult-reduction R))
      )
