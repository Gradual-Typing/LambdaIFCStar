module ApplyCastRelation where

open import Data.Bool renaming (Bool to ùîπ)
open import Data.Product renaming (_,_ to ‚ü®_,_‚ü©)
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary.PropositionalEquality using (_‚â°_; _‚â¢_; refl)
open import Function using (case_of_)

open import Utils
open import Types
open import TypeBasedCast
open import CCSyntax Cast_‚áí_
open import CCTyping Cast_‚áí_
open import Values

infix 4 ApplyCast_,_‚Üù_

data ApplyCast_,_‚Üù_ : ‚àÄ {A B} (V : Term) ‚Üí (c : Cast A ‚áí B) ‚Üí Term ‚Üí Set where

  cast-base-id : ‚àÄ {V Œπ g} {c : Cast ` Œπ of g ‚áí ` Œπ of g}
    ‚Üí ApplyCast V , c ‚Üù V

  cast-base-proj : ‚àÄ {V Œπ ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ p q c~ d~}
    ‚Üí ‚Ñì‚ÇÅ ‚âº ‚Ñì‚ÇÇ
    ‚Üí let c‚ÇÅ = cast (` Œπ of l ‚Ñì‚ÇÅ) (` Œπ of ‚ãÜ) p c~ in
       let c‚ÇÇ = cast (` Œπ of ‚ãÜ) (` Œπ of l ‚Ñì‚ÇÇ) q d~ in
         ApplyCast V ‚ü® c‚ÇÅ ‚ü© , c‚ÇÇ ‚Üù V

  cast-base-proj-blame : ‚àÄ {V Œπ ‚Ñì‚ÇÅ ‚Ñì‚ÇÇ p q c~ d~}
    ‚Üí ¬¨ ‚Ñì‚ÇÅ ‚âº ‚Ñì‚ÇÇ
    ‚Üí let c‚ÇÅ = cast (` Œπ of l ‚Ñì‚ÇÅ) (` Œπ of ‚ãÜ) p c~ in
       let c‚ÇÇ = cast (` Œπ of ‚ãÜ) (` Œπ of l ‚Ñì‚ÇÇ) q d~ in
         ApplyCast V ‚ü® c‚ÇÅ ‚ü© , c‚ÇÇ ‚Üù error (blame q)

  cast-fun-id‚ãÜ : ‚àÄ {V A‚ÇÅ A‚ÇÇ A‚ÇÉ A‚ÇÑ B‚ÇÅ B‚ÇÇ B‚ÇÉ B‚ÇÑ gc‚ÇÅ gc‚ÇÇ gc‚ÇÉ gc‚ÇÑ ‚Ñì p q c~ d~ c~‚Ä≤ d~‚Ä≤}
    ‚Üí let c‚ÇÅ  = cast ([ gc‚ÇÅ ] A‚ÇÅ ‚áí B‚ÇÅ of l ‚Ñì) ([ gc‚ÇÇ ] A‚ÇÇ ‚áí B‚ÇÇ of ‚ãÜ   ) p c~  in
       let c‚ÇÇ  = cast ([ gc‚ÇÉ ] A‚ÇÉ ‚áí B‚ÇÉ of ‚ãÜ   ) ([ gc‚ÇÑ ] A‚ÇÑ ‚áí B‚ÇÑ of ‚ãÜ   ) q d~  in
       let c‚ÇÅ‚Ä≤ = cast ([ gc‚ÇÅ ] A‚ÇÅ ‚áí B‚ÇÅ of l ‚Ñì) ([ gc‚ÇÇ ] A‚ÇÇ ‚áí B‚ÇÇ of l ‚Ñì) p c~‚Ä≤ in
       let c‚ÇÇ‚Ä≤ = cast ([ gc‚ÇÉ ] A‚ÇÉ ‚áí B‚ÇÉ of l ‚Ñì) ([ gc‚ÇÑ ] A‚ÇÑ ‚áí B‚ÇÑ of ‚ãÜ   ) q d~‚Ä≤ in
         ApplyCast V ‚ü® c‚ÇÅ ‚ü© , c‚ÇÇ ‚Üù V ‚ü® c‚ÇÅ‚Ä≤ ‚ü© ‚ü® c‚ÇÇ‚Ä≤ ‚ü©

  cast-fun-proj : ‚àÄ {V A‚ÇÅ A‚ÇÇ A‚ÇÉ A‚ÇÑ B‚ÇÅ B‚ÇÇ B‚ÇÉ B‚ÇÑ gc‚ÇÅ gc‚ÇÇ gc‚ÇÉ gc‚ÇÑ ‚Ñì‚ÇÅ ‚Ñì‚ÇÑ p q c~ d~ c~‚Ä≤ d~‚Ä≤}
    ‚Üí ‚Ñì‚ÇÅ ‚âº ‚Ñì‚ÇÑ
    ‚Üí let c‚ÇÅ  = cast ([ gc‚ÇÅ ] A‚ÇÅ ‚áí B‚ÇÅ of l ‚Ñì‚ÇÅ) ([ gc‚ÇÇ ] A‚ÇÇ ‚áí B‚ÇÇ of ‚ãÜ   ) p c~  in
       let c‚ÇÇ  = cast ([ gc‚ÇÉ ] A‚ÇÉ ‚áí B‚ÇÉ of ‚ãÜ   ) ([ gc‚ÇÑ ] A‚ÇÑ ‚áí B‚ÇÑ of l ‚Ñì‚ÇÑ) q d~  in
       let c‚ÇÅ‚Ä≤ = cast ([ gc‚ÇÅ ] A‚ÇÅ ‚áí B‚ÇÅ of l ‚Ñì‚ÇÑ) ([ gc‚ÇÇ ] A‚ÇÇ ‚áí B‚ÇÇ of l ‚Ñì‚ÇÑ) p c~‚Ä≤ in
       let c‚ÇÇ‚Ä≤ = cast ([ gc‚ÇÉ ] A‚ÇÉ ‚áí B‚ÇÉ of l ‚Ñì‚ÇÑ) ([ gc‚ÇÑ ] A‚ÇÑ ‚áí B‚ÇÑ of l ‚Ñì‚ÇÑ) q d~‚Ä≤ in
         ApplyCast V ‚ü® c‚ÇÅ ‚ü© , c‚ÇÇ ‚Üù V ‚ü® c‚ÇÅ‚Ä≤ ‚ü© ‚ü® c‚ÇÇ‚Ä≤ ‚ü©

  cast-fun-proj-blame : ‚àÄ {V A‚ÇÅ A‚ÇÇ A‚ÇÉ A‚ÇÑ B‚ÇÅ B‚ÇÇ B‚ÇÉ B‚ÇÑ gc‚ÇÅ gc‚ÇÇ gc‚ÇÉ gc‚ÇÑ ‚Ñì‚ÇÅ ‚Ñì‚ÇÑ p q c~ d~}
    ‚Üí ¬¨ ‚Ñì‚ÇÅ ‚âº ‚Ñì‚ÇÑ
    ‚Üí let c‚ÇÅ  = cast ([ gc‚ÇÅ ] A‚ÇÅ ‚áí B‚ÇÅ of l ‚Ñì‚ÇÅ) ([ gc‚ÇÇ ] A‚ÇÇ ‚áí B‚ÇÇ of ‚ãÜ   ) p c~  in
       let c‚ÇÇ  = cast ([ gc‚ÇÉ ] A‚ÇÉ ‚áí B‚ÇÉ of ‚ãÜ   ) ([ gc‚ÇÑ ] A‚ÇÑ ‚áí B‚ÇÑ of l ‚Ñì‚ÇÑ) q d~  in
         ApplyCast V ‚ü® c‚ÇÅ ‚ü© , c‚ÇÇ ‚Üù error (blame q)

  cast-fun-pc-id‚ãÜ : ‚àÄ {V A‚ÇÅ A‚ÇÇ A‚ÇÉ A‚ÇÑ B‚ÇÅ B‚ÇÇ B‚ÇÉ B‚ÇÑ g‚ÇÅ g‚ÇÇ ‚Ñì‚ÇÉ g‚ÇÑ pc p q c~ d~ c~‚Ä≤ d~‚Ä≤}
    ‚Üí let c‚ÇÅ  = cast ([ l pc ] A‚ÇÅ ‚áí B‚ÇÅ of g‚ÇÅ  ) ([ ‚ãÜ    ] A‚ÇÇ ‚áí B‚ÇÇ of g‚ÇÇ) p c~  in
       let c‚ÇÇ  = cast ([ ‚ãÜ    ] A‚ÇÉ ‚áí B‚ÇÉ of l ‚Ñì‚ÇÉ) ([ ‚ãÜ    ] A‚ÇÑ ‚áí B‚ÇÑ of g‚ÇÑ) q d~  in
       let c‚ÇÅ‚Ä≤ = cast ([ l pc ] A‚ÇÅ ‚áí B‚ÇÅ of g‚ÇÅ  ) ([ l pc ] A‚ÇÇ ‚áí B‚ÇÇ of g‚ÇÇ) p c~‚Ä≤ in
       let c‚ÇÇ‚Ä≤ = cast ([ l pc ] A‚ÇÉ ‚áí B‚ÇÉ of l ‚Ñì‚ÇÉ) ([ ‚ãÜ    ] A‚ÇÑ ‚áí B‚ÇÑ of g‚ÇÑ) q d~‚Ä≤ in
         ApplyCast V ‚ü® c‚ÇÅ ‚ü© , c‚ÇÇ ‚Üù V ‚ü® c‚ÇÅ‚Ä≤ ‚ü© ‚ü® c‚ÇÇ‚Ä≤ ‚ü©

  cast-fun-pc-proj : ‚àÄ {V A‚ÇÅ A‚ÇÇ A‚ÇÉ A‚ÇÑ B‚ÇÅ B‚ÇÇ B‚ÇÉ B‚ÇÑ g‚ÇÅ g‚ÇÇ ‚Ñì‚ÇÉ g‚ÇÑ pc‚ÇÅ pc‚ÇÑ p q c~ d~ c~‚Ä≤ d~‚Ä≤}
    ‚Üí pc‚ÇÑ ‚âº pc‚ÇÅ
    ‚Üí let c‚ÇÅ  = cast ([ l pc‚ÇÅ ] A‚ÇÅ ‚áí B‚ÇÅ of g‚ÇÅ  ) ([ ‚ãÜ     ] A‚ÇÇ ‚áí B‚ÇÇ of g‚ÇÇ) p c~  in
       let c‚ÇÇ  = cast ([ ‚ãÜ     ] A‚ÇÉ ‚áí B‚ÇÉ of l ‚Ñì‚ÇÉ) ([ l pc‚ÇÑ ] A‚ÇÑ ‚áí B‚ÇÑ of g‚ÇÑ) q d~  in
       let c‚ÇÅ‚Ä≤ = cast ([ l pc‚ÇÑ ] A‚ÇÅ ‚áí B‚ÇÅ of g‚ÇÅ  ) ([ l pc‚ÇÑ ] A‚ÇÇ ‚áí B‚ÇÇ of g‚ÇÇ) p c~‚Ä≤ in
       let c‚ÇÇ‚Ä≤ = cast ([ l pc‚ÇÑ ] A‚ÇÉ ‚áí B‚ÇÉ of l ‚Ñì‚ÇÉ) ([ l pc‚ÇÑ ] A‚ÇÑ ‚áí B‚ÇÑ of g‚ÇÑ) q d~‚Ä≤ in
         ApplyCast V ‚ü® c‚ÇÅ ‚ü© , c‚ÇÇ ‚Üù V ‚ü® c‚ÇÅ‚Ä≤ ‚ü© ‚ü® c‚ÇÇ‚Ä≤ ‚ü©

  cast-fun-pc-proj-blame : ‚àÄ {V A‚ÇÅ A‚ÇÇ A‚ÇÉ A‚ÇÑ B‚ÇÅ B‚ÇÇ B‚ÇÉ B‚ÇÑ g‚ÇÅ g‚ÇÇ ‚Ñì‚ÇÉ g‚ÇÑ pc‚ÇÅ pc‚ÇÑ p q c~ d~}
    ‚Üí ¬¨ pc‚ÇÑ ‚âº pc‚ÇÅ
    ‚Üí let c‚ÇÅ  = cast ([ l pc‚ÇÅ ] A‚ÇÅ ‚áí B‚ÇÅ of g‚ÇÅ  ) ([ ‚ãÜ     ] A‚ÇÇ ‚áí B‚ÇÇ of g‚ÇÇ) p c~  in
       let c‚ÇÇ  = cast ([ ‚ãÜ     ] A‚ÇÉ ‚áí B‚ÇÉ of l ‚Ñì‚ÇÉ) ([ l pc‚ÇÑ ] A‚ÇÑ ‚áí B‚ÇÑ of g‚ÇÑ) q d~  in
         ApplyCast V ‚ü® c‚ÇÅ ‚ü© , c‚ÇÇ ‚Üù error (blame q)

  cast-ref-id‚ãÜ : ‚àÄ {V A B C D ‚Ñì p q c~ d~ c~‚Ä≤ d~‚Ä≤}
    ‚Üí let c‚ÇÅ  = cast (Ref A of l ‚Ñì) (Ref B of ‚ãÜ  ) p c~  in
       let c‚ÇÇ  = cast (Ref C of ‚ãÜ  ) (Ref D of ‚ãÜ  ) q d~  in
       let c‚ÇÅ‚Ä≤ = cast (Ref A of l ‚Ñì) (Ref B of l ‚Ñì) p c~‚Ä≤ in
       let c‚ÇÇ‚Ä≤ = cast (Ref C of l ‚Ñì) (Ref D of ‚ãÜ  ) q d~‚Ä≤ in
         ApplyCast V ‚ü® c‚ÇÅ ‚ü© , c‚ÇÇ ‚Üù V ‚ü® c‚ÇÅ‚Ä≤ ‚ü© ‚ü® c‚ÇÇ‚Ä≤ ‚ü©

  cast-ref-proj : ‚àÄ {V A B C D ‚Ñì‚ÇÅ ‚Ñì‚ÇÑ p q c~ d~ c~‚Ä≤ d~‚Ä≤}
    ‚Üí ‚Ñì‚ÇÅ ‚âº ‚Ñì‚ÇÑ
    ‚Üí let c‚ÇÅ  = cast (Ref A of l ‚Ñì‚ÇÅ) (Ref B of ‚ãÜ   ) p c~  in
       let c‚ÇÇ  = cast (Ref C of ‚ãÜ   ) (Ref D of l ‚Ñì‚ÇÑ) q d~  in
       let c‚ÇÅ‚Ä≤ = cast (Ref A of l ‚Ñì‚ÇÑ) (Ref B of l ‚Ñì‚ÇÑ) p c~‚Ä≤ in
       let c‚ÇÇ‚Ä≤ = cast (Ref C of l ‚Ñì‚ÇÑ) (Ref D of l ‚Ñì‚ÇÑ) q d~‚Ä≤ in
         ApplyCast V ‚ü® c‚ÇÅ ‚ü© , c‚ÇÇ ‚Üù V ‚ü® c‚ÇÅ‚Ä≤ ‚ü© ‚ü® c‚ÇÇ‚Ä≤ ‚ü©

  cast-ref-proj-blame : ‚àÄ {V A B C D ‚Ñì‚ÇÅ ‚Ñì‚ÇÑ p q c~ d~}
    ‚Üí ¬¨ ‚Ñì‚ÇÅ ‚âº ‚Ñì‚ÇÑ
    ‚Üí let c‚ÇÅ  = cast (Ref A of l ‚Ñì‚ÇÅ) (Ref B of ‚ãÜ   ) p c~  in
       let c‚ÇÇ  = cast (Ref C of ‚ãÜ   ) (Ref D of l ‚Ñì‚ÇÑ) q d~  in
         ApplyCast V ‚ü® c‚ÇÅ ‚ü© , c‚ÇÇ ‚Üù error (blame q)

  cast-ref-ref-id‚ãÜ : ‚àÄ {V T‚ÇÅ T‚ÇÇ T‚ÇÉ T‚ÇÑ g‚ÇÅ g‚ÇÇ ‚Ñì‚ÇÉ g‚ÇÑ ‚Ñì p q c~ d~ c~‚Ä≤ d~‚Ä≤}
    ‚Üí let c‚ÇÅ  = cast (Ref (T‚ÇÅ of l ‚Ñì) of g‚ÇÅ  ) (Ref (T‚ÇÇ of ‚ãÜ  ) of g‚ÇÇ) p c~  in
       let c‚ÇÇ  = cast (Ref (T‚ÇÉ of ‚ãÜ  ) of l ‚Ñì‚ÇÉ) (Ref (T‚ÇÑ of ‚ãÜ  ) of g‚ÇÑ) q d~  in
       let c‚ÇÅ‚Ä≤ = cast (Ref (T‚ÇÅ of l ‚Ñì) of g‚ÇÅ  ) (Ref (T‚ÇÇ of l ‚Ñì) of g‚ÇÇ) p c~‚Ä≤ in
       let c‚ÇÇ‚Ä≤ = cast (Ref (T‚ÇÉ of l ‚Ñì) of l ‚Ñì‚ÇÉ) (Ref (T‚ÇÑ of ‚ãÜ  ) of g‚ÇÑ) q d~‚Ä≤ in
         ApplyCast V ‚ü® c‚ÇÅ ‚ü© , c‚ÇÇ ‚Üù V ‚ü® c‚ÇÅ‚Ä≤ ‚ü© ‚ü® c‚ÇÇ‚Ä≤ ‚ü©

  cast-ref-ref-proj : ‚àÄ {V T‚ÇÅ T‚ÇÇ T‚ÇÉ T‚ÇÑ g‚ÇÅ g‚ÇÇ ‚Ñì‚ÇÉ g‚ÇÑ ‚Ñì‚ÇÅ ‚Ñì‚ÇÑ p q c~ d~ c~‚Ä≤ d~‚Ä≤}
    ‚Üí ‚Ñì‚ÇÅ ‚â° ‚Ñì‚ÇÑ
    ‚Üí let c‚ÇÅ  = cast (Ref (T‚ÇÅ of l ‚Ñì‚ÇÅ) of g‚ÇÅ  ) (Ref (T‚ÇÇ of ‚ãÜ   ) of g‚ÇÇ) p c~  in
       let c‚ÇÇ  = cast (Ref (T‚ÇÉ of ‚ãÜ   ) of l ‚Ñì‚ÇÉ) (Ref (T‚ÇÑ of l ‚Ñì‚ÇÑ) of g‚ÇÑ) q d~  in
       let c‚ÇÅ‚Ä≤ = cast (Ref (T‚ÇÅ of l ‚Ñì‚ÇÑ) of g‚ÇÅ  ) (Ref (T‚ÇÇ of l ‚Ñì‚ÇÑ) of g‚ÇÇ) p c~‚Ä≤ in
       let c‚ÇÇ‚Ä≤ = cast (Ref (T‚ÇÉ of l ‚Ñì‚ÇÑ) of l ‚Ñì‚ÇÉ) (Ref (T‚ÇÑ of l ‚Ñì‚ÇÑ) of g‚ÇÑ) q d~‚Ä≤ in
         ApplyCast V ‚ü® c‚ÇÅ ‚ü© , c‚ÇÇ ‚Üù V ‚ü® c‚ÇÅ‚Ä≤ ‚ü© ‚ü® c‚ÇÇ‚Ä≤ ‚ü©

  cast-ref-ref-proj-blame : ‚àÄ {V T‚ÇÅ T‚ÇÇ T‚ÇÉ T‚ÇÑ g‚ÇÅ g‚ÇÇ ‚Ñì‚ÇÉ g‚ÇÑ ‚Ñì‚ÇÅ ‚Ñì‚ÇÑ p q c~ d~}
    ‚Üí ¬¨ ‚Ñì‚ÇÅ ‚â° ‚Ñì‚ÇÑ
    ‚Üí let c‚ÇÅ  = cast (Ref (T‚ÇÅ of l ‚Ñì‚ÇÅ) of g‚ÇÅ  ) (Ref (T‚ÇÇ of ‚ãÜ   ) of g‚ÇÇ) p c~  in
       let c‚ÇÇ  = cast (Ref (T‚ÇÉ of ‚ãÜ   ) of l ‚Ñì‚ÇÉ) (Ref (T‚ÇÑ of l ‚Ñì‚ÇÑ) of g‚ÇÑ) q d~  in
         ApplyCast V ‚ü® c‚ÇÅ ‚ü© , c‚ÇÇ ‚Üù error (blame q)
