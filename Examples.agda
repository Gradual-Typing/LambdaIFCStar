module Examples where

open import Data.List
open import Data.Bool renaming (Bool to ùîπ)

open import Types
open import BlameLabels
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)


module StaticExamples where

open import SurfaceLang

_ : Term
_ = (∆õ[ low ] (` Bool of ‚ãÜ ) Àô (` 0) of high) ¬∑ (` 0) at pos 0

postulate
  publish : Term
  ‚ä¢publish : [] Õæ l low ‚ä¢·¥≥ publish ‚¶Ç [ l low ] ` Bool of l low ‚áí (` Unit of l low) of l low

M‚Çï : Term
M‚Çï =
  -- publish --
  `let publish ‚à∂ [ l low ] (` Bool of l low) ‚áí (` Unit of l low) of l low `in
  -- flip --
  `let ∆õ[ low ] ` Bool of l high Àô if (` 0) then $ false of low else $ true of low at (pos 0) of low ‚à∂
       [ l low ] (` Bool of l high) ‚áí (` Bool of l high) of l low `in
  -- result --
  `let $ true of high ‚à∂ ` Bool of l high `in
  (` 2 ¬∑ (` 1 ¬∑ ` 0 at pos 1) at pos 2)

-- ‚ä¢M‚Çï : [] Õæ l low ‚ä¢·¥≥ M‚Çï ‚¶Ç ` Unit of l low
-- ‚ä¢M‚Çï = ‚ä¢let ‚ä¢publish
--        (‚ä¢let (‚ä¢lam (‚ä¢if (‚ä¢var refl) ‚ä¢const ‚ä¢const refl))
--          (‚ä¢let ‚ä¢const
--            (‚ä¢app (‚ä¢var refl) (‚ä¢app (‚ä¢var refl) (‚ä¢var refl) ‚â≤-refl ‚âæ-refl ‚âæ-refl) {!!} ‚âæ-refl ‚âæ-refl)))

M‚Çó : Term
M‚Çó =
  -- publish --
  `let publish ‚à∂ [ l low ] (` Bool of l low) ‚áí (` Unit of l low) of l low `in
  -- flip --
  `let ∆õ[ low ] ` Bool of l high Àô if (` 0) then $ false of low else $ true of low at (pos 0) of low ‚à∂
       [ l low ] (` Bool of l high) ‚áí (` Bool of l low) of l low `in
  -- result --
  `let $ true of high ‚à∂ ` Bool of l high `in
  (` 2 ¬∑ (` 1 ¬∑ ` 0 at pos 1) at pos 2)

-- ‚ä¢M‚Çó : [] Õæ l low ‚ä¢·¥≥ M‚Çó ‚¶Ç ` Unit of l low
-- ‚ä¢M‚Çó = ‚ä¢let ‚ä¢publish
--        (‚ä¢let (‚ä¢lam (‚ä¢if (‚ä¢var {!!}) ‚ä¢const ‚ä¢const refl))
--          (‚ä¢let ‚ä¢const
--            (‚ä¢app (‚ä¢var refl) (‚ä¢app (‚ä¢var refl) (‚ä¢var refl) ‚â≤-refl ‚âæ-refl ‚âæ-refl) ‚â≤-refl ‚âæ-refl ‚âæ-refl)))

M : Term
M =
  -- publish --
  `let publish ‚à∂ [ l low ] (` Bool of l low) ‚áí (` Unit of l low) of l low `in
  -- dumb --
  `let ∆õ[ low ] ` Bool of l high Àô $ false of low of low ‚à∂
       [ l low ] (` Bool of l high) ‚áí (` Bool of l low) of l low `in
  -- result --
  `let $ true of high ‚à∂ ` Bool of l high `in
  (` 2 ¬∑ (` 1 ¬∑ ` 0 at pos 1) at pos 2)

‚ä¢M : [] Õæ l low ‚ä¢·¥≥ M ‚¶Ç ` Unit of l low
‚ä¢M = ‚ä¢let ‚ä¢publish
       (‚ä¢let (‚ä¢lam ‚ä¢const)
         (‚ä¢let ‚ä¢const
           (‚ä¢app (‚ä¢var refl) (‚ä¢app (‚ä¢var refl) (‚ä¢var refl) ‚â≤-refl ‚âæ-refl ‚âæ-refl) ‚â≤-refl ‚âæ-refl ‚âæ-refl)))

{- Explicit type annotation -}
_ : Term
_ = `let ($ true of high) ‚à∂ ` Bool of ‚ãÜ at pos 0 ‚à∂ ` Bool of ‚ãÜ `in (` 0)


module DynamicExamples where

open import SurfaceLang
  renaming (`_ to `·¥≥_;
            $_of_ to $·¥≥_of_;
            ∆õ[_]_Àô_of_ to ∆õ·¥≥[_]_Àô_of_;
            !_ to !·¥≥_)
open import CC renaming (Term to CCTerm)
