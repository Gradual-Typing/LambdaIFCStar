module CCExpSub.ProxyElimination where

open import Data.Bool renaming (Bool to ùîπ)
open import Data.Nat
open import Data.List hiding ([_])
open import Data.Maybe
open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ; ‚àÉ; ‚àÉ-syntax; Œ£; Œ£-syntax) renaming (_,_ to ‚ü®_,_‚ü©)
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary.PropositionalEquality using (_‚â°_; _‚â¢_; refl; subst; subst‚ÇÇ; cong; cong‚ÇÇ; sym)
open import Function using (case_of_)

open import Common.Types
open import Common.TypeBasedCast
open import CCExpSub.Statics
open import CCExpSub.CanonicalForms

elim-if : ‚àÄ {V g} ‚Üí Constant V (` Bool of g) ‚Üí (A : Type) ‚Üí (M N : Term) ‚Üí Term
-- b of ‚Ñì
elim-if (Const (Const-base {k = true} {‚Ñì}))  A M N = prot ‚Ñì M
elim-if (Const (Const-base {k = false} {‚Ñì})) A M N = prot ‚Ñì N
-- b of ‚Ñì ‚ü® Bool of ‚Ñì ‚áí Bool of ‚ãÜ ‚ü©
elim-if (Const (Const-inj {c = c} (Const (Const-base {k = true} {‚Ñì})))) A M N =
  prot ‚Ñì (cast-pc ‚ãÜ M) ‚ü® branch/c A c ‚ü©
elim-if (Const (Const-inj {c = c} (Const (Const-base {k = false} {‚Ñì})))) A M N =
  prot ‚Ñì (cast-pc ‚ãÜ M) ‚ü® branch/c A c ‚ü©
-- b of ‚Ñì‚ÇÅ ‚ü® Bool of ‚Ñì‚ÇÅ ‚Üü Bool of ‚Ñì‚ÇÇ ‚ü© ‚ü® Bool of ‚Ñì‚ÇÇ ‚áí Bool of ‚ãÜ ‚ü©
elim-if (Const (Const-inj {c = c}
  (Const-‚Üü {s = cast‚Üü (` Bool of l ‚Ñì‚ÇÅ) (` Bool of l ‚Ñì‚ÇÇ) (<:-ty (<:-l ‚Ñì‚ÇÅ‚âº‚Ñì‚ÇÇ) <:-Œπ)} (Const-base {k = true} {‚Ñì‚ÇÅ})))) A M N =
  let s = cast‚Üü (stamp A (l ‚Ñì‚ÇÅ)) (stamp A (l ‚Ñì‚ÇÇ)) (stamp-<: <:-refl (<:-l ‚Ñì‚ÇÅ‚âº‚Ñì‚ÇÇ)) in
  (prot ‚Ñì‚ÇÅ (cast-pc ‚ãÜ M)) ‚Üü‚ü® s ‚ü© ‚ü® branch/c A c ‚ü©
elim-if (Const (Const-inj {c = c}
  (Const-‚Üü {s = cast‚Üü (` Bool of l ‚Ñì‚ÇÅ) (` Bool of l ‚Ñì‚ÇÇ) (<:-ty (<:-l ‚Ñì‚ÇÅ‚âº‚Ñì‚ÇÇ) <:-Œπ)} (Const-base {k = false} {‚Ñì‚ÇÅ})))) A M N =
  let s = cast‚Üü (stamp A (l ‚Ñì‚ÇÅ)) (stamp A (l ‚Ñì‚ÇÇ)) (stamp-<: <:-refl (<:-l ‚Ñì‚ÇÅ‚âº‚Ñì‚ÇÇ)) in
  (prot ‚Ñì‚ÇÅ (cast-pc ‚ãÜ N)) ‚Üü‚ü® s ‚ü© ‚ü® branch/c A c ‚ü©
-- b of ‚Ñì‚ÇÅ ‚ü® Bool of ‚Ñì‚ÇÅ ‚Üü Bool of ‚Ñì‚ÇÇ ‚ü©
elim-if (Const-‚Üü {s = cast‚Üü (` Bool of l ‚Ñì‚ÇÅ) (` Bool of l ‚Ñì‚ÇÇ) (<:-ty (<:-l ‚Ñì‚ÇÅ‚âº‚Ñì‚ÇÇ) <:-Œπ)} (Const-base {k = true} {‚Ñì‚ÇÅ})) A M N =
  let s = cast‚Üü (stamp A (l ‚Ñì‚ÇÅ)) (stamp A (l ‚Ñì‚ÇÇ)) (stamp-<: <:-refl (<:-l ‚Ñì‚ÇÅ‚âº‚Ñì‚ÇÇ)) in
  (prot ‚Ñì‚ÇÅ M) ‚Üü‚ü® s ‚ü©
elim-if (Const-‚Üü {s = cast‚Üü (` Bool of l ‚Ñì‚ÇÅ) (` Bool of l ‚Ñì‚ÇÇ) (<:-ty (<:-l ‚Ñì‚ÇÅ‚âº‚Ñì‚ÇÇ) <:-Œπ)} (Const-base {k = false} {‚Ñì‚ÇÅ})) A M N =
  let s = cast‚Üü (stamp A (l ‚Ñì‚ÇÅ)) (stamp A (l ‚Ñì‚ÇÇ)) (stamp-<: <:-refl (<:-l ‚Ñì‚ÇÅ‚âº‚Ñì‚ÇÇ)) in
  (prot ‚Ñì‚ÇÅ N) ‚Üü‚ü® s ‚ü©
-- b of ‚Ñì ‚ü® Bool of ‚Ñì ‚áí Bool of ‚ãÜ ‚ü© ‚ü® Bool of ‚ãÜ ‚Üü Bool of ‚ãÜ ‚ü©
elim-if (Const-‚Üü {s = cast‚Üü (` Bool of ‚ãÜ) (` Bool of ‚ãÜ) (<:-ty <:-‚ãÜ <:-Œπ)}
  (Const-inj {c = c} (Const (Const-base {k = true} {‚Ñì})))) A M N =
  prot ‚Ñì (cast-pc ‚ãÜ M) ‚ü® branch/c A c ‚ü©
elim-if (Const-‚Üü {s = cast‚Üü (` Bool of ‚ãÜ) (` Bool of ‚ãÜ) (<:-ty <:-‚ãÜ <:-Œπ)}
  (Const-inj {c = c} (Const (Const-base {k = false} {‚Ñì})))) A M N =
  prot ‚Ñì (cast-pc ‚ãÜ N) ‚ü® branch/c A c ‚ü©
-- b of ‚Ñì‚ÇÅ ‚ü® Bool of ‚Ñì‚ÇÅ ‚Üü Bool of ‚Ñì‚ÇÇ ‚ü© ‚ü® Bool of ‚Ñì‚ÇÇ ‚áí Bool of ‚ãÜ ‚ü© ‚ü® Bool of ‚ãÜ ‚Üü Bool of ‚ãÜ ‚ü©
elim-if (Const-‚Üü {s = cast‚Üü (` Bool of ‚ãÜ) (` Bool of ‚ãÜ) (<:-ty <:-‚ãÜ <:-Œπ)}
  (Const-inj {c = c} (Const-‚Üü {s = cast‚Üü (` Bool of l ‚Ñì‚ÇÅ) (` Bool of l ‚Ñì‚ÇÇ) (<:-ty (<:-l ‚Ñì‚ÇÅ‚âº‚Ñì‚ÇÇ) <:-Œπ)}
  (Const-base {k = true} {‚Ñì‚ÇÅ})))) A M N =
  let s = cast‚Üü (stamp A (l ‚Ñì‚ÇÅ)) (stamp A (l ‚Ñì‚ÇÇ)) (stamp-<: <:-refl (<:-l ‚Ñì‚ÇÅ‚âº‚Ñì‚ÇÇ)) in
  (prot ‚Ñì‚ÇÅ (cast-pc ‚ãÜ M)) ‚Üü‚ü® s ‚ü© ‚ü® branch/c A c ‚ü©
elim-if (Const-‚Üü {s = cast‚Üü (` Bool of ‚ãÜ) (` Bool of ‚ãÜ) (<:-ty <:-‚ãÜ <:-Œπ)}
  (Const-inj {c = c} (Const-‚Üü {s = cast‚Üü (` Bool of l ‚Ñì‚ÇÅ) (` Bool of l ‚Ñì‚ÇÇ) (<:-ty (<:-l ‚Ñì‚ÇÅ‚âº‚Ñì‚ÇÇ) <:-Œπ)}
  (Const-base {k = false} {‚Ñì‚ÇÅ})))) A M N =
  let s = cast‚Üü (stamp A (l ‚Ñì‚ÇÅ)) (stamp A (l ‚Ñì‚ÇÇ)) (stamp-<: <:-refl (<:-l ‚Ñì‚ÇÅ‚âº‚Ñì‚ÇÇ)) in
  (prot ‚Ñì‚ÇÅ (cast-pc ‚ãÜ N)) ‚Üü‚ü® s ‚ü© ‚ü® branch/c A c ‚ü©

elim-if-wt : ‚àÄ {Œ£ gc pc V M N A g}
  ‚Üí (b : Constant V (` Bool of g))
  ‚Üí (‚àÄ {pc} ‚Üí [] Õæ Œ£ Õæ gc ‚ãéÃÉ g Õæ pc ‚ä¢ M ‚¶Ç A)
  ‚Üí (‚àÄ {pc} ‚Üí [] Õæ Œ£ Õæ gc ‚ãéÃÉ g Õæ pc ‚ä¢ N ‚¶Ç A)
    ---------------------------------------------------
  ‚Üí [] Õæ Œ£ Õæ gc Õæ pc ‚ä¢ elim-if b A M N ‚¶Ç stamp A g
elim-if-wt (Const (Const-base {k = true} {‚Ñì})) ‚ä¢M ‚ä¢N = ‚ä¢prot ‚ä¢M
elim-if-wt (Const (Const-base {k = false} {‚Ñì})) ‚ä¢M ‚ä¢N = ‚ä¢prot ‚ä¢N
elim-if-wt {gc = gc} (Const (Const-inj (Const (Const-base {k = true} {‚Ñì})))) ‚ä¢M ‚ä¢N
  rewrite g‚ãéÃÉ‚ãÜ‚â°‚ãÜ {gc} = ‚ä¢cast (‚ä¢prot (‚ä¢cast-pc ‚ä¢M ~‚ãÜ))
elim-if-wt {gc = gc} (Const (Const-inj (Const (Const-base {k = false} {‚Ñì})))) ‚ä¢M ‚ä¢N
  rewrite g‚ãéÃÉ‚ãÜ‚â°‚ãÜ {gc} = ‚ä¢cast (‚ä¢prot (‚ä¢cast-pc ‚ä¢M ~‚ãÜ))
elim-if-wt {gc = gc} (Const (Const-inj {c = c}
  (Const-‚Üü {s = cast‚Üü (` Bool of l ‚Ñì‚ÇÅ) (` Bool of l ‚Ñì‚ÇÇ) (<:-ty (<:-l ‚Ñì‚ÇÅ‚âº‚Ñì‚ÇÇ) <:-Œπ)} (Const-base {k = true})))) ‚ä¢M ‚ä¢N
  rewrite g‚ãéÃÉ‚ãÜ‚â°‚ãÜ {gc} =
  ‚ä¢cast (‚ä¢sub (‚ä¢prot (‚ä¢cast-pc ‚ä¢M ~‚ãÜ)))
elim-if-wt {gc = gc} (Const (Const-inj {c = c}
  (Const-‚Üü {s = cast‚Üü (` Bool of l ‚Ñì‚ÇÅ) (` Bool of l ‚Ñì‚ÇÇ) (<:-ty (<:-l ‚Ñì‚ÇÅ‚âº‚Ñì‚ÇÇ) <:-Œπ)} (Const-base {k = false})))) ‚ä¢M ‚ä¢N
  rewrite g‚ãéÃÉ‚ãÜ‚â°‚ãÜ {gc} =
  ‚ä¢cast (‚ä¢sub (‚ä¢prot (‚ä¢cast-pc ‚ä¢N ~‚ãÜ)))
elim-if-wt (Const-‚Üü {s = cast‚Üü (` Bool of l ‚Ñì‚ÇÅ) (` Bool of l ‚Ñì‚ÇÇ) (<:-ty (<:-l ‚Ñì‚ÇÅ‚âº‚Ñì‚ÇÇ) <:-Œπ)} (Const-base {k = true} {‚Ñì‚ÇÅ})) ‚ä¢M ‚ä¢N =
  ‚ä¢sub (‚ä¢prot (‚ä¢sub-pc ‚ä¢M (consis-join-<:‚Çó <:‚Çó-refl (<:-l ‚Ñì‚ÇÅ‚âº‚Ñì‚ÇÇ))))
elim-if-wt (Const-‚Üü {s = cast‚Üü (` Bool of l ‚Ñì‚ÇÅ) (` Bool of l ‚Ñì‚ÇÇ) (<:-ty (<:-l ‚Ñì‚ÇÅ‚âº‚Ñì‚ÇÇ) <:-Œπ)} (Const-base {k = false} {‚Ñì‚ÇÅ})) ‚ä¢M ‚ä¢N =
  ‚ä¢sub (‚ä¢prot (‚ä¢sub-pc ‚ä¢N (consis-join-<:‚Çó <:‚Çó-refl (<:-l ‚Ñì‚ÇÅ‚âº‚Ñì‚ÇÇ))))
elim-if-wt {gc = gc} (Const-‚Üü {s = cast‚Üü (` Bool of ‚ãÜ) (` Bool of ‚ãÜ) (<:-ty <:-‚ãÜ <:-Œπ)}
  (Const-inj {c = c} (Const (Const-base {k = true} {‚Ñì})))) ‚ä¢M ‚ä¢N
  rewrite g‚ãéÃÉ‚ãÜ‚â°‚ãÜ {gc} =
  ‚ä¢cast (‚ä¢prot (‚ä¢cast-pc ‚ä¢M ~‚ãÜ))
elim-if-wt {gc = gc} (Const-‚Üü {s = cast‚Üü (` Bool of ‚ãÜ) (` Bool of ‚ãÜ) (<:-ty <:-‚ãÜ <:-Œπ)}
  (Const-inj {c = c} (Const (Const-base {k = false} {‚Ñì})))) ‚ä¢M ‚ä¢N
  rewrite g‚ãéÃÉ‚ãÜ‚â°‚ãÜ {gc} =
  ‚ä¢cast (‚ä¢prot (‚ä¢cast-pc ‚ä¢N ~‚ãÜ))
elim-if-wt {gc = gc} (Const-‚Üü {s = cast‚Üü (` Bool of ‚ãÜ) (` Bool of ‚ãÜ) (<:-ty <:-‚ãÜ <:-Œπ)}
  (Const-inj (Const-‚Üü {s = cast‚Üü (` Bool of l ‚Ñì‚ÇÅ) (` Bool of l ‚Ñì‚ÇÇ) (<:-ty (<:-l ‚Ñì‚ÇÅ‚âº‚Ñì‚ÇÇ) <:-Œπ)}
  (Const-base {k = true} {‚Ñì‚ÇÅ})))) ‚ä¢M ‚ä¢N
  rewrite g‚ãéÃÉ‚ãÜ‚â°‚ãÜ {gc} =
  ‚ä¢cast (‚ä¢sub (‚ä¢prot (‚ä¢cast-pc ‚ä¢M ~‚ãÜ)))
elim-if-wt {gc = gc} (Const-‚Üü {s = cast‚Üü (` Bool of ‚ãÜ) (` Bool of ‚ãÜ) (<:-ty <:-‚ãÜ <:-Œπ)}
  (Const-inj (Const-‚Üü {s = cast‚Üü (` Bool of l ‚Ñì‚ÇÅ) (` Bool of l ‚Ñì‚ÇÇ) (<:-ty (<:-l ‚Ñì‚ÇÅ‚âº‚Ñì‚ÇÇ) <:-Œπ)}
  (Const-base {k = false} {‚Ñì‚ÇÅ})))) ‚ä¢M ‚ä¢N
  rewrite g‚ãéÃÉ‚ãÜ‚â°‚ãÜ {gc} =
  ‚ä¢cast (‚ä¢sub (‚ä¢prot (‚ä¢cast-pc ‚ä¢N ~‚ãÜ)))

-- elim-fun : ‚àÄ {Œ£ gc A B V g} ‚Üí Fun V Œ£ (‚ü¶ gc ‚üß A ‚áí B of g) ‚Üí (W : Term) ‚Üí (pc : StaticLabel) ‚Üí Term
-- elim-fun (Fun-fun (Fun-∆õ {N = N} {‚Ñì = ‚Ñì} ‚ä¢N)) W pc = prot ‚Ñì (N [ W ])
-- elim-fun {g = g} (Fun-fun (Fun-proxy {V = V} fun-V (I-fun c I-label I-label))) W pc =
--   case c of Œª where
--   (cast (‚ü¶ l pc‚ÇÅ ‚üß A ‚áí B of l ‚Ñì‚ÇÅ) (‚ü¶ l pc‚ÇÇ ‚üß C ‚áí D of g‚ÇÇ) p _) ‚Üí
--     (V ¬∑ (W ‚ü® dom/c c ‚ü©)) ‚ü® cod/c c ‚ü©
--   (cast (‚ü¶ l pc‚ÇÅ ‚üß A ‚áí B of l ‚Ñì‚ÇÅ) (‚ü¶ ‚ãÜ ‚üß C ‚áí D of g‚ÇÇ) p _) ‚Üí
--     case pc ‚ãé ‚Ñì‚ÇÅ ‚âº? pc‚ÇÅ of Œª where
--     (yes _) ‚Üí cast-pc (l pc) (V ¬∑ (W ‚ü® dom/c c ‚ü©)) ‚ü® cod/c c ‚ü©
--     (no  _) ‚Üí error (stamp B g) (blame p)
-- -- (V ‚ü® ‚ü¶ gc‚ÇÅ ‚üß A‚ÇÅ ‚áí B‚ÇÅ of g‚ÇÅ ‚Üü ‚ü¶ gc‚ÇÇ ‚üß A‚ÇÇ ‚áí B‚ÇÇ of g‚ÇÇ ‚ü©) ¬∑ W
-- elim-fun (Fun-‚Üü {V = V} {cast‚Üü (‚ü¶ gc‚ÇÅ ‚üß A‚ÇÅ ‚áí B‚ÇÅ of g‚ÇÅ) (‚ü¶ gc‚ÇÇ ‚üß A‚ÇÇ ‚áí B‚ÇÇ of g‚ÇÇ)
--   (<:-ty g‚ÇÅ<:g‚ÇÇ (<:-fun gc‚ÇÇ<:gc‚ÇÅ A‚ÇÇ<:A‚ÇÅ B‚ÇÅ<:B‚ÇÇ))} fun-V) W pc =
--   {!!}
