{- Label coercion in normal form -}

module LabelCoercionCalculi.S where

open import Data.Nat
open import Data.Unit using (‚ä§; tt)
open import Data.Bool using (true; false) renaming (Bool to ùîπ)
open import Data.List hiding ([_])
open import Data.Product renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_)
open import Data.Maybe
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)
open import Function using (case_of_)

open import Common.Utils
open import Common.SecurityLabels
open import Common.BlameLabels
open import LabelCoercionCalculi.Coercion

data Canonical : ‚àÄ {g‚ÇÅ g‚ÇÇ} ‚Üí ‚ä¢ g‚ÇÅ ‚áí g‚ÇÇ ‚Üí Set where

  id : ‚àÄ {g} ‚Üí Canonical (id (g))

  up : Canonical ‚Üë

  inj : ‚àÄ {‚Ñì} ‚Üí Canonical (‚Ñì !)

  proj : ‚àÄ {p} {‚Ñì} ‚Üí Canonical (‚Ñì ?? p)

  bot : ‚àÄ {p} {g‚ÇÅ g‚ÇÇ} ‚Üí Canonical (‚ä•_ {g‚ÇÅ} {g‚ÇÇ} p)

  up-inj : Canonical  (‚Üë Õæ high !)

  proj-up : ‚àÄ {p} ‚Üí Canonical (low ?? p Õæ ‚Üë)

  proj-inj : ‚àÄ {p ‚Ñì} ‚Üí Canonical ((‚Ñì ?? p) Õæ (‚Ñì !))

  proj-up-inj : ‚àÄ {p} ‚Üí Canonical ((low ?? p) Õæ ‚Üë Õæ (high !))

{-
    id(g) ; c = c            c ; id(g) = c

    ‚ä•·µñ    ; c = ‚ä•·µñ           c ; ‚ä•·µñ    = ‚ä•·µñ

    ‚Ñì    ! ; ‚Ñì    ?·µñ = id(‚Ñì)
    low  ! ; high ?·µñ = ‚Üë
    high ! ; low  ?·µñ = ‚ä•·µñ

    (c‚ÇÅ ; c‚ÇÇ) ; c‚ÇÉ = c‚ÇÅ ; (c‚ÇÇ ; c‚ÇÉ)
-}

_‚®ü_ : ‚àÄ {g‚ÇÅ g‚ÇÇ g‚ÇÉ} (c‚ÇÅ : ‚ä¢ g‚ÇÅ ‚áí g‚ÇÇ) (c‚ÇÇ : ‚ä¢ g‚ÇÇ ‚áí g‚ÇÉ)
  ‚Üí Canonical c‚ÇÅ
  ‚Üí Canonical c‚ÇÇ
  ‚Üí Œ£[ d ‚àà ‚ä¢ g‚ÇÅ ‚áí g‚ÇÉ ] (Canonical d)
((id g) ‚®ü d) id cd = ‚ü® d , cd ‚ü©
(c ‚®ü (id g)) cc id = ‚ü® c , cc ‚ü©
((‚ä• p) ‚®ü d) bot _ = ‚ü® ‚ä• p , bot ‚ü©
(c ‚®ü (‚ä• p)) _ bot = ‚ü® ‚ä• p , bot ‚ü©
(‚Üë ‚®ü (high !)) up inj = ‚ü® ‚Üë Õæ high ! , up-inj ‚ü©
((‚Ñì‚ÇÅ !) ‚®ü (‚Ñì‚ÇÇ ?? p)) inj proj with ‚Ñì‚ÇÅ | ‚Ñì‚ÇÇ
... | low  | low  = ‚ü® id (l low) , id ‚ü©
... | high | high = ‚ü® id (l high) , id ‚ü©
... | low  | high = ‚ü® ‚Üë , up ‚ü©
... | high | low  = ‚ü® ‚ä• p , bot ‚ü©
((‚Ñì !) ‚®ü (low ?? p Õæ ‚Üë)) inj proj-up with ‚Ñì
... | low = ‚ü® ‚Üë , up ‚ü©
... | high = ‚ü® ‚ä• p , bot ‚ü©
((‚Ñì‚ÇÅ !) ‚®ü (‚Ñì‚ÇÇ ?? p Õæ ‚Ñì‚ÇÇ !)) inj proj-inj with ‚Ñì‚ÇÅ | ‚Ñì‚ÇÇ
... | low  | low  = ‚ü® low ! , inj ‚ü©
... | high | high = ‚ü® high ! , inj ‚ü©
... | low  | high = ‚ü® ‚Üë Õæ high ! , up-inj ‚ü©
... | high | low  = ‚ü® ‚ä• p , bot ‚ü©
((‚Ñì !) ‚®ü (low ?? p Õæ ‚Üë Õæ high !)) inj proj-up-inj with ‚Ñì
... | low  = ‚ü® ‚Üë Õæ high ! , up-inj ‚ü©
... | high = ‚ü® ‚ä• p , bot ‚ü©
((low ?? p) ‚®ü ‚Üë) proj up = ‚ü® low ?? p Õæ ‚Üë , proj-up ‚ü©
((‚Ñì ?? p) ‚®ü (‚Ñì !)) proj inj = ‚ü® ‚Ñì ?? p Õæ ‚Ñì ! , proj-inj ‚ü©
((low ?? p) ‚®ü (‚Üë Õæ high !)) proj up-inj = ‚ü® low ?? p Õæ ‚Üë Õæ high ! , proj-up-inj ‚ü©
((‚Üë Õæ high !) ‚®ü (‚Ñì ?? p)) up-inj proj with ‚Ñì
... | low  = ‚ü® ‚ä• p , bot ‚ü©
... | high = ‚ü® ‚Üë , up ‚ü©
((‚Üë Õæ high !) ‚®ü (low ?? p Õæ ‚Üë)) up-inj proj-up = ‚ü® ‚ä• p , bot ‚ü©
((‚Üë Õæ high !) ‚®ü (‚Ñì ?? p Õæ ‚Ñì !)) up-inj proj-inj with ‚Ñì
... | low  = ‚ü® ‚ä• p , bot ‚ü©
... | high = ‚ü® ‚Üë Õæ high ! , up-inj ‚ü©
((‚Üë Õæ high !) ‚®ü (low ?? p Õæ ‚Üë Õæ high !)) up-inj proj-up-inj = ‚ü® ‚ä• p , bot ‚ü©
((low ?? p Õæ ‚Üë) ‚®ü (high !)) proj-up inj = ‚ü® low ?? p Õæ ‚Üë Õæ high ! , proj-up-inj ‚ü©
((‚Ñì‚ÇÅ ?? p Õæ ‚Ñì‚ÇÅ !) ‚®ü (‚Ñì‚ÇÇ ?? q)) proj-inj proj with ‚Ñì‚ÇÅ | ‚Ñì‚ÇÇ
... | low  | low  = ‚ü® low ?? p , proj ‚ü©
... | high | high = ‚ü® high ?? p , proj ‚ü©
... | low  | high = ‚ü® low ?? p Õæ ‚Üë , proj-up ‚ü©
... | high | low  = ‚ü® ‚ä• q , bot ‚ü©
((‚Ñì ?? p Õæ ‚Ñì !) ‚®ü (low ?? q Õæ ‚Üë)) proj-inj proj-up with ‚Ñì
... | low  = ‚ü® low ?? p Õæ ‚Üë , proj-up ‚ü©
... | high = ‚ü® ‚ä• q , bot ‚ü©
((‚Ñì‚ÇÅ ?? p Õæ ‚Ñì‚ÇÅ !) ‚®ü (‚Ñì‚ÇÇ ?? q Õæ ‚Ñì‚ÇÇ !)) proj-inj proj-inj with ‚Ñì‚ÇÅ | ‚Ñì‚ÇÇ
... | low  | low  = ‚ü® low ?? p Õæ low ! , proj-inj ‚ü©
... | high | high = ‚ü® high ?? p Õæ high ! , proj-inj ‚ü©
... | low  | high = ‚ü® low ?? p Õæ ‚Üë Õæ high ! , proj-up-inj ‚ü©
... | high | low  = ‚ü® ‚ä• q , bot ‚ü©
((‚Ñì ?? p Õæ ‚Ñì !) ‚®ü (low ?? q Õæ ‚Üë Õæ high !)) proj-inj proj-up-inj with ‚Ñì
... | low  = ‚ü® low ?? p Õæ ‚Üë Õæ high ! , proj-up-inj ‚ü©
... | high = ‚ü® ‚ä• q , bot ‚ü©
((low ?? p Õæ ‚Üë Õæ high !) ‚®ü (‚Ñì ?? q)) proj-up-inj proj with ‚Ñì
... | low  = ‚ü® ‚ä• q , bot ‚ü©
... | high = ‚ü® low ?? p Õæ ‚Üë , proj-up ‚ü©
((low ?? p Õæ ‚Üë Õæ high !) ‚®ü (low ?? q Õæ ‚Üë)) proj-up-inj proj-up = ‚ü® ‚ä• q , bot ‚ü©
((low ?? p Õæ ‚Üë Õæ high !) ‚®ü (‚Ñì ?? q Õæ ‚Ñì !)) proj-up-inj proj-inj with ‚Ñì
... | low  = ‚ü® ‚ä• q , bot ‚ü©
... | high = ‚ü® low ?? p Õæ ‚Üë Õæ high ! , proj-up-inj ‚ü©
((low ?? p Õæ ‚Üë Õæ high !) ‚®ü (low ?? q Õæ ‚Üë Õæ high !)) proj-up-inj proj-up-inj = ‚ü® ‚ä• q , bot ‚ü©
