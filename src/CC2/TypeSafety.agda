module CC2.TypeSafety where

open import Data.Nat
open import Data.Unit using (‚ä§; tt)
open import Data.Bool using (true; false) renaming (Bool to ùîπ)
open import Data.List
open import Data.Product using (_√ó_; ‚àÉ-syntax; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Maybe
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; trans; subst; sym)
open import Function using (case_of_)

open import Common.Utils
open import Common.Types
open import CC2.CCStatics
open import CC2.Reduction

open import CC2.HeapTyping    public
open import CC2.WellTyped     public
open import CC2.SubstPreserve public

data Progress (M : Term) (Œº : Heap) (pc : StaticLabel) : Set where
  step : ‚àÄ {N Œº‚Ä≤}
    ‚Üí M ‚à£ Œº ‚à£ pc ‚Äî‚Üí N ‚à£ Œº‚Ä≤
      ----------------------------- Step
    ‚Üí Progress M Œº pc

  done : Value M
      ----------------------- Done
    ‚Üí Progress M Œº pc

  err : Err M
      ----------------------- Error
    ‚Üí Progress M Œº pc

progress : ‚àÄ {Œ£ gc A} pc M ‚Üí [] Õæ Œ£ Õæ gc Õæ pc ‚ä¢ M ‚¶Ç A ‚Üí ‚àÄ Œº ‚Üí Œ£ ‚ä¢ Œº ‚Üí Progress M Œº pc
progress pc ($ k of ‚Ñì) ‚ä¢const Œº ‚ä¢Œº = done V-const
progress pc (addr a of ‚Ñì) (‚ä¢addr _) Œº ‚ä¢Œº = done V-addr
progress pc (` x) (‚ä¢var ())
progress pc (∆õ‚ü¶ _ ‚üß A Àô N of ‚Ñì) (‚ä¢lam ‚ä¢M) Œº ‚ä¢Œº = done V-∆õ
progress pc (app L M) (‚ä¢app ‚ä¢L ‚ä¢M _ _) Œº ‚ä¢Œº = step app-static
progress pc (app? L M p) (‚ä¢app? ‚ä¢L ‚ä¢M) Œº ‚ä¢Œº =
  case progress pc L ‚ä¢L Œº ‚ä¢Œº of Œª where
  (step L‚ÜíL‚Ä≤) ‚Üí step (Œæ {F = app?‚ñ° M p} L‚ÜíL‚Ä≤)
  (done v) ‚Üí
    case canonical-fun ‚ä¢L v of Œª where
    (Fun-∆õ _ (<:-ty () _))
    (Fun-proxy f (I-fun (cast (‚ü¶ l ‚Ñì·∂ú ‚üß A ‚áí B of l ‚Ñì) _ _ _) I-label I-label)
      (<:-ty <:-‚ãÜ (<:-fun <:-‚ãÜ _ _))) ‚Üí
        case nsu? pc ‚Ñì ‚Ñì·∂ú of Œª where
        (yes nsu-yes) ‚Üí step (app?-ok (fun-is-value f) nsu-yes)
        (no  nsu-no)  ‚Üí step (app?-fail (fun-is-value f) nsu-no)
  (err (E-error {e})) ‚Üí step (Œæ-err {F = app?‚ñ° M p} {e = e})
progress pc (app‚úì L M) (‚ä¢app‚úì ‚ä¢L ‚ä¢M _ _) Œº ‚ä¢Œº =
  case progress pc L ‚ä¢L Œº ‚ä¢Œº of Œª where
  (step L‚ÜíL‚Ä≤) ‚Üí step (Œæ {F = app‚úì‚ñ° M} L‚ÜíL‚Ä≤)
  (done v) ‚Üí
    case progress pc M ‚ä¢M Œº ‚ä¢Œº of Œª where
    (step M‚ÜíM‚Ä≤) ‚Üí step (Œæ {F = (app‚úì L ‚ñ°) v} M‚ÜíM‚Ä≤)
    (done w) ‚Üí
      case canonical-fun ‚ä¢L v of Œª where
      (Fun-∆õ _ _) ‚Üí step (Œ≤ w)
      (Fun-proxy f i _) ‚Üí step (fun-cast (fun-is-value f) w i)
    (err (E-error {e})) ‚Üí step (Œæ-err {F = (app‚úì L ‚ñ°) v} {e = e})
  (err (E-error {e})) ‚Üí step (Œæ-err {F = app‚úì‚ñ° M} {e = e})
progress pc (if L A M N) (‚ä¢if {g = g} ‚ä¢L ‚ä¢M ‚ä¢N) Œº ‚ä¢Œº =
  case progress pc L ‚ä¢L Œº ‚ä¢Œº of Œª where
  (step L‚ÜíL‚Ä≤) ‚Üí step (Œæ {F = if‚ñ° A M N} L‚ÜíL‚Ä≤)
  (done v) ‚Üí
    case canonical-const ‚ä¢L v of Œª where
    (Const-base {ùîπ} {true} _)  ‚Üí step Œ≤-if-true
    (Const-base {ùîπ} {false} _) ‚Üí step Œ≤-if-false
    (Const-inj  {ùîπ} {true} _)  ‚Üí step (if-cast-true (I-base-inj _))
    (Const-inj  {ùîπ} {false} _) ‚Üí step (if-cast-false (I-base-inj _))
  (err (E-error {e})) ‚Üí step (Œæ-err {F = if‚ñ° A M N} {e = e})
progress pc (`let M N) (‚ä¢let ‚ä¢M ‚ä¢N) Œº ‚ä¢Œº =
  case progress pc M ‚ä¢M Œº ‚ä¢Œº of Œª where
  (step M‚ÜíM‚Ä≤) ‚Üí step (Œæ {F = let‚ñ° N} M‚ÜíM‚Ä≤)
  (done v) ‚Üí step (Œ≤-let v)
  (err (E-error {e})) ‚Üí step (Œæ-err {F = let‚ñ° N} {e = e})
progress pc (ref‚ü¶ ‚Ñì ‚üß M) (‚ä¢ref ‚ä¢M pc‚Ä≤‚âº‚Ñì) Œº ‚ä¢Œº =
  step ref-static
progress pc (ref?‚ü¶ ‚Ñì ‚üß M p) (‚ä¢ref? ‚ä¢M) Œº ‚ä¢Œº =
  case pc ‚âº? ‚Ñì of Œª where
  (yes pc‚âº‚Ñì) ‚Üí step (ref?-ok pc‚âº‚Ñì)
  (no  pc‚ã†‚Ñì) ‚Üí step (ref?-fail pc‚ã†‚Ñì)
progress {Œ£} pc (ref‚úì‚ü¶ ‚Ñì ‚üß M) (‚ä¢ref‚úì ‚ä¢M pc‚âº‚Ñì) Œº ‚ä¢Œº =
  case progress pc M ‚ä¢M Œº ‚ä¢Œº of Œª where
    (step M‚ÜíM‚Ä≤) ‚Üí step (Œæ {F = ref‚úì‚ü¶ ‚Ñì ‚üß‚ñ°} M‚ÜíM‚Ä≤)
    (done v) ‚Üí
      let ‚ü® n , fresh ‚ü© = gen-fresh Œº in step (ref v fresh)
    (err (E-error {e})) ‚Üí
      step (Œæ-err {F = ref‚úì‚ü¶ ‚Ñì ‚üß‚ñ°} {e = e})
progress pc (! M) (‚ä¢deref ‚ä¢M) Œº ‚ä¢Œº =
  case progress pc M ‚ä¢M Œº ‚ä¢Œº of Œª where
  (step M‚ÜíM‚Ä≤) ‚Üí step (Œæ {F = !‚ñ°} M‚ÜíM‚Ä≤)
  (done v) ‚Üí
    case canonical-ref ‚ä¢M v of Œª where
    (Ref-addr {n = n} {‚Ñì‚ÇÅ = ‚Ñì‚ÇÅ} eq _) ‚Üí
      let ‚ü® wf , V‚ÇÅ , v‚ÇÅ , eq , ‚ä¢V‚ÇÅ ‚ü© = ‚ä¢Œº n ‚Ñì‚ÇÅ eq in
      step (deref {v = v‚ÇÅ} eq)
    (Ref-proxy r i _) ‚Üí step (deref-cast (ref-is-value r) i)
  (err (E-error {e})) ‚Üí step (Œæ-err {F = !‚ñ°} {e = e})
progress pc (assign L M) (‚ä¢assign ‚ä¢L ‚ä¢M ‚Ñì‚âº‚ÑìÃÇ pc‚Ä≤‚âº‚ÑìÃÇ) Œº ‚ä¢Œº =
  step assign-static
progress pc (assign? L M p) (‚ä¢assign? ‚ä¢L ‚ä¢M) Œº ‚ä¢Œº =
  case progress pc L ‚ä¢L Œº ‚ä¢Œº of Œª where
  (step L‚ÜíL‚Ä≤) ‚Üí step (Œæ {F = assign?‚ñ° M p} L‚ÜíL‚Ä≤)
  (done v) ‚Üí
    case canonical-ref ‚ä¢L v of Œª where
    (Ref-addr {n = n} {‚Ñì‚ÇÅ = ‚Ñì‚ÇÅ} eq (<:-ty () _))
    (Ref-proxy r (I-ref (cast (Ref (T of l ‚ÑìÃÇ) of l ‚Ñì) _ _ _) I-label I-label)
      (<:-ty <:-‚ãÜ (<:-ref (<:-ty <:-‚ãÜ _) _))) ‚Üí
        case nsu? pc ‚Ñì ‚ÑìÃÇ of Œª where
        (yes nsu-yes) ‚Üí step (assign?-ok (ref-is-value r) nsu-yes)
        (no  nsu-no)  ‚Üí step (assign?-fail (ref-is-value r) nsu-no)
  (err (E-error {e})) ‚Üí step (Œæ-err {F = assign?‚ñ° M p} {e = e})
progress pc (assign‚úì L M) (‚ä¢assign‚úì ‚ä¢L ‚ä¢M ‚Ñì‚âº‚ÑìÃÇ pc‚âº‚ÑìÃÇ) Œº ‚ä¢Œº =
  case progress pc L ‚ä¢L Œº ‚ä¢Œº of Œª where
  (step L‚ÜíL‚Ä≤) ‚Üí step (Œæ {F = assign‚úì‚ñ° M} L‚ÜíL‚Ä≤)
  (done v) ‚Üí
    case progress pc M ‚ä¢M Œº ‚ä¢Œº of Œª where
    (step M‚ÜíM‚Ä≤) ‚Üí step (Œæ {F = (assign‚úì L ‚ñ°) v} M‚ÜíM‚Ä≤)
    (done w) ‚Üí
      case canonical-ref ‚ä¢L v of Œª where
      (Ref-addr eq _) ‚Üí step (Œ≤-assign w)
      (Ref-proxy r i _) ‚Üí
        case i of Œª where
        (I-ref _ I-label I-label) ‚Üí step (assign-cast (ref-is-value r) w i)
    (err (E-error {e})) ‚Üí step (Œæ-err {F = (assign‚úì L ‚ñ°) v} {e = e})
  (err (E-error {e})) ‚Üí step (Œæ-err {F = assign‚úì‚ñ° M} {e = e})
progress pc (prot ‚Ñì M) (‚ä¢prot ‚ä¢M) Œº ‚ä¢Œº =
  case progress (pc ‚ãé ‚Ñì) M ‚ä¢M Œº ‚ä¢Œº of Œª where
  (step M‚ÜíN) ‚Üí step (prot-ctx M‚ÜíN)
  (done v) ‚Üí step (prot-val v)
  (err E-error) ‚Üí step prot-err
progress pc (M ‚ü® c ‚ü©) (‚ä¢cast ‚ä¢M) Œº ‚ä¢Œº =
  case progress pc M ‚ä¢M Œº ‚ä¢Œº of Œª where
  (step M‚ÜíM‚Ä≤) ‚Üí step (Œæ {F = ‚ñ°‚ü® c ‚ü©} M‚ÜíM‚Ä≤)
  (done v) ‚Üí
    case active-or-inert c of Œª where
    (inj‚ÇÅ a) ‚Üí
      case applycast-progress (‚ä¢value-pc ‚ä¢M v) v a of Œª where
      ‚ü® N , M‚ü®c‚ü©‚ÜùN ‚ü© ‚Üí step (cast v a M‚ü®c‚ü©‚ÜùN)
    (inj‚ÇÇ i) ‚Üí done (V-cast v i)
  (err (E-error {e})) ‚Üí step (Œæ-err {F = ‚ñ°‚ü® c ‚ü©} {e = e})
progress pc (cast-pc g M) (‚ä¢cast-pc ‚ä¢M pc~g) Œº ‚ä¢Œº =
  case progress pc M ‚ä¢M Œº ‚ä¢Œº of Œª where
  (step M‚ÜíN) ‚Üí step (Œæ {F = cast-pc g ‚ñ°} M‚ÜíN)
  (done v) ‚Üí step (Œ≤-cast-pc v)
  (err E-error) ‚Üí step (Œæ-err {F = cast-pc g ‚ñ°})
progress pc (blame e p) ‚ä¢blame Œº ‚ä¢Œº = err E-error
progress pc M (‚ä¢sub ‚ä¢M _) Œº ‚ä¢Œº = progress pc M ‚ä¢M Œº ‚ä¢Œº
progress pc M (‚ä¢sub-pc ‚ä¢M _) Œº ‚ä¢Œº = progress pc M ‚ä¢M Œº ‚ä¢Œº


preserve : ‚àÄ {Œ£ gc pc M M‚Ä≤ A Œº Œº‚Ä≤}
  ‚Üí [] Õæ Œ£ Õæ gc Õæ pc ‚ä¢ M ‚¶Ç A
  ‚Üí Œ£ ‚ä¢ Œº
  ‚Üí l pc ‚âæ gc
  ‚Üí M ‚à£ Œº ‚à£ pc ‚Äî‚Üí M‚Ä≤ ‚à£ Œº‚Ä≤
    ---------------------------------------------------------------
  ‚Üí ‚àÉ[ Œ£‚Ä≤ ] (Œ£‚Ä≤ ‚äá Œ£) √ó ([] Õæ Œ£‚Ä≤ Õæ gc Õæ pc ‚ä¢ M‚Ä≤ ‚¶Ç A) √ó (Œ£‚Ä≤ ‚ä¢ Œº‚Ä≤)
preserve ‚ä¢plug ‚ä¢Œº pc‚âægc (Œæ {F = F} M‚ÜíM‚Ä≤) =
  let ‚ü® gc‚Ä≤ , B , pc‚âægc‚Ä≤ , ‚ä¢M , wt-plug ‚ü© = plug-inversion ‚ä¢plug pc‚âægc
      ‚ü® Œ£‚Ä≤ , Œ£‚Ä≤‚äáŒ£ , ‚ä¢M‚Ä≤ , ‚ä¢Œº‚Ä≤ ‚ü©  = preserve ‚ä¢M ‚ä¢Œº pc‚âægc‚Ä≤ M‚ÜíM‚Ä≤ in
  ‚ü® Œ£‚Ä≤ , Œ£‚Ä≤‚äáŒ£ , wt-plug ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ , ‚ä¢Œº‚Ä≤ ‚ü©
preserve {Œ£} ‚ä¢M ‚ä¢Œº pc‚âægc Œæ-err = ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢err , ‚ä¢Œº ‚ü©
preserve {Œ£} (‚ä¢prot ‚ä¢V) ‚ä¢Œº pc‚âægc (prot-val v) =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢value-pc (stamp-val-wt ‚ä¢V v) (stamp-val-value v) , ‚ä¢Œº ‚ü©
preserve (‚ä¢prot ‚ä¢M) ‚ä¢Œº pc‚âægc (prot-ctx M‚ÜíM‚Ä≤) =
  let ‚ü® Œ£‚Ä≤ , Œ£‚Ä≤‚äáŒ£ , ‚ä¢M‚Ä≤ , ‚ä¢Œº‚Ä≤ ‚ü© = preserve ‚ä¢M ‚ä¢Œº (consis-join-‚âæ pc‚âægc ‚âæ-refl) M‚ÜíM‚Ä≤ in
  ‚ü® Œ£‚Ä≤ , Œ£‚Ä≤‚äáŒ£ , ‚ä¢prot ‚ä¢M‚Ä≤ , ‚ä¢Œº‚Ä≤ ‚ü©
preserve {Œ£} ‚ä¢M ‚ä¢Œº pc‚âægc prot-err = ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢err , ‚ä¢Œº ‚ü©
preserve {Œ£} (‚ä¢app ‚ä¢L ‚ä¢M pc‚Ä≤‚âº‚Ñì·∂ú ‚Ñì‚âº‚Ñì·∂ú) ‚ä¢Œº (‚âæ-l pc‚âºpc‚Ä≤) app-static =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢app‚úì ‚ä¢L ‚ä¢M (‚âº-trans pc‚âºpc‚Ä≤ pc‚Ä≤‚âº‚Ñì·∂ú) ‚Ñì‚âº‚Ñì·∂ú , ‚ä¢Œº ‚ü©
preserve {Œ£} (‚ä¢app‚úì ‚ä¢V ‚ä¢M pc‚âº‚Ñì·∂ú ‚Ñì‚âº‚Ñì·∂ú) ‚ä¢Œº pc‚âægc (Œ≤ v) =
  case canonical-fun ‚ä¢V V-∆õ of Œª where
  (Fun-∆õ ‚ä¢N (<:-ty ‚Ñì<:g (<:-fun gc‚ãég<:gc‚Ä≤ A<:A‚Ä≤ B‚Ä≤<:B))) ‚Üí
    -- let gc‚ãé‚Ñì<:gc‚ãég = consis-join-<:‚Çó <:‚Çó-refl ‚Ñì<:g
    --     gc‚ãé‚Ñì<:gc‚Ä≤  = <:‚Çó-trans gc‚ãé‚Ñì<:gc‚ãég {!!} {- gc‚ãég<:gc‚Ä≤ -} in
    ‚ü® Œ£ , ‚äá-refl Œ£ ,
      ‚ä¢sub (‚ä¢prot (substitution-pres (‚ä¢sub-pc ‚ä¢N {!!}) (‚ä¢value-pc (‚ä¢sub ‚ä¢M A<:A‚Ä≤) v)))
           (stamp-<: B‚Ä≤<:B ‚Ñì<:g) , ‚ä¢Œº ‚ü©
preserve {Œ£} (‚ä¢if ‚ä¢L ‚ä¢M ‚ä¢N) ‚ä¢Œº pc‚âægc (Œ≤-if-true {‚Ñì = ‚Ñì}) =
  case const-label-‚âº ‚ä¢L of Œª where
  ‚ü® ‚Ñì‚Ä≤ , refl , ‚Ñì‚âº‚Ñì‚Ä≤ ‚ü© ‚Üí
    let gc‚ãé‚Ñì<:gc‚ãé‚Ñì‚Ä≤ = consis-join-<:‚Çó <:‚Çó-refl (<:-l ‚Ñì‚âº‚Ñì‚Ä≤)
        A‚ãé‚Ñì<:A‚ãé‚Ñì‚Ä≤   = stamp-<: <:-refl (<:-l ‚Ñì‚âº‚Ñì‚Ä≤) in
    ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢sub (‚ä¢prot (‚ä¢sub-pc ‚ä¢M gc‚ãé‚Ñì<:gc‚ãé‚Ñì‚Ä≤)) A‚ãé‚Ñì<:A‚ãé‚Ñì‚Ä≤ , ‚ä¢Œº ‚ü©
preserve {Œ£} (‚ä¢if ‚ä¢L ‚ä¢M ‚ä¢N) ‚ä¢Œº pc‚âægc (Œ≤-if-false {‚Ñì = ‚Ñì}) =
  case const-label-‚âº ‚ä¢L of Œª where
  ‚ü® ‚Ñì‚Ä≤ , refl , ‚Ñì‚âº‚Ñì‚Ä≤ ‚ü© ‚Üí
    let gc‚ãé‚Ñì<:gc‚ãé‚Ñì‚Ä≤ = consis-join-<:‚Çó <:‚Çó-refl (<:-l ‚Ñì‚âº‚Ñì‚Ä≤)
        A‚ãé‚Ñì<:A‚ãé‚Ñì‚Ä≤   = stamp-<: <:-refl (<:-l ‚Ñì‚âº‚Ñì‚Ä≤) in
    ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢sub (‚ä¢prot (‚ä¢sub-pc ‚ä¢N gc‚ãé‚Ñì<:gc‚ãé‚Ñì‚Ä≤)) A‚ãé‚Ñì<:A‚ãé‚Ñì‚Ä≤ , ‚ä¢Œº ‚ü©
preserve {Œ£} (‚ä¢let ‚ä¢V ‚ä¢N) ‚ä¢Œº pc‚âægc (Œ≤-let v) =
  ‚ü® Œ£ , ‚äá-refl Œ£ , substitution-pres ‚ä¢N (‚ä¢value-pc ‚ä¢V v) , ‚ä¢Œº ‚ü©
preserve {Œ£} (‚ä¢ref ‚ä¢M pc‚Ä≤‚âº‚Ñì) ‚ä¢Œº (‚âæ-l pc‚âºpc‚Ä≤) ref-static =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢ref‚úì ‚ä¢M (‚âº-trans pc‚âºpc‚Ä≤ pc‚Ä≤‚âº‚Ñì) , ‚ä¢Œº ‚ü©
preserve {Œ£} (‚ä¢ref‚úì {T = T} {‚Ñì} ‚ä¢V pc‚âº‚Ñì) ‚ä¢Œº pc‚âægc (ref {n = n} {.‚Ñì} v fresh) =
  ‚ü® cons-Œ£ (a‚ü¶ ‚Ñì ‚üß n) T Œ£ , ‚äá-fresh (a‚ü¶ ‚Ñì ‚üß n) T ‚ä¢Œº fresh ,
    ‚ä¢addr (lookup-Œ£-cons (a‚ü¶ ‚Ñì ‚üß n) Œ£) , ‚ä¢Œº-new (‚ä¢value-pc ‚ä¢V v) v ‚ä¢Œº fresh ‚ü©
preserve {Œ£} (‚ä¢ref? ‚ä¢M) ‚ä¢Œº pc‚âægc (ref?-ok pc‚âº‚Ñì) =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢ref‚úì ‚ä¢M pc‚âº‚Ñì , ‚ä¢Œº ‚ü©
preserve {Œ£} (‚ä¢ref? ‚ä¢M) ‚ä¢Œº pc‚âægc (ref?-fail pc‚ã†‚Ñì) =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢err , ‚ä¢Œº ‚ü©
preserve {Œ£} (‚ä¢deref ‚ä¢a) ‚ä¢Œº pc‚âægc (deref {‚Ñì = ‚Ñì} {‚Ñì‚ÇÅ} eq) =
  case canonical-ref ‚ä¢a V-addr of Œª where
  (Ref-addr {n = n} {g = l ‚Ñì‚Ä≤} {‚Ñì‚ÇÅ = ‚Ñì‚ÇÅ} eq‚ÇÅ (<:-ty (<:-l ‚Ñì‚âº‚Ñì‚Ä≤) (<:-ref A‚Ä≤<:A A<:A‚Ä≤))) ‚Üí
    case <:-antisym A‚Ä≤<:A A<:A‚Ä≤ of Œª where
    refl ‚Üí
      let ‚ü® wf , V‚ÇÅ , v‚ÇÅ , eq‚Ä≤ , ‚ä¢V‚ÇÅ ‚ü© = ‚ä¢Œº n ‚Ñì‚ÇÅ eq‚ÇÅ in
      case trans (sym eq) eq‚Ä≤ of Œª where
      refl ‚Üí
        let leq : ‚Ñì‚ÇÅ ‚ãé (‚Ñì‚ÇÅ ‚ãé ‚Ñì) ‚âº ‚Ñì‚ÇÅ ‚ãé ‚Ñì‚Ä≤
            leq = subst (Œª ‚ñ° ‚Üí ‚ñ° ‚âº _) (sym ‚Ñì‚ÇÅ‚ãé[‚Ñì‚ÇÅ‚ãé‚Ñì]‚â°‚Ñì‚ÇÅ‚ãé‚Ñì) (join-‚âº‚Ä≤ ‚âº-refl ‚Ñì‚âº‚Ñì‚Ä≤) in
        ‚ü® Œ£ , ‚äá-refl Œ£ ,  ‚ä¢sub (‚ä¢prot (‚ä¢value-pc ‚ä¢V‚ÇÅ v‚ÇÅ)) (<:-ty (<:-l leq) <:·µ£-refl) , ‚ä¢Œº ‚ü©
preserve {Œ£} (‚ä¢assign ‚ä¢L ‚ä¢M ‚Ñì‚âº‚ÑìÃÇ pc‚Ä≤‚âº‚ÑìÃÇ) ‚ä¢Œº (‚âæ-l pc‚âºpc‚Ä≤) assign-static =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢assign‚úì ‚ä¢L ‚ä¢M ‚Ñì‚âº‚ÑìÃÇ (‚âº-trans pc‚âºpc‚Ä≤ pc‚Ä≤‚âº‚ÑìÃÇ) , ‚ä¢Œº ‚ü©
preserve {Œ£} (‚ä¢assign‚úì {‚Ñì = ‚Ñì‚Ä≤} ‚ä¢a ‚ä¢V _ pc‚âº‚Ñì‚Ä≤) ‚ä¢Œº pc‚âægc (Œ≤-assign {‚Ñì = ‚Ñì} {‚Ñì‚ÇÅ} v) =
 case canonical-ref ‚ä¢a V-addr of Œª where
 (Ref-addr eq (<:-ty (<:-l ‚Ñì‚âº‚Ñì‚Ä≤) (<:-ref A‚Ä≤<:A A<:A‚Ä≤))) ‚Üí
   case <:-antisym A‚Ä≤<:A A<:A‚Ä≤ of Œª where
   refl ‚Üí ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢const , ‚ä¢Œº-update (‚ä¢value-pc ‚ä¢V v) v ‚ä¢Œº eq ‚ü©
preserve {Œ£} (‚ä¢cast ‚ä¢V) ‚ä¢Œº pc‚âægc (cast v a V‚ü®c‚ü©‚ÜùM) =
  ‚ü® Œ£ , ‚äá-refl Œ£ , applycast-pres (‚ä¢value-pc ‚ä¢V v) v a V‚ü®c‚ü©‚ÜùM , ‚ä¢Œº ‚ü©
preserve {Œ£} {gc} {pc} (‚ä¢if {A = A} {L} {M} {N} ‚ä¢L ‚ä¢M ‚ä¢N) ‚ä¢Œº pc‚âægc (if-cast-true i) with i
... | (I-base-inj (cast (` Bool of l ‚Ñì‚Ä≤) (` Bool of ‚ãÜ) p _)) =
  case canonical-const ‚ä¢L (V-cast V-const i) of Œª where
  (Const-inj {‚Ñì = ‚Ñì} ‚Ñì‚âº‚Ñì‚Ä≤) ‚Üí
    let ‚ä¢M‚Ä† : [] Õæ Œ£ Õæ ‚ãÜ Õæ pc ‚ãé ‚Ñì ‚ä¢ M ‚¶Ç A
        ‚ä¢M‚Ä† = subst (Œª ‚ñ° ‚Üí [] Õæ Œ£ Õæ ‚ñ° Õæ pc ‚ãé ‚Ñì ‚ä¢ M ‚¶Ç A) g‚ãéÃÉ‚ãÜ‚â°‚ãÜ ‚ä¢M in
    let A‚ãé‚Ñì<:A‚ãé‚Ñì‚Ä≤ = stamp-<: <:-refl (<:-l ‚Ñì‚âº‚Ñì‚Ä≤) in
    ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢cast (‚ä¢sub (‚ä¢prot (‚ä¢cast-pc ‚ä¢M‚Ä† ~‚ãÜ)) A‚ãé‚Ñì<:A‚ãé‚Ñì‚Ä≤), ‚ä¢Œº ‚ü©
preserve {Œ£} {gc} {pc} (‚ä¢if {A = A} {L} {M} {N} ‚ä¢L ‚ä¢M ‚ä¢N) ‚ä¢Œº pc‚âægc (if-cast-false i) with i
... | (I-base-inj (cast (` Bool of l ‚Ñì‚Ä≤) (` Bool of ‚ãÜ) p _)) =
  case canonical-const ‚ä¢L (V-cast V-const i) of Œª where
  (Const-inj {‚Ñì = ‚Ñì} ‚Ñì‚âº‚Ñì‚Ä≤) ‚Üí
    let ‚ä¢N‚Ä† : [] Õæ Œ£ Õæ ‚ãÜ Õæ pc ‚ãé ‚Ñì ‚ä¢ N ‚¶Ç A
        ‚ä¢N‚Ä† = subst (Œª ‚ñ° ‚Üí [] Õæ Œ£ Õæ ‚ñ° Õæ pc ‚ãé ‚Ñì ‚ä¢ N ‚¶Ç A) g‚ãéÃÉ‚ãÜ‚â°‚ãÜ (‚ä¢N {pc ‚ãé ‚Ñì}) in
    let A‚ãé‚Ñì<:A‚ãé‚Ñì‚Ä≤ = stamp-<: <:-refl (<:-l ‚Ñì‚âº‚Ñì‚Ä≤) in
    ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢cast (‚ä¢sub (‚ä¢prot (‚ä¢cast-pc ‚ä¢N‚Ä† ~‚ãÜ)) A‚ãé‚Ñì<:A‚ãé‚Ñì‚Ä≤) , ‚ä¢Œº ‚ü©
-- preserve {Œ£} {gc} {pc} ‚ä¢M ‚ä¢Œº pc‚âægc (fun-cast {V} {W} {pc = pc} v w i) =
--   ‚ü® Œ£ , ‚äá-refl Œ£ , elim-fun-proxy-wt ‚ä¢M v w i , ‚ä¢Œº ‚ü©
preserve {Œ£} (‚ä¢deref {A = A‚Ä≤} ‚ä¢M) ‚ä¢Œº pc‚âægc (deref-cast v i) =
  case canonical-ref ‚ä¢M (V-cast v i) of Œª where
  (Ref-proxy r _ (<:-ty g‚ÇÇ<:g (<:-ref B<:A‚Ä≤ A‚Ä≤<:B))) ‚Üí
    case <:-antisym B<:A‚Ä≤ A‚Ä≤<:B of Œª where
    refl ‚Üí
      ‚ü® Œ£ , ‚äá-refl Œ£ ,
        ‚ä¢sub (‚ä¢cast (‚ä¢deref (ref-wt r))) (stamp-<: <:-refl g‚ÇÇ<:g) , ‚ä¢Œº ‚ü©
preserve {Œ£} {gc} {pc} (‚ä¢assign? ‚ä¢L ‚ä¢M) ‚ä¢Œº pc‚âægc (assign?-ok {c~ = c~} v ‚ü® pc‚âº‚ÑìÃÇ , ‚Ñì‚âº‚ÑìÃÇ ‚ü©) =
  case canonical-ref ‚ä¢L (V-cast v (I-ref _ I-label I-label)) of Œª where
  (Ref-proxy r _ (<:-ty g<:g‚Ä≤ (<:-ref A<:B B<:A))) ‚Üí
    case ‚ü® c~ , g<:g‚Ä≤ , <:-antisym A<:B B<:A ‚ü© of Œª where
    ‚ü® ~-ty ~‚ãÜ (~-ref (~-ty ~‚ãÜ _)) , <:-‚ãÜ , refl ‚ü© ‚Üí
      ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢assign‚úì (ref-wt r) (‚ä¢cast ‚ä¢M) ‚Ñì‚âº‚ÑìÃÇ pc‚âº‚ÑìÃÇ , ‚ä¢Œº ‚ü©
preserve {Œ£} {gc} {pc} (‚ä¢assign? ‚ä¢L ‚ä¢M) ‚ä¢Œº pc‚âægc (assign?-fail v nsu-no) =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢err , ‚ä¢Œº ‚ü©
preserve {Œ£} {gc} (‚ä¢assign‚úì ‚ä¢L ‚ä¢M ‚Ñì‚âº‚ÑìÃÇ pc‚Ä≤‚âº‚Ñì) ‚ä¢Œº pc‚âægc (assign-cast v w i)
  with i
... | I-ref (cast _ _ _ c~) I-label I-label =
  case canonical-ref ‚ä¢L (V-cast v i) of Œª where
  (Ref-proxy r _ (<:-ty ‚Ñì<:‚Ñì‚Ä≤ (<:-ref A<:B B<:A))) ‚Üí
    case ‚ü® c~ , <:-antisym A<:B B<:A ‚ü© of Œª where
    ‚ü® ~-ty l~ (~-ref (~-ty l~ _)) , refl ‚ü© ‚Üí
      ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢assign‚úì (‚ä¢sub (ref-wt r) (<:-ty ‚Ñì<:‚Ñì‚Ä≤ <:·µ£-refl)) (‚ä¢cast ‚ä¢M) ‚Ñì‚âº‚ÑìÃÇ pc‚Ä≤‚âº‚Ñì , ‚ä¢Œº ‚ü©
preserve {Œ£} (‚ä¢cast-pc ‚ä¢V _) ‚ä¢Œº pc‚âægc (Œ≤-cast-pc v) =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢value-pc ‚ä¢V v , ‚ä¢Œº ‚ü©
preserve (‚ä¢sub ‚ä¢M A<:B) ‚ä¢Œº pc‚âægc M‚ÜíM‚Ä≤ =
  let ‚ü® Œ£‚Ä≤ , Œ£‚Ä≤‚äáŒ£ , ‚ä¢M‚Ä≤ , ‚ä¢Œº‚Ä≤ ‚ü© = preserve ‚ä¢M ‚ä¢Œº pc‚âægc M‚ÜíM‚Ä≤ in
  ‚ü® Œ£‚Ä≤ , Œ£‚Ä≤‚äáŒ£ , ‚ä¢sub ‚ä¢M‚Ä≤ A<:B , ‚ä¢Œº‚Ä≤ ‚ü©
preserve (‚ä¢sub-pc ‚ä¢M gc<:gc‚Ä≤) ‚ä¢Œº pc‚âægc M‚ÜíM‚Ä≤ =
  let ‚ü® Œ£‚Ä≤ , Œ£‚Ä≤‚äáŒ£ , ‚ä¢M‚Ä≤ , ‚ä¢Œº‚Ä≤ ‚ü© = preserve ‚ä¢M ‚ä¢Œº (‚âæ-<: pc‚âægc gc<:gc‚Ä≤) M‚ÜíM‚Ä≤ in
  ‚ü® Œ£‚Ä≤ , Œ£‚Ä≤‚äáŒ£ , ‚ä¢sub-pc ‚ä¢M‚Ä≤ gc<:gc‚Ä≤ , ‚ä¢Œº‚Ä≤ ‚ü©
