open import Common.Types

module CC2.Syntax where

open import Data.List
open import Data.Bool renaming (Bool to ùîπ)

open import Syntax
open import Common.BlameLabels
open import Common.Coercions public
open import LabelExpr.LabelExpr
  renaming (blame to bl; Irreducible to Ir;
            Progress to Progress‚Çë; progress to progress‚Çë)
  hiding (_‚àé; _‚Äî‚Üí‚ü®_‚ü©_) public
open import Memory.Addr


data Op : Set where
  op-addr         : (n : RawAddr) ‚Üí Op
  op-lam          : Op
  op-app          : (A B : Type) ‚Üí (‚Ñì : StaticLabel) ‚Üí Op
  op-app!         : (A B : Type) ‚Üí Op
  op-const        : ‚àÄ {Œπ} (k : rep Œπ) ‚Üí Op
  op-if           : (A : Type) ‚Üí (‚Ñì : StaticLabel) ‚Üí Op
  op-if!          : (A : Type) ‚Üí (g :       Label) ‚Üí Op
  op-let          : (A : Type) ‚Üí Op
  op-ref          : (‚Ñì : StaticLabel) ‚Üí Op
  op-ref?         : (‚Ñì : StaticLabel) ‚Üí (p : BlameLabel) ‚Üí Op
  op-deref        : (A : Type) ‚Üí (g : Label) ‚Üí Op
  op-assign       : (T : RawType) ‚Üí (‚ÑìÃÇ ‚Ñì : StaticLabel) ‚Üí Op
  op-assign?      : (T : RawType) ‚Üí (gÃÇ g :       Label) ‚Üí BlameLabel ‚Üí Op
  op-cast         : ‚àÄ {A B} ‚Üí Cast A ‚áí B ‚Üí Op
  op-prot         : ‚àÄ (A : Type)
    ‚Üí (PC : LExpr) ‚Üí LResult PC
    ‚Üí (‚Ñì : StaticLabel) ‚Üí Op
  op-blame        : BlameLabel ‚Üí Op
  {- Terms that only appear in erasure -}
  op-opaque       : Op

sig : Op ‚Üí List Sig
sig (op-addr n)        = []
sig op-lam             = (ŒΩ ‚ñ†) ‚à∑ []
sig (op-app  A B ‚Ñì)    = ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig (op-app! A B)      = ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig (op-const k)       = []
sig (op-if  A ‚Ñì)       = ‚ñ† ‚à∑ ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig (op-if! A g)       = ‚ñ† ‚à∑ ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig (op-let A)         = ‚ñ† ‚à∑ (ŒΩ ‚ñ†) ‚à∑ []
sig (op-ref ‚Ñì)         = ‚ñ† ‚à∑ []
sig (op-ref? ‚Ñì p)      = ‚ñ† ‚à∑ []
sig (op-deref A g)     = ‚ñ† ‚à∑ []
sig (op-assign T ‚ÑìÃÇ ‚Ñì)  = ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig (op-assign? T gÃÇ g p) = ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig (op-cast c)        = ‚ñ† ‚à∑ []
sig (op-prot A PC r ‚Ñì)   = ‚ñ† ‚à∑ []
sig (op-blame p)       = []
sig op-opaque          = []

open Syntax.OpSig Op sig renaming (ABT to Term; plug to plug-abt; ‚ü™_‚ü´ to ‚¶Ö_‚¶Ü) public

infix 8 _‚ü®_‚ü©

pattern addr n             = (op-addr n) ‚¶Ö nil ‚¶Ü
pattern ∆õ N                = (op-lam) ‚¶Ö cons (bind (ast N)) nil ‚¶Ü
pattern app L M A B ‚Ñì      = (op-app A B ‚Ñì) ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü
pattern app! L M A B       = (op-app! A B) ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü
pattern $_ k               = (op-const k) ‚¶Ö nil ‚¶Ü
pattern if L A ‚Ñì M N       = (op-if A ‚Ñì) ‚¶Ö cons (ast L) (cons (ast M) (cons (ast N) nil)) ‚¶Ü
pattern if! L A g M N      = (op-if! A g) ‚¶Ö cons (ast L) (cons (ast M) (cons (ast N) nil)) ‚¶Ü
pattern `let M A N         = (op-let A) ‚¶Ö cons (ast M) (cons (bind (ast N)) nil) ‚¶Ü
pattern ref‚ü¶_‚üß ‚Ñì M         = (op-ref ‚Ñì) ‚¶Ö cons (ast M) nil ‚¶Ü
pattern ref?‚ü¶_‚üß ‚Ñì M p      = (op-ref? ‚Ñì p) ‚¶Ö cons (ast M) nil ‚¶Ü
pattern ! M A g            = (op-deref A g) ‚¶Ö cons (ast M) nil ‚¶Ü
pattern assign L M T ‚ÑìÃÇ ‚Ñì   = (op-assign T ‚ÑìÃÇ ‚Ñì) ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü
pattern assign? L M T gÃÇ g p = (op-assign? T gÃÇ g p) ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü
pattern _‚ü®_‚ü© M c           = (op-cast c) ‚¶Ö cons (ast M) nil ‚¶Ü
pattern prot PC r ‚Ñì M A    = (op-prot A PC r ‚Ñì) ‚¶Ö cons (ast M) nil ‚¶Ü
pattern blame p            = (op-blame p) ‚¶Ö nil ‚¶Ü
pattern ‚óè                 = op-opaque ‚¶Ö nil ‚¶Ü                     {- opaque value -}
