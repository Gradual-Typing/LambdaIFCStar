open import Common.Types

module CC2.Syntax (Cast_‚áí_ : Type ‚Üí Type ‚Üí Set) where

open import Data.List
open import Data.Bool renaming (Bool to ùîπ)

open import Syntax
open import Common.BlameLabels
open import Memory.Addr
open import CC2.Errors public


data Op : Set where
  op-addr         : (a : Addr) ‚Üí (‚Ñì : StaticLabel) ‚Üí Op
  op-lam          : (g : Label) ‚Üí Type ‚Üí (‚Ñì : StaticLabel) ‚Üí Op
  op-app          : Op
  op-app?         : BlameLabel ‚Üí Op
  op-app‚úì        : Op
  op-const        : ‚àÄ {Œπ} ‚Üí rep Œπ ‚Üí StaticLabel ‚Üí Op
  op-if           : Type ‚Üí Op
  op-if‚ãÜ          : Type ‚Üí Op
  op-let          : Op
  op-ref          : StaticLabel ‚Üí Op
  op-ref?         : StaticLabel ‚Üí BlameLabel ‚Üí Op
  op-ref‚úì        : StaticLabel ‚Üí Op
  op-deref        : Op
  op-assign       : Op
  op-assign?      : BlameLabel ‚Üí Op
  op-assign‚úì     : Op
  op-cast         : ‚àÄ {A B} ‚Üí Cast A ‚áí B ‚Üí Op
  op-prot         : Label ‚Üí StaticLabel ‚Üí Op
  op-blame        : Error ‚Üí BlameLabel ‚Üí Op
  {- Terms that only appear in erasure -}
  op-opaque       : Op

sig : Op ‚Üí List Sig
sig (op-addr a ‚Ñì)      = []
sig (op-lam g A ‚Ñì)     = (ŒΩ ‚ñ†) ‚à∑ []
sig op-app             = ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig (op-app? p)        = ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig op-app‚úì           = ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig (op-const k ‚Ñì)     = []
sig (op-if A)          = ‚ñ† ‚à∑ ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig (op-if‚ãÜ A)         = ‚ñ† ‚à∑ ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig op-let             = ‚ñ† ‚à∑ (ŒΩ ‚ñ†) ‚à∑ []
sig (op-ref  ‚Ñì)        = ‚ñ† ‚à∑ []
sig (op-ref? ‚Ñì p)      = ‚ñ† ‚à∑ []
sig (op-ref‚úì ‚Ñì)       = ‚ñ† ‚à∑ []
sig op-deref           = ‚ñ† ‚à∑ []
sig op-assign          = ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig (op-assign? p)     = ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig op-assign‚úì        = ‚ñ† ‚à∑ ‚ñ† ‚à∑ []
sig (op-cast c)        = ‚ñ† ‚à∑ []
sig (op-prot g ‚Ñì)      = ‚ñ† ‚à∑ []
sig (op-blame e p)     = []
sig op-opaque          = []

open Syntax.OpSig Op sig renaming (ABT to Term) hiding (plug) public

infix 8 _‚ü®_‚ü©

pattern addr_of_ a ‚Ñì             = (op-addr a ‚Ñì) ‚¶Ö nil ‚¶Ü
pattern ∆õ_,_Àô_of_ g A N ‚Ñì        = (op-lam g A ‚Ñì) ‚¶Ö cons (bind (ast N)) nil ‚¶Ü
pattern app L M                  = op-app ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü
pattern app? L M p               = (op-app? p) ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü
pattern app‚úì L M                = op-app‚úì ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü
pattern $_of_ k ‚Ñì                = (op-const k ‚Ñì) ‚¶Ö nil ‚¶Ü
pattern if L A M N               = (op-if A) ‚¶Ö cons (ast L) (cons (ast M) (cons (ast N) nil)) ‚¶Ü
pattern if‚ãÜ L A M N              = (op-if‚ãÜ A) ‚¶Ö cons (ast L) (cons (ast M) (cons (ast N) nil)) ‚¶Ü
pattern `let M N                 = op-let ‚¶Ö cons (ast M) (cons (bind (ast N)) nil) ‚¶Ü
pattern ref‚ü¶_‚üß ‚Ñì M               = (op-ref ‚Ñì) ‚¶Ö cons (ast M) nil ‚¶Ü
pattern ref?‚ü¶_‚üß ‚Ñì M p            = (op-ref? ‚Ñì p) ‚¶Ö cons (ast M) nil ‚¶Ü
pattern ref‚úì‚ü¶_‚üß ‚Ñì M             = (op-ref‚úì ‚Ñì) ‚¶Ö cons (ast M) nil ‚¶Ü
pattern !_ M                     = op-deref ‚¶Ö cons (ast M) nil ‚¶Ü
pattern assign  L M              = op-assign ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü
pattern assign? L M p            = (op-assign? p) ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü
pattern assign‚úì L M             = op-assign‚úì ‚¶Ö cons (ast L) (cons (ast M) nil) ‚¶Ü
pattern _‚ü®_‚ü© M c                 = (op-cast c) ‚¶Ö cons (ast M) nil ‚¶Ü
pattern prot g ‚Ñì M               = (op-prot g ‚Ñì) ‚¶Ö cons (ast M) nil ‚¶Ü    {- protection term -}
pattern blame e p                = (op-blame e p) ‚¶Ö nil ‚¶Ü                {- cast or NSU errors -}
pattern ‚óè                       = op-opaque ‚¶Ö nil ‚¶Ü                     {- opaque value -}
