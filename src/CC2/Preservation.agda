module CC2.Preservation where

open import Data.Nat
open import Data.Unit using (‚ä§; tt)
open import Data.Bool using (true; false) renaming (Bool to ùîπ)
open import Data.List
open import Data.Product using (_√ó_; ‚àÉ-syntax; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Maybe
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; trans; subst; sym)
open import Function using (case_of_)

open import Common.Utils
open import Common.Types
open import CC2.Statics
open import CC2.Reduction
open import CC2.HeapTyping

open import CC2.SubstPreserve using (substitution-pres)
open import LabelExpr.Security  {- reasoning about security levels of LExpr -}


{- Plug inversion -}
plug-inv : ‚àÄ {Œ£ gc ‚Ñìv M A} (F : Frame)
  ‚Üí [] Õæ Œ£ Õæ gc Õæ ‚Ñìv ‚ä¢ plug M F ‚áê A
    -------------------------------------------------------------
  ‚Üí ‚àÉ[ B ] ([] Õæ Œ£ Õæ gc Õæ ‚Ñìv ‚ä¢ M  ‚áê B) √ó
       (‚àÄ {Œ£‚Ä≤ M‚Ä≤} ‚Üí [] Õæ Œ£‚Ä≤ Õæ gc Õæ ‚Ñìv ‚ä¢ M‚Ä≤ ‚áê B
                  ‚Üí Œ£‚Ä≤ ‚äá Œ£
                  ‚Üí [] Õæ Œ£‚Ä≤ Õæ gc Õæ ‚Ñìv ‚ä¢ plug M‚Ä≤ F ‚áê A)
plug-inv (app‚ñ° M A B _) (‚ä¢app ‚ä¢L ‚ä¢M eq) =
  ‚ü® _ , ‚ä¢L , (Œª ‚ä¢L‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢app ‚ä¢L‚Ä≤ (relax-Œ£ ‚ä¢M Œ£‚Ä≤‚äáŒ£) eq) ‚ü©
plug-inv (app V ‚ñ° x A B _) (‚ä¢app ‚ä¢L ‚ä¢M eq) =
  ‚ü® _ , ‚ä¢M , (Œª ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢app (relax-Œ£ ‚ä¢L Œ£‚Ä≤‚äáŒ£) ‚ä¢M‚Ä≤ eq) ‚ü©
plug-inv (app!‚ñ° M A B) (‚ä¢app! ‚ä¢L ‚ä¢M eq) =
  ‚ü® _ , ‚ä¢L , (Œª ‚ä¢L‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢app! ‚ä¢L‚Ä≤ (relax-Œ£ ‚ä¢M Œ£‚Ä≤‚äáŒ£) eq) ‚ü©
plug-inv (app! V ‚ñ° x A B) (‚ä¢app! ‚ä¢L ‚ä¢M eq) =
  ‚ü® _ , ‚ä¢M , (Œª ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢app! (relax-Œ£ ‚ä¢L Œ£‚Ä≤‚äáŒ£) ‚ä¢M‚Ä≤ eq) ‚ü©
plug-inv ref‚ü¶ ‚Ñì ‚üß‚ñ° (‚ä¢ref ‚ä¢M x) =
  ‚ü® _ , ‚ä¢M , (Œª ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢ref ‚ä¢M‚Ä≤ x) ‚ü©
plug-inv (ref?‚ü¶ ‚Ñì ‚üß‚ñ° p) (‚ä¢ref? ‚ä¢M) =
  ‚ü® _ , ‚ä¢M , (Œª ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢ref? ‚ä¢M‚Ä≤) ‚ü©
plug-inv (!‚ñ° A g) (‚ä¢deref ‚ä¢M eq) =
  ‚ü® _ , ‚ä¢M , (Œª ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢deref ‚ä¢M‚Ä≤ eq) ‚ü©
plug-inv (assign‚ñ° M _ ‚ÑìÃÇ ‚Ñì) (‚ä¢assign ‚ä¢L ‚ä¢M x y) =
  ‚ü® _ , ‚ä¢L , (Œª ‚ä¢L‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢assign ‚ä¢L‚Ä≤ (relax-Œ£ ‚ä¢M Œ£‚Ä≤‚äáŒ£) x y) ‚ü©
plug-inv (assign V ‚ñ° _ _ ‚ÑìÃÇ ‚Ñì) (‚ä¢assign ‚ä¢L ‚ä¢M x y) =
  ‚ü® _ , ‚ä¢M , (Œª ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢assign (relax-Œ£ ‚ä¢L Œ£‚Ä≤‚äáŒ£) ‚ä¢M‚Ä≤ x y) ‚ü©
plug-inv (assign?‚ñ° M x gÃÇ g x‚ÇÅ) (‚ä¢assign? ‚ä¢L ‚ä¢M) =
  ‚ü® _ , ‚ä¢L , (Œª ‚ä¢L‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢assign? ‚ä¢L‚Ä≤ (relax-Œ£ ‚ä¢M Œ£‚Ä≤‚äáŒ£)) ‚ü©
plug-inv (assign? V ‚ñ° x x‚ÇÅ gÃÇ g x‚ÇÇ) (‚ä¢assign? ‚ä¢L ‚ä¢M) =
  ‚ü® _ , ‚ä¢M , (Œª ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢assign? (relax-Œ£ ‚ä¢L Œ£‚Ä≤‚äáŒ£) ‚ä¢M‚Ä≤) ‚ü©
plug-inv (let‚ñ° _ _) (‚ä¢let ‚ä¢M ‚ä¢N) =
  ‚ü® _ , ‚ä¢M , (Œª ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢let ‚ä¢M‚Ä≤ (relax-Œ£ ‚ä¢N Œ£‚Ä≤‚äáŒ£)) ‚ü©
plug-inv (if‚ñ° _ _ M N) (‚ä¢if ‚ä¢L ‚ä¢M ‚ä¢N eq) =
  ‚ü® _ , ‚ä¢L , (Œª ‚ä¢L‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢if ‚ä¢L‚Ä≤ (relax-Œ£ ‚ä¢M Œ£‚Ä≤‚äáŒ£) (relax-Œ£ ‚ä¢N Œ£‚Ä≤‚äáŒ£) eq) ‚ü©
plug-inv (if!‚ñ° _ M N) (‚ä¢if! ‚ä¢L ‚ä¢M ‚ä¢N eq) =
  ‚ü® _ , ‚ä¢L , (Œª ‚ä¢L‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢if! ‚ä¢L‚Ä≤ (relax-Œ£ ‚ä¢M Œ£‚Ä≤‚äáŒ£) (relax-Œ£ ‚ä¢N Œ£‚Ä≤‚äáŒ£) eq) ‚ü©
plug-inv ‚ñ°‚ü® c ‚ü© (‚ä¢cast ‚ä¢M) =
  ‚ü® _ , ‚ä¢M , (Œª ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢cast ‚ä¢M‚Ä≤) ‚ü©


pres : ‚àÄ {Œ£ gc A} {PC M N Œº Œº‚Ä≤}
  ‚Üí (vc : LVal PC)
  ‚Üí ‚ä¢ PC ‚áê gc
  ‚Üí let ‚Ñìv = ‚à• PC ‚à• vc in
     [] Õæ Œ£ Õæ gc Õæ ‚Ñìv ‚ä¢ M ‚áê A
  ‚Üí Œ£ ‚ä¢ Œº
  ‚Üí M ‚à£ Œº ‚à£ PC ‚Äî‚Üí N ‚à£ Œº‚Ä≤
    ------------------------------------------
  ‚Üí ‚àÉ[ Œ£‚Ä≤ ] (Œ£‚Ä≤ ‚äá Œ£) √ó ([] Õæ Œ£‚Ä≤ Õæ gc Õæ ‚Ñìv ‚ä¢ N ‚áê A) √ó (Œ£‚Ä≤ ‚ä¢ Œº‚Ä≤)
pres vc ‚ä¢PC ‚ä¢plug ‚ä¢Œº (Œæ {F = F} M‚ÜíN) =
  let ‚ü® B , ‚ä¢M , wt-plug ‚ü© = plug-inv F ‚ä¢plug
      ‚ü® Œ£‚Ä≤ , Œ£‚Ä≤‚äáŒ£ , ‚ä¢M‚Ä≤ , ‚ä¢Œº‚Ä≤ ‚ü©  = pres vc ‚ä¢PC ‚ä¢M ‚ä¢Œº M‚ÜíN in
  ‚ü® Œ£‚Ä≤ , Œ£‚Ä≤‚äáŒ£ , wt-plug ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ , ‚ä¢Œº‚Ä≤ ‚ü©
pres {Œ£} vc ‚ä¢PC ‚ä¢M ‚ä¢Œº Œæ-blame = ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢blame , ‚ä¢Œº ‚ü©
{- Protection -}
pres vc ‚ä¢PC (‚ä¢prot {v = vc‚Ä≤} ‚ä¢M ‚ä¢PC‚Ä≤ x eq) ‚ä¢Œº (prot-ctx M‚ÜíN) =
  let ‚ü® Œ£‚Ä≤ , Œ£‚Ä≤‚äáŒ£ , ‚ä¢M‚Ä≤ , ‚ä¢Œº‚Ä≤ ‚ü©  = pres vc‚Ä≤ ‚ä¢PC‚Ä≤ ‚ä¢M ‚ä¢Œº M‚ÜíN in
  ‚ü® Œ£‚Ä≤ , Œ£‚Ä≤‚äáŒ£ , ‚ä¢prot ‚ä¢M‚Ä≤ ‚ä¢PC‚Ä≤ x eq , ‚ä¢Œº‚Ä≤ ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢prot ‚ä¢V ‚ä¢PC‚Ä≤ x refl) ‚ä¢Œº (prot-val v) =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢value-pc (stamp-val-wt v ‚ä¢V) (stamp-val-value v ‚ä¢V) , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC ‚ä¢M ‚ä¢Œº prot-blame = ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢blame , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC ‚ä¢M ‚ä¢Œº prot-blame-pc = ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢blame , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC ‚ä¢V‚ü®c‚ü© ‚ä¢Œº (cast v V‚ü®c‚ü©‚ÜíM) =
  ‚ü® Œ£ , ‚äá-refl Œ£ , cast-pres ‚ä¢V‚ü®c‚ü© V‚ü®c‚ü©‚ÜíM , ‚ä¢Œº ‚ü©
{- Application -}
pres {Œ£} vc ‚ä¢PC (‚ä¢app (‚ä¢lam ‚ä¢N) ‚ä¢V eq) ‚ä¢Œº (Œ≤ v vc‚Ä†)
  rewrite uniq-LVal vc vc‚Ä† =
  ‚ü® Œ£ , ‚äá-refl Œ£ ,
    ‚ä¢prot (substitution-pres ‚ä¢N (‚ä¢value-pc ‚ä¢V v))
          (stamp‚Çë-wt vc‚Ä† ‚ä¢PC)
          (‚â°‚Üí‚âº (stamp‚Çë-security vc‚Ä†)) eq , ‚ä¢Œº ‚ü©
pres {Œ£} {gc} {A} {PC} vc ‚ä¢PC (‚ä¢app {‚Ñì = ‚Ñì} (‚ä¢cast (‚ä¢lam ‚ä¢N)) ‚ä¢V eq) ‚ä¢Œº
                              (app-cast v vc‚Ä† ùìã ‚Ü†PC‚Ä≤ (success vc‚Ä≤) ‚Ü†W w)
  rewrite uniq-LVal vc vc‚Ä† =
  ‚ü® Œ£ , ‚äá-refl Œ£ ,
    ‚ä¢prot (‚ä¢cast (substitution-pres ‚ä¢N (‚ä¢value-pc (cast-pres-mult (‚ä¢cast ‚ä¢V) ‚Ü†W) w)))
          (preserve-mult (‚ä¢cast (stamp‚Çë-wt vc‚Ä† ‚ä¢PC)) ‚Ü†PC‚Ä≤)
          (stamp-cast-security vc‚Ä† ‚ä¢PC ‚Ü†PC‚Ä≤ vc‚Ä≤) eq , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢app (‚ä¢cast (‚ä¢lam ‚ä¢N)) ‚ä¢V eq) ‚ä¢Œº (app-cast v vc‚Ä† ùìã ‚Ü†PC‚Ä≤ fail ‚Ü†W w) =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢prot-blame-pc , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢app (‚ä¢cast (‚ä¢lam ‚ä¢N)) ‚ä¢V eq) ‚ä¢Œº (app-blame v ùìã ‚Ü†blame) =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢blame , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢app! (‚ä¢cast (‚ä¢lam ‚ä¢N)) ‚ä¢V eq) ‚ä¢Œº (app!-cast v vc‚Ä† ùìã ‚ä¢PC‚Ä† ‚Ü†PC‚Ä≤ (success vc‚Ä≤) ‚Ü†W w)
  rewrite eq | uniq-LVal vc vc‚Ä† =
  ‚ü® Œ£ , ‚äá-refl Œ£ ,
    ‚ä¢cast (‚ä¢prot (‚ä¢cast (substitution-pres ‚ä¢N (‚ä¢value-pc (cast-pres-mult (‚ä¢cast ‚ä¢V) ‚Ü†W) w)))
                 (preserve-mult (‚ä¢cast (‚ä¢cast (stamp‚Çë-wt vc‚Ä† ‚ä¢PC‚Ä†))) ‚Ü†PC‚Ä≤)
                 (stamp‚áí‚ãÜ-cast-security vc‚Ä† ‚ä¢PC‚Ä† ‚Ü†PC‚Ä≤ vc‚Ä≤) refl) , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢app! (‚ä¢cast (‚ä¢lam ‚ä¢N)) ‚ä¢V eq) ‚ä¢Œº (app!-cast v vc‚Ä† ùìã ‚ä¢PC‚Ä† ‚Ü†PC‚Ä≤ fail ‚Ü†W w)
  rewrite eq =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢cast ‚ä¢prot-blame-pc , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢app! (‚ä¢cast (‚ä¢lam ‚ä¢N)) ‚ä¢V eq) ‚ä¢Œº (app!-blame v ùìã ‚Ü†blame) =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢blame , ‚ä¢Œº ‚ü©
{- If -}
pres {Œ£} vc ‚ä¢PC (‚ä¢if! (‚ä¢cast ‚ä¢const) ‚ä¢M ‚ä¢N eq) ‚ä¢Œº
                (if!-true-cast vc‚Ä† ùìã ‚ä¢PC‚Ä† ‚Ü†PC‚Ä≤ (success vc‚Ä≤))
  rewrite eq | uniq-LVal vc vc‚Ä† =
  ‚ü® Œ£ , ‚äá-refl Œ£ ,
    ‚ä¢cast (‚ä¢prot ‚ä¢M (preserve-mult (‚ä¢cast (stamp‚Çë-wt vc‚Ä† ‚ä¢PC‚Ä†)) ‚Ü†PC‚Ä≤)
                 (‚â°‚Üí‚âº (stamp‚áí‚ãÜ-security vc‚Ä† ‚ä¢PC‚Ä† ‚Ü†PC‚Ä≤ vc‚Ä≤)) refl), ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢if! (‚ä¢cast ‚ä¢const) ‚ä¢M ‚ä¢N eq) ‚ä¢Œº
                (if!-true-cast vc‚Ä† ùìã ‚ä¢PC‚Ä† ‚Ü†PC‚Ä≤ fail)
  rewrite eq =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢cast ‚ä¢prot-blame-pc , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢if! (‚ä¢cast ‚ä¢const) ‚ä¢M ‚ä¢N eq) ‚ä¢Œº
                (if!-false-cast vc‚Ä† ùìã ‚ä¢PC‚Ä† ‚Ü†PC‚Ä≤ (success vc‚Ä≤))
  rewrite eq | uniq-LVal vc vc‚Ä† =
  ‚ü® Œ£ , ‚äá-refl Œ£ ,
    ‚ä¢cast (‚ä¢prot ‚ä¢N (preserve-mult (‚ä¢cast (stamp‚Çë-wt vc‚Ä† ‚ä¢PC‚Ä†)) ‚Ü†PC‚Ä≤)
                 (‚â°‚Üí‚âº (stamp‚áí‚ãÜ-security vc‚Ä† ‚ä¢PC‚Ä† ‚Ü†PC‚Ä≤ vc‚Ä≤)) refl), ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢if! (‚ä¢cast ‚ä¢const) ‚ä¢M ‚ä¢N eq) ‚ä¢Œº
                (if!-false-cast vc‚Ä† ùìã ‚ä¢PC‚Ä† ‚Ü†PC‚Ä≤ fail)
  rewrite eq =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢cast ‚ä¢prot-blame-pc , ‚ä¢Œº ‚ü©
pres vc ‚ä¢PC ‚ä¢M _ _ = {!!}
-- pres vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (Œ≤-if-true v) = {!!}
-- pres vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (Œ≤-if-false v) = {!!}
-- pres vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (if-true-cast v) = {!!}
-- pres vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (if-false-cast v) = {!!}
-- pres vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (Œ≤-let x) = {!!}
-- pres vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (ref v x) = {!!}
-- pres vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (ref? v x x‚ÇÅ x‚ÇÇ) = {!!}
-- pres vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (ref?-blame v x) = {!!}
-- pres vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (deref x) = {!!}
-- pres vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (deref-cast ùìã x) = {!!}
-- pres vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (Œ≤-assign v) = {!!}
-- pres vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (assign-cast v ùìã x w) = {!!}
-- pres vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (assign-blame v ùìã x) = {!!}
-- pres vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (Œ≤-assign? v vc‚ÇÅ x x‚ÇÅ x‚ÇÇ) = {!!}
-- pres vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (assign?-blame v vc‚ÇÅ x x‚ÇÅ) = {!!}
-- pres vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (assign?-cast v vc‚ÇÅ ùìã x x‚ÇÅ x‚ÇÇ x‚ÇÉ w) = {!!}
-- pres vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (assign?-cast-blame-pc v vc‚ÇÅ ùìã x x‚ÇÅ) = {!!}
-- pres vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (assign?-cast-blame v vc‚ÇÅ ùìã x x‚ÇÅ x‚ÇÇ x‚ÇÉ) = {!!}
