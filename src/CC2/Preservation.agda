module CC2.Preservation where

open import Data.Nat
open import Data.Unit using (‚ä§; tt)
open import Data.Bool using (true; false) renaming (Bool to ùîπ)
open import Data.List
open import Data.Product using (_√ó_; ‚àÉ-syntax; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Maybe
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl; trans; subst; sym)
open import Function using (case_of_)

open import Common.Utils
open import Common.Types
open import LabelExpr.Stamping
open import LabelExpr.Security  {- reasoning about security levels of LExpr -}
open import CC2.Statics
open import CC2.Reduction
open import CC2.Stamping
open import CC2.HeapTyping                              public
open import CC2.SubstPreserve using (substitution-pres) public



{- Plug inversion -}
plug-inv : ‚àÄ {Œ£ gc ‚Ñìv M A} (F : Frame)
  ‚Üí [] Õæ Œ£ Õæ gc Õæ ‚Ñìv ‚ä¢ plug M F ‚áê A
    -------------------------------------------------------------
  ‚Üí ‚àÉ[ B ] ([] Õæ Œ£ Õæ gc Õæ ‚Ñìv ‚ä¢ M  ‚áê B) √ó
       (‚àÄ {Œ£‚Ä≤ M‚Ä≤} ‚Üí [] Õæ Œ£‚Ä≤ Õæ gc Õæ ‚Ñìv ‚ä¢ M‚Ä≤ ‚áê B
                  ‚Üí Œ£‚Ä≤ ‚äá Œ£
                  ‚Üí [] Õæ Œ£‚Ä≤ Õæ gc Õæ ‚Ñìv ‚ä¢ plug M‚Ä≤ F ‚áê A)
plug-inv (app‚ñ° M A B _) (‚ä¢app ‚ä¢L ‚ä¢M eq) =
  ‚ü® _ , ‚ä¢L , (Œª ‚ä¢L‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢app ‚ä¢L‚Ä≤ (relax-Œ£ ‚ä¢M Œ£‚Ä≤‚äáŒ£) eq) ‚ü©
plug-inv (app V ‚ñ° x A B _) (‚ä¢app ‚ä¢L ‚ä¢M eq) =
  ‚ü® _ , ‚ä¢M , (Œª ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢app (relax-Œ£ ‚ä¢L Œ£‚Ä≤‚äáŒ£) ‚ä¢M‚Ä≤ eq) ‚ü©
plug-inv (app‚ãÜ‚ñ° M A B) (‚ä¢app‚ãÜ ‚ä¢L ‚ä¢M) =
  ‚ü® _ , ‚ä¢L , (Œª ‚ä¢L‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢app‚ãÜ ‚ä¢L‚Ä≤ (relax-Œ£ ‚ä¢M Œ£‚Ä≤‚äáŒ£)) ‚ü©
plug-inv (app‚ãÜ V ‚ñ° x A B) (‚ä¢app‚ãÜ ‚ä¢L ‚ä¢M) =
  ‚ü® _ , ‚ä¢M , (Œª ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢app‚ãÜ (relax-Œ£ ‚ä¢L Œ£‚Ä≤‚äáŒ£) ‚ä¢M‚Ä≤) ‚ü©
plug-inv ref‚ü¶ ‚Ñì ‚üß‚ñ° (‚ä¢ref ‚ä¢M x) =
  ‚ü® _ , ‚ä¢M , (Œª ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢ref ‚ä¢M‚Ä≤ x) ‚ü©
plug-inv (ref?‚ü¶ ‚Ñì ‚üß‚ñ° p) (‚ä¢ref? ‚ä¢M) =
  ‚ü® _ , ‚ä¢M , (Œª ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢ref? ‚ä¢M‚Ä≤) ‚ü©
plug-inv (!‚ñ° A g) (‚ä¢deref ‚ä¢M eq) =
  ‚ü® _ , ‚ä¢M , (Œª ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢deref ‚ä¢M‚Ä≤ eq) ‚ü©
plug-inv (!‚ãÜ‚ñ° A) (‚ä¢deref‚ãÜ ‚ä¢M) =
  ‚ü® _ , ‚ä¢M , (Œª ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢deref‚ãÜ ‚ä¢M‚Ä≤) ‚ü©
plug-inv (assign‚ñ° M _ ‚ÑìÃÇ ‚Ñì) (‚ä¢assign ‚ä¢L ‚ä¢M x y) =
  ‚ü® _ , ‚ä¢L , (Œª ‚ä¢L‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢assign ‚ä¢L‚Ä≤ (relax-Œ£ ‚ä¢M Œ£‚Ä≤‚äáŒ£) x y) ‚ü©
plug-inv (assign V ‚ñ° _ _ ‚ÑìÃÇ ‚Ñì) (‚ä¢assign ‚ä¢L ‚ä¢M x y) =
  ‚ü® _ , ‚ä¢M , (Œª ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢assign (relax-Œ£ ‚ä¢L Œ£‚Ä≤‚äáŒ£) ‚ä¢M‚Ä≤ x y) ‚ü©
plug-inv (assign?‚ñ° M x gÃÇ p) (‚ä¢assign? ‚ä¢L ‚ä¢M) =
  ‚ü® _ , ‚ä¢L , (Œª ‚ä¢L‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢assign? ‚ä¢L‚Ä≤ (relax-Œ£ ‚ä¢M Œ£‚Ä≤‚äáŒ£)) ‚ü©
plug-inv (assign? V ‚ñ° x x‚ÇÅ gÃÇ p) (‚ä¢assign? ‚ä¢L ‚ä¢M) =
  ‚ü® _ , ‚ä¢M , (Œª ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢assign? (relax-Œ£ ‚ä¢L Œ£‚Ä≤‚äáŒ£) ‚ä¢M‚Ä≤) ‚ü©
plug-inv (let‚ñ° _ _) (‚ä¢let ‚ä¢M ‚ä¢N) =
  ‚ü® _ , ‚ä¢M , (Œª ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢let ‚ä¢M‚Ä≤ (relax-Œ£ ‚ä¢N Œ£‚Ä≤‚äáŒ£)) ‚ü©
plug-inv (if‚ñ° _ _ M N) (‚ä¢if ‚ä¢L ‚ä¢M ‚ä¢N eq) =
  ‚ü® _ , ‚ä¢L , (Œª ‚ä¢L‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢if ‚ä¢L‚Ä≤ (relax-Œ£ ‚ä¢M Œ£‚Ä≤‚äáŒ£) (relax-Œ£ ‚ä¢N Œ£‚Ä≤‚äáŒ£) eq) ‚ü©
plug-inv (if‚ãÜ‚ñ° _ M N) (‚ä¢if‚ãÜ ‚ä¢L ‚ä¢M ‚ä¢N) =
  ‚ü® _ , ‚ä¢L , (Œª ‚ä¢L‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢if‚ãÜ ‚ä¢L‚Ä≤ (relax-Œ£ ‚ä¢M Œ£‚Ä≤‚äáŒ£) (relax-Œ£ ‚ä¢N Œ£‚Ä≤‚äáŒ£)) ‚ü©
plug-inv ‚ñ°‚ü® c ‚ü© (‚ä¢cast ‚ä¢M) =
  ‚ü® _ , ‚ä¢M , (Œª ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ ‚Üí ‚ä¢cast ‚ä¢M‚Ä≤) ‚ü©


pres : ‚àÄ {Œ£ gc A} {PC M N Œº Œº‚Ä≤}
  ‚Üí (vc : LVal PC)
  ‚Üí ‚ä¢ PC ‚áê gc
  ‚Üí let ‚Ñìv = ‚à• PC ‚à• vc in
     [] Õæ Œ£ Õæ gc Õæ ‚Ñìv ‚ä¢ M ‚áê A
  ‚Üí Œ£ ‚ä¢ Œº
  ‚Üí M ‚à£ Œº ‚à£ PC ‚Äî‚Üí N ‚à£ Œº‚Ä≤
    ------------------------------------------
  ‚Üí ‚àÉ[ Œ£‚Ä≤ ] (Œ£‚Ä≤ ‚äá Œ£) √ó ([] Õæ Œ£‚Ä≤ Õæ gc Õæ ‚Ñìv ‚ä¢ N ‚áê A) √ó (Œ£‚Ä≤ ‚ä¢ Œº‚Ä≤)
pres vc ‚ä¢PC ‚ä¢plug ‚ä¢Œº (Œæ {F = F} M‚ÜíN) =
  let ‚ü® B , ‚ä¢M , wt-plug ‚ü© = plug-inv F ‚ä¢plug
      ‚ü® Œ£‚Ä≤ , Œ£‚Ä≤‚äáŒ£ , ‚ä¢M‚Ä≤ , ‚ä¢Œº‚Ä≤ ‚ü©  = pres vc ‚ä¢PC ‚ä¢M ‚ä¢Œº M‚ÜíN in
  ‚ü® Œ£‚Ä≤ , Œ£‚Ä≤‚äáŒ£ , wt-plug ‚ä¢M‚Ä≤ Œ£‚Ä≤‚äáŒ£ , ‚ä¢Œº‚Ä≤ ‚ü©
pres {Œ£} vc ‚ä¢PC ‚ä¢M ‚ä¢Œº Œæ-blame = ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢blame , ‚ä¢Œº ‚ü©
{- Protection -}
pres vc ‚ä¢PC (‚ä¢prot {vc = vc‚Ä≤} ‚ä¢M ‚ä¢PC‚Ä≤ x eq) ‚ä¢Œº (prot-ctx M‚ÜíN) =
  let ‚ü® Œ£‚Ä≤ , Œ£‚Ä≤‚äáŒ£ , ‚ä¢M‚Ä≤ , ‚ä¢Œº‚Ä≤ ‚ü©  = pres vc‚Ä≤ ‚ä¢PC‚Ä≤ ‚ä¢M ‚ä¢Œº M‚ÜíN in
  ‚ü® Œ£‚Ä≤ , Œ£‚Ä≤‚äáŒ£ , ‚ä¢prot ‚ä¢M‚Ä≤ ‚ä¢PC‚Ä≤ x eq , ‚ä¢Œº‚Ä≤ ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢prot ‚ä¢V ‚ä¢PC‚Ä≤ x refl) ‚ä¢Œº (prot-val v) =
  ‚ü® Œ£ , ‚äá-refl Œ£ , stamp-val-wt v (‚ä¢value-pc ‚ä¢V v) , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC ‚ä¢M ‚ä¢Œº prot-blame = ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢blame , ‚ä¢Œº ‚ü©
{- Casting -}
pres {Œ£} vc ‚ä¢PC ‚ä¢V‚ü®c‚ü© ‚ä¢Œº (cast v V‚ü®c‚ü©‚ÜíM) =
  ‚ü® Œ£ , ‚äá-refl Œ£ , cast-pres ‚ä¢V‚ü®c‚ü© V‚ü®c‚ü©‚ÜíM , ‚ä¢Œº ‚ü©
{- Application -}
pres {Œ£} vc ‚ä¢PC (‚ä¢app (‚ä¢lam ‚ä¢N) ‚ä¢V eq) ‚ä¢Œº (Œ≤ v vc‚Ä†)
  rewrite uniq-LVal vc vc‚Ä† =
  ‚ü® Œ£ , ‚äá-refl Œ£ ,
    ‚ä¢prot (substitution-pres ‚ä¢N (‚ä¢value-pc ‚ä¢V v))
          (stamp‚Çë-wt vc‚Ä† ‚ä¢PC)
          (‚â°‚Üí‚âº (stamp‚Çë-security vc‚Ä†)) eq , ‚ä¢Œº ‚ü©
pres {Œ£} {gc} {A} {PC} vc ‚ä¢PC (‚ä¢app {‚Ñì = ‚Ñì} (‚ä¢cast (‚ä¢lam ‚ä¢N)) ‚ä¢V eq) ‚ä¢Œº
                              (app-cast v vc‚Ä† ùìã ‚Ü†PC‚Ä≤ vc‚Ä≤ ‚Ü†W w)
  rewrite uniq-LVal vc vc‚Ä† =
  ‚ü® Œ£ , ‚äá-refl Œ£ ,
    ‚ä¢prot (‚ä¢cast (substitution-pres ‚ä¢N (‚ä¢value-pc (cast-pres-mult (‚ä¢cast ‚ä¢V) ‚Ü†W) w)))
          (preserve-mult (‚ä¢cast (stamp‚Çë-wt vc‚Ä† ‚ä¢PC)) ‚Ü†PC‚Ä≤)
          (stamp-cast-security vc‚Ä† ‚ä¢PC ‚Ü†PC‚Ä≤ vc‚Ä≤) eq , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢app (‚ä¢cast (‚ä¢lam ‚ä¢N)) ‚ä¢V eq) ‚ä¢Œº (app-blame-pc v vc‚Ä† ùìã ‚Ü†PC‚Ä≤) =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢blame , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢app (‚ä¢cast (‚ä¢lam ‚ä¢N)) ‚ä¢V eq) ‚ä¢Œº (app-blame v vc‚Ä† ùìã ‚Ü†PC‚Ä≤ vc‚Ä≤ ‚Ü†blame) =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢blame , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢app‚ãÜ (‚ä¢cast (‚ä¢lam ‚ä¢N)) ‚ä¢V) ‚ä¢Œº (app‚ãÜ-cast v vc‚Ä† ùìã ‚Ü†PC‚Ä≤ vc‚Ä≤ ‚Ü†W w)
  rewrite uniq-LVal vc vc‚Ä† =
  ‚ü® Œ£ , ‚äá-refl Œ£ ,
    ‚ä¢prot (‚ä¢cast (substitution-pres ‚ä¢N (‚ä¢value-pc (cast-pres-mult (‚ä¢cast ‚ä¢V) ‚Ü†W) w)))
                 (preserve-mult (‚ä¢cast (stamp!‚Çë-wt vc‚Ä† ‚ä¢PC)) ‚Ü†PC‚Ä≤)
                 (stamp!-cast-security vc‚Ä† ‚ä¢PC ‚Ü†PC‚Ä≤ vc‚Ä≤) refl , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢app‚ãÜ (‚ä¢cast (‚ä¢lam ‚ä¢N)) ‚ä¢V) ‚ä¢Œº (app‚ãÜ-blame-pc v vc‚Ä† ùìã ‚Ü†PC‚Ä≤) =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢blame , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢app‚ãÜ (‚ä¢cast (‚ä¢lam ‚ä¢N)) ‚ä¢V) ‚ä¢Œº (app‚ãÜ-blame v vc‚Ä† ùìã ‚Ü†PC‚Ä≤ vc‚Ä≤ ‚Ü†blame) =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢blame , ‚ä¢Œº ‚ü©
{- If -}
pres {Œ£} vc ‚ä¢PC (‚ä¢if ‚ä¢const ‚ä¢M ‚ä¢N eq) ‚ä¢Œº (Œ≤-if-true vc‚Ä†)
  rewrite uniq-LVal vc vc‚Ä† =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢prot ‚ä¢M (stamp‚Çë-wt vc‚Ä† ‚ä¢PC) (‚â°‚Üí‚âº (stamp‚Çë-security vc‚Ä†)) eq , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢if ‚ä¢const ‚ä¢M ‚ä¢N eq) ‚ä¢Œº (Œ≤-if-false vc‚Ä†)
  rewrite uniq-LVal vc vc‚Ä† =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢prot ‚ä¢N (stamp‚Çë-wt vc‚Ä† ‚ä¢PC) (‚â°‚Üí‚âº (stamp‚Çë-security vc‚Ä†)) eq , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢if (‚ä¢cast ‚ä¢const) ‚ä¢M ‚ä¢N eq) ‚ä¢Œº (if-true-cast vc‚Ä†)
  rewrite uniq-LVal vc vc‚Ä† =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢prot ‚ä¢M (stamp‚Çë-wt vc‚Ä† ‚ä¢PC) (‚â°‚Üí‚âº (stamp‚Çë-security vc‚Ä†)) eq , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢if (‚ä¢cast ‚ä¢const) ‚ä¢M ‚ä¢N eq) ‚ä¢Œº (if-false-cast vc‚Ä†)
  rewrite uniq-LVal vc vc‚Ä† =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢prot ‚ä¢N (stamp‚Çë-wt vc‚Ä† ‚ä¢PC) (‚â°‚Üí‚âº (stamp‚Çë-security vc‚Ä†)) eq , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢if‚ãÜ (‚ä¢cast ‚ä¢const) ‚ä¢M ‚ä¢N) ‚ä¢Œº (if‚ãÜ-true-cast vc‚Ä† ùìã)
  rewrite uniq-LVal vc vc‚Ä† =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢prot ‚ä¢M (stamp!‚Çë-wt vc‚Ä† ‚ä¢PC) (‚â°‚Üí‚âº (stamp!‚Çë-security vc‚Ä†)) refl , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢if‚ãÜ (‚ä¢cast ‚ä¢const) ‚ä¢M ‚ä¢N) ‚ä¢Œº (if‚ãÜ-false-cast vc‚Ä† ùìã)
  rewrite uniq-LVal vc vc‚Ä† =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢prot ‚ä¢N (stamp!‚Çë-wt vc‚Ä† ‚ä¢PC) (‚â°‚Üí‚âº (stamp!‚Çë-security vc‚Ä†)) refl , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢let ‚ä¢V ‚ä¢N) ‚ä¢Œº (Œ≤-let v) =
  ‚ü® Œ£ , ‚äá-refl Œ£ , substitution-pres ‚ä¢N (‚ä¢value-pc ‚ä¢V v) , ‚ä¢Œº ‚ü©
{- Reference creation -}
pres {Œ£} vc ‚ä¢PC (‚ä¢ref {T = T} ‚ä¢V _) ‚ä¢Œº (ref {‚Ñì} {V} {n} v fresh) =
  ‚ü® cons-Œ£ (a‚ü¶ ‚Ñì ‚üß n) T Œ£ , ‚äá-fresh (a‚ü¶ ‚Ñì ‚üß n) T ‚ä¢Œº fresh ,
    ‚ä¢addr (lookup-Œ£-cons (a‚ü¶ ‚Ñì ‚üß n) Œ£) , ‚ä¢Œº-new (‚ä¢value-pc ‚ä¢V v) v ‚ä¢Œº fresh ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢ref? {T = T} ‚ä¢V) ‚ä¢Œº (ref? {‚Ñì} {V} {n} v fresh ‚Ü†PC‚Ä≤ vc‚Ä≤) =
  ‚ü® cons-Œ£ (a‚ü¶ ‚Ñì ‚üß n) T Œ£ , ‚äá-fresh (a‚ü¶ ‚Ñì ‚üß n) T ‚ä¢Œº fresh ,
    ‚ä¢addr (lookup-Œ£-cons (a‚ü¶ ‚Ñì ‚üß n) Œ£) , ‚ä¢Œº-new (‚ä¢value-pc ‚ä¢V v) v ‚ä¢Œº fresh ‚ü©
pres {Œ£} vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (ref?-blame-pc _ _) = ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢blame , ‚ä¢Œº ‚ü©
{- Dereference -}
pres {Œ£} vc ‚ä¢PC (‚ä¢deref (‚ä¢addr hit) eq) ‚ä¢Œº (deref {n} {T} {‚ÑìÃÇ} Œºa‚â°V) =
  let ‚ü® wf , V‚Ä† , v‚Ä† , Œºa‚â°V‚Ä† , ‚ä¢V‚Ä† ‚ü© = ‚ä¢Œº n ‚ÑìÃÇ hit in
  case trans (sym Œºa‚â°V) Œºa‚â°V‚Ä† of Œª where {- V ‚â° V‚Ä† -}
  refl ‚Üí ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢prot (‚ä¢value-pc ‚ä¢V‚Ä† v‚Ä†) ‚ä¢l (_ ‚âºhigh) eq , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢deref (‚ä¢cast (‚ä¢addr hit)) eq) ‚ä¢Œº (deref-cast {‚ÑìÃÇ = ‚ÑìÃÇ} {n = n} ùìã Œºa‚â°V) =
  let ‚ü® wf , V‚Ä† , v‚Ä† , Œºa‚â°V‚Ä† , ‚ä¢V‚Ä† ‚ü© = ‚ä¢Œº n ‚ÑìÃÇ hit in
  case trans (sym Œºa‚â°V) Œºa‚â°V‚Ä† of Œª where {- V ‚â° V‚Ä† -}
  refl ‚Üí ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢prot (‚ä¢cast (‚ä¢value-pc ‚ä¢V‚Ä† v‚Ä†)) ‚ä¢l (_ ‚âºhigh) eq , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢deref‚ãÜ (‚ä¢cast (‚ä¢addr hit))) ‚ä¢Œº (deref‚ãÜ-cast {‚ÑìÃÇ = ‚ÑìÃÇ} {n = n} ùìã Œºa‚â°V) =
  let ‚ü® wf , V‚Ä† , v‚Ä† , Œºa‚â°V‚Ä† , ‚ä¢V‚Ä† ‚ü© = ‚ä¢Œº n ‚ÑìÃÇ hit in
  case trans (sym Œºa‚â°V) Œºa‚â°V‚Ä† of Œª where {- V ‚â° V‚Ä† -}
  refl ‚Üí ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢prot (‚ä¢cast (‚ä¢value-pc ‚ä¢V‚Ä† v‚Ä†)) ‚ä¢l (_ ‚âºhigh) refl , ‚ä¢Œº ‚ü©
{- Assignment -}
pres {Œ£} vc ‚ä¢PC (‚ä¢assign (‚ä¢addr hit) ‚ä¢V _ _) ‚ä¢Œº (Œ≤-assign v) =
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢const , ‚ä¢Œº-update (‚ä¢value-pc ‚ä¢V v) v ‚ä¢Œº hit ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢assign (‚ä¢cast (‚ä¢addr hit)) ‚ä¢V _ _) ‚ä¢Œº (assign-cast v ùìã ‚Ü†W w) =
  let ‚ä¢W = cast-pres-mult (‚ä¢cast ‚ä¢V) ‚Ü†W in
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢const , ‚ä¢Œº-update (‚ä¢value-pc ‚ä¢W w) w ‚ä¢Œº hit ‚ü©
pres {Œ£} vc ‚ä¢PC (‚ä¢assign? (‚ä¢cast (‚ä¢addr hit)) ‚ä¢V) ‚ä¢Œº
                (assign?-cast v vc‚Ä† ùìã ‚Ü†PC‚Ä≤ vc‚Ä≤ ‚Ü†W w) =
  let ‚ä¢W = cast-pres-mult (‚ä¢cast ‚ä¢V) ‚Ü†W in
  ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢const , ‚ä¢Œº-update (‚ä¢value-pc ‚ä¢W w) w ‚ä¢Œº hit ‚ü©
pres {Œ£} vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (assign-blame             _ _ _) = ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢blame , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (assign?-cast-blame-pc  _ _ _ _) = ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢blame , ‚ä¢Œº ‚ü©
pres {Œ£} vc ‚ä¢PC ‚ä¢M ‚ä¢Œº (assign?-cast-blame _ _ _ _ _ _) = ‚ü® Œ£ , ‚äá-refl Œ£ , ‚ä¢blame , ‚ä¢Œº ‚ü©
