module ExamplePrograms.Simulation.DerefRefProxy where

open import Data.List using ([])
open import Data.Unit
open import Data.Bool renaming (Bool to ùîπ)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)

open import Common.Types
open import Common.BlameLabels
open import Surface.SurfaceLang

{- less precise -}
M =
  `let ref‚ü¶ low ‚üß $ true of low at pos 0      `in
  `let (` 0) ‚à∂ Ref (` Bool of ‚ãÜ) of ‚ãÜ at pos 1 `in
  (! (` 0))

‚ä¢M : [] Õæ l low ‚ä¢·¥≥ M ‚¶Ç ` Bool of ‚ãÜ
‚ä¢M = ‚ä¢let (‚ä¢ref ‚ä¢const ‚â≤-refl ‚âæ-refl)
     (‚ä¢let (‚ä¢ann (‚ä¢var refl) (‚â≤-ty ‚âæ-‚ãÜr (‚â≤-ref (‚â≤-ty ‚âæ-‚ãÜr ‚â≤-Œπ) (‚â≤-ty ‚âæ-‚ãÜl ‚â≤-Œπ))))
       (‚ä¢deref (‚ä¢var refl)))

{- more precise -}
M‚Ä≤ =
  `let ref‚ü¶ low ‚üß $ true of low at pos 0      `in
  `let (` 0) ‚à∂ Ref (` Bool of l low) of l high at pos 1 `in
  (! (` 0))

‚ä¢M‚Ä≤ : [] Õæ l low ‚ä¢·¥≥ M‚Ä≤ ‚¶Ç ` Bool of l high
‚ä¢M‚Ä≤ = ‚ä¢let (‚ä¢ref ‚ä¢const ‚â≤-refl ‚âæ-refl)
     (‚ä¢let (‚ä¢ann (‚ä¢var refl) (‚â≤-ty (‚âæ-l l‚âºh) ‚â≤·µ£-refl))
       (‚ä¢deref (‚ä¢var refl)))
