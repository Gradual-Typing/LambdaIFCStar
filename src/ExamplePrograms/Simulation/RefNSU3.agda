module ExamplePrograms.Simulation.RefNSU3 where

open import Data.List using ([])
open import Data.Unit
open import Data.Bool renaming (Bool to ùîπ)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)

open import Common.Types
open import Common.BlameLabels
open import Surface.SurfaceLang

{- less precise -}
M =
  `let ($ true of low) ‚à∂ ` Bool of l high at pos 0 `in
  `let if ((` 0) ‚à∂ ` Bool of ‚ãÜ at pos 1)
       then ref‚ü¶ high ‚üß $ false of low at pos 3
       else ref‚ü¶ high ‚üß $ true of low at pos 4
       at pos 2 `in
  (! (` 0))

‚ä¢M : [] Õæ l low ‚ä¢·¥≥ M ‚¶Ç ` Bool of ‚ãÜ
‚ä¢M =
  ‚ä¢let (‚ä¢ann ‚ä¢const (‚â≤-ty (‚âæ-l l‚âºh) ‚â≤-Œπ))
  (‚ä¢let (‚ä¢if (‚ä¢ann (‚ä¢var refl) (‚â≤-ty ‚âæ-‚ãÜr ‚â≤-Œπ))
             (‚ä¢ref ‚ä¢const (‚â≤-ty (‚âæ-l l‚âºh) ‚â≤-Œπ) ‚âæ-‚ãÜl)
             (‚ä¢ref ‚ä¢const (‚â≤-ty (‚âæ-l l‚âºh) ‚â≤-Œπ) ‚âæ-‚ãÜl) refl)
    (‚ä¢deref (‚ä¢var refl)))

{- more precise -}
M‚Ä≤ =
  `let ($ true of low) ‚à∂ ` Bool of l high at pos 0 `in
  `let if ((` 0) ‚à∂ ` Bool of l high at pos 1)
       then ref‚ü¶ high ‚üß $ false of low at pos 3
       else ref‚ü¶ high ‚üß $ true of low at pos 4
       at pos 2 `in
  (! (` 0))

‚ä¢M‚Ä≤ : [] Õæ l low ‚ä¢·¥≥ M‚Ä≤ ‚¶Ç ` Bool of l high
‚ä¢M‚Ä≤ =
  ‚ä¢let (‚ä¢ann ‚ä¢const (‚â≤-ty (‚âæ-l l‚âºh) ‚â≤-Œπ))
  (‚ä¢let (‚ä¢if (‚ä¢ann (‚ä¢var refl) (‚â≤-ty ‚âæ-refl ‚â≤-Œπ))
             (‚ä¢ref ‚ä¢const (‚â≤-ty (‚âæ-l l‚âºh) ‚â≤-Œπ) ‚âæ-refl)
             (‚ä¢ref ‚ä¢const (‚â≤-ty (‚âæ-l l‚âºh) ‚â≤-Œπ) ‚âæ-refl) refl)
    (‚ä¢deref (‚ä¢var refl)))
