module ExamplePrograms.Simulation.SubInj1 where

open import Data.List using ([])
open import Data.Bool renaming (Bool to ùîπ)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)

open import Common.Types
open import Common.BlameLabels
open import Surface.SurfaceLang

{- less precise -}
M =
  `let ($ true of low) ‚à∂ ` Bool of ‚ãÜ at pos 0 `in
  `let (` 0)           ‚à∂ ` Bool of ‚ãÜ at pos 1 `in
  (` 0)

‚ä¢M : [] Õæ l low ‚ä¢·¥≥ M ‚¶Ç ` Bool of ‚ãÜ
‚ä¢M =
  ‚ä¢let (‚ä¢ann ‚ä¢const (‚â≤-ty ‚âæ-‚ãÜr ‚â≤-Œπ))
  (‚ä¢let (‚ä¢ann (‚ä¢var refl) ‚â≤-refl)
    (‚ä¢var refl))

{- more precise -}
M‚Ä≤ =
  `let ($ true of low) ‚à∂ ` Bool of l high at pos 0 `in
  `let (` 0)           ‚à∂ ` Bool of ‚ãÜ      at pos 1 `in
  (` 0)

‚ä¢M‚Ä≤ : [] Õæ l low ‚ä¢·¥≥ M‚Ä≤ ‚¶Ç ` Bool of ‚ãÜ
‚ä¢M‚Ä≤ =
  ‚ä¢let (‚ä¢ann ‚ä¢const (‚â≤-ty (‚âæ-l l‚âºh) ‚â≤-Œπ))
  (‚ä¢let (‚ä¢ann (‚ä¢var refl) (‚â≤-ty ‚âæ-‚ãÜr ‚â≤-Œπ))
    (‚ä¢var refl))

{- less precise AST
let-bind

   (cast (const true low (` Bool of l low)) (` Bool of l low) (` Bool of ‚ãÜ) (` Bool of ‚ãÜ))

(let-bind (var 0 (` Bool of ‚ãÜ)) (var 0 (` Bool of ‚ãÜ))
 (` Bool of ‚ãÜ))
(` Bool of ‚ãÜ)
-}

{- more precise AST
let-bind

   (const true low (` Bool of l high))

(let-bind
 (cast (var 0 (` Bool of l high)) (` Bool of l high) (` Bool of ‚ãÜ)
  (` Bool of ‚ãÜ))
 (var 0 (` Bool of ‚ãÜ)) (` Bool of ‚ãÜ))
(` Bool of ‚ãÜ)
-}
