module ExamplePrograms.Simulation.SubInj where

open import Data.Unit
open import Data.List
open import Data.Maybe
open import Data.Bool renaming (Bool to ùîπ)
open import Data.Product using (_√ó_; ‚àÉ-syntax; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to ‚ü®_,_‚ü©)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)

open import Common.Utils
open import Common.Types
open import Common.BlameLabels
open import Surface.SurfaceLang
open import Surface.Precision
open import CC.CCStatics renaming (Term to CCTerm;
  `_ to var; $_of_ to const_of_; ∆õ‚ü¶_‚üß_Àô_of_ to lam‚ü¶_‚üß_Àô_of_; !_ to *_)
open import CC.Compile renaming (compile to ùíû; compilation-preserves-type to ùíû-pres)
open import CC.Reduction
open import CC.TypeSafety
open import CC.BigStep
open import Memory.Heap CCTerm Value


M =
  `let (($ true of low) ‚à∂ ` Bool of ‚ãÜ at pos 0) `in
  `let ((` 0) ‚à∂ ` Bool of ‚ãÜ at pos 0) `in
    (` 0)

‚ä¢M : [] Õæ l low ‚ä¢·¥≥ M ‚¶Ç ` Bool of ‚ãÜ
‚ä¢M = ‚ä¢let (‚ä¢ann ‚ä¢const (‚â≤-ty ‚âæ-‚ãÜr ‚â≤-Œπ)) (‚ä¢let (‚ä¢ann (‚ä¢var refl) ‚â≤-refl) (‚ä¢var refl))

M‚Ä≤ =
  `let (($ true of low) ‚à∂ ` Bool of l high at pos 0) `in
  `let ((` 0) ‚à∂ ` Bool of ‚ãÜ at pos 0) `in
    (` 0)

‚ä¢M‚Ä≤ : [] Õæ l low ‚ä¢·¥≥ M‚Ä≤ ‚¶Ç ` Bool of ‚ãÜ
‚ä¢M‚Ä≤ =
  ‚ä¢let (‚ä¢ann ‚ä¢const (‚â≤-ty (‚âæ-l l‚âºh) ‚â≤-Œπ))
       (‚ä¢let (‚ä¢ann (‚ä¢var refl) (‚â≤-ty ‚âæ-‚ãÜr ‚â≤-Œπ)) (‚ä¢var refl))


open import Simulator.Simulator

b = simulator M M‚Ä≤ ‚ä¢M ‚ä¢M‚Ä≤
