module ExamplePrograms.Simulation.IfFalseAssign where

open import Data.List using ([])
open import Data.Unit
open import Data.Bool renaming (Bool to ùîπ)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)

open import Common.Types
open import Common.BlameLabels
open import Surface.SurfaceLang


{- less precise -}
M =
  `let $ false of high `in
  `let ref‚ü¶ high ‚üß (($ true of high) ‚à∂ ` Bool of ‚ãÜ at pos 3) at pos 0 `in
    if ` 1 then (` 0) := ($ false of high) at pos 1
           else $ tt of low                at pos 2

‚ä¢M : [] Õæ l low ‚ä¢·¥≥ M ‚¶Ç ` Unit of l high
‚ä¢M =
  ‚ä¢let ‚ä¢const
  (‚ä¢let (‚ä¢ref (‚ä¢ann ‚ä¢const (‚â≤-ty ‚âæ-‚ãÜr ‚â≤-Œπ)) (‚â≤-ty ‚âæ-‚ãÜl ‚â≤-Œπ) (‚âæ-l l‚âºh))
    (‚ä¢if (‚ä¢var refl)
         (‚ä¢assign (‚ä¢var refl) ‚ä¢const ‚â≤-refl (‚âæ-l l‚âºh) ‚âæ-refl)
         ‚ä¢const refl))

{- more precise -}
M‚Ä≤ =
  `let $ false of high `in
  `let ref‚ü¶ high ‚üß $ true of high at pos 0 `in
    if ` 1 then (` 0) := ($ false of high) at pos 1
           else $ tt of low                at pos 2

‚ä¢M‚Ä≤ : [] Õæ l low ‚ä¢·¥≥ M‚Ä≤ ‚¶Ç ` Unit of l high
‚ä¢M‚Ä≤ =
  ‚ä¢let ‚ä¢const
    (‚ä¢let (‚ä¢ref ‚ä¢const ‚â≤-refl (‚âæ-l l‚âºh))
      (‚ä¢if (‚ä¢var refl)
           (‚ä¢assign (‚ä¢var refl) ‚ä¢const ‚â≤-refl (‚âæ-l l‚âºh) ‚âæ-refl)
           ‚ä¢const refl))
