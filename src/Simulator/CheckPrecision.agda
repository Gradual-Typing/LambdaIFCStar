module Simulator.CheckPrecision where

open import Data.Nat
open import Data.Bool renaming (Bool to ùîπ; _‚âü_ to _‚âü·µá_)
open import Data.Unit using (‚ä§; tt)
open import Data.Maybe
open import Data.Product using (_√ó_; ‚àÉ; ‚àÉ-syntax) renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.List hiding ([_])
open import Function using (case_of_)
open import Relation.Nullary using (¬¨_; Dec; yes; no)
open import Relation.Nullary.Decidable using (isYes)
open import Relation.Nullary.Negation using (contradiction)
open import Relation.Binary.PropositionalEquality
  using (_‚â°_; _‚â¢_; refl; trans; sym; subst; cong; cong‚ÇÇ)

open import Common.Utils
open import Common.Types
open import Memory.Addr
open import CC.Errors
open import Simulator.AST


{- Each case of the `check` function below reflects
   its corresponding rule in `Precision` -}
check-‚äë? : (t t‚Ä≤ : AST) ‚Üí ùîπ
-- first get rid of all the `cast-pc`s
check-‚äë? (castpc _ t _) t‚Ä≤ = check-‚äë? t t‚Ä≤
check-‚äë? t (castpc _ t‚Ä≤ _) = check-‚äë? t t‚Ä≤
-- in most cases we expect the two sides to be syntactically equal
-- Var
check-‚äë? (var x _) (var y _) = isYes (x ‚âü y)
-- Const
check-‚äë? (const {Œπ} k ‚Ñì _) (const {Œπ‚Ä≤} k‚Ä≤ ‚Ñì‚Ä≤ _) =
  case ` Œπ ‚â°·µ£? ` Œπ‚Ä≤ of Œª where
  (yes refl) ‚Üí (isYes (const-eq? k k‚Ä≤)) ‚àß (isYes (‚Ñì =? ‚Ñì‚Ä≤))
  (no  _)    ‚Üí false
-- Addr
check-‚äë? (addr a ‚Ñì _) (addr a‚Ä≤ ‚Ñì‚Ä≤ _) =
  (isYes (addr-eq? a a‚Ä≤)) ‚àß (isYes (‚Ñì =? ‚Ñì‚Ä≤))
-- Lam
check-‚äë? (lam ‚Ñì·∂ú A t ‚Ñì _) (lam ‚Ñì·∂ú‚Ä≤ A‚Ä≤ t‚Ä≤ ‚Ñì‚Ä≤ _) =
  (isYes (‚Ñì·∂ú =? ‚Ñì·∂ú‚Ä≤)) ‚àß (isYes (‚Ñì =? ‚Ñì‚Ä≤)) ‚àß
  (isYes (A ‚äë? A‚Ä≤))   ‚àß (check-‚äë? t t‚Ä≤)
-- App
check-‚äë? (app t‚ÇÅ t‚ÇÇ _) (app t‚ÇÅ‚Ä≤ t‚ÇÇ‚Ä≤ _) = (check-‚äë? t‚ÇÅ t‚ÇÅ‚Ä≤) ‚àß (check-‚äë? t‚ÇÇ t‚ÇÇ‚Ä≤)
-- If
check-‚äë? (cond t‚ÇÅ t‚ÇÇ t‚ÇÉ _) (cond t‚ÇÅ‚Ä≤ t‚ÇÇ‚Ä≤ t‚ÇÉ‚Ä≤ _) =
  (check-‚äë? t‚ÇÅ t‚ÇÅ‚Ä≤) ‚àß (check-‚äë? t‚ÇÇ t‚ÇÇ‚Ä≤) ‚àß (check-‚äë? t‚ÇÉ t‚ÇÉ‚Ä≤)
-- Let
check-‚äë? (let-bind t‚ÇÅ t‚ÇÇ _) (let-bind t‚ÇÅ‚Ä≤ t‚ÇÇ‚Ä≤ _) =
  (check-‚äë? t‚ÇÅ t‚ÇÅ‚Ä≤) ‚àß (check-‚äë? t‚ÇÇ t‚ÇÇ‚Ä≤)
-- Ref, Ref?, and Ref‚úì
check-‚äë? (ref   ‚Ñì t _) (ref   ‚Ñì‚Ä≤ t‚Ä≤ _) = isYes (‚Ñì =? ‚Ñì‚Ä≤) ‚àß (check-‚äë? t t‚Ä≤)
check-‚äë? (ref?  ‚Ñì t _) (ref?  ‚Ñì‚Ä≤ t‚Ä≤ _) = isYes (‚Ñì =? ‚Ñì‚Ä≤) ‚àß (check-‚äë? t t‚Ä≤)
check-‚äë? (ref?  ‚Ñì t _) (ref   ‚Ñì‚Ä≤ t‚Ä≤ _) = isYes (‚Ñì =? ‚Ñì‚Ä≤) ‚àß (check-‚äë? t t‚Ä≤)
check-‚äë? (ref‚úì ‚Ñì t _) (ref‚úì ‚Ñì‚Ä≤ t‚Ä≤ _) = isYes (‚Ñì =? ‚Ñì‚Ä≤) ‚àß (check-‚äë? t t‚Ä≤)
-- Deref
check-‚äë? (deref t _) (deref t‚Ä≤ _) = check-‚äë? t t‚Ä≤
-- Assign, Assign?, and Assign‚úì
check-‚äë? (assign   t‚ÇÅ t‚ÇÇ _) (assign   t‚ÇÅ‚Ä≤ t‚ÇÇ‚Ä≤ _) = check-‚äë? t‚ÇÅ t‚ÇÅ‚Ä≤ ‚àß check-‚äë? t‚ÇÇ t‚ÇÇ‚Ä≤
check-‚äë? (assign?  t‚ÇÅ t‚ÇÇ _) (assign?  t‚ÇÅ‚Ä≤ t‚ÇÇ‚Ä≤ _) = check-‚äë? t‚ÇÅ t‚ÇÅ‚Ä≤ ‚àß check-‚äë? t‚ÇÇ t‚ÇÇ‚Ä≤
check-‚äë? (assign?  t‚ÇÅ t‚ÇÇ _) (assign   t‚ÇÅ‚Ä≤ t‚ÇÇ‚Ä≤ _) = check-‚äë? t‚ÇÅ t‚ÇÅ‚Ä≤ ‚àß check-‚äë? t‚ÇÇ t‚ÇÇ‚Ä≤
check-‚äë? (assign?  t‚ÇÅ t‚ÇÇ _) (assign‚úì t‚ÇÅ‚Ä≤ t‚ÇÇ‚Ä≤ _) = check-‚äë? t‚ÇÅ t‚ÇÅ‚Ä≤ ‚àß check-‚äë? t‚ÇÇ t‚ÇÇ‚Ä≤  {- example: `AssignRefProxy` -}
check-‚äë? (assign‚úì t‚ÇÅ t‚ÇÇ _) (assign‚úì t‚ÇÅ‚Ä≤ t‚ÇÇ‚Ä≤ _) = check-‚äë? t‚ÇÅ t‚ÇÅ‚Ä≤ ‚àß check-‚äë? t‚ÇÇ t‚ÇÇ‚Ä≤
-- Prot
check-‚äë? (protect ‚Ñì t _) (protect ‚Ñì‚Ä≤ t‚Ä≤ _) =
  isYes (‚Ñì =? ‚Ñì‚Ä≤) ‚àß check-‚äë? t t‚Ä≤
-- NSU error
check-‚äë? (err nsu-error _) (err nsu-error _) = true
-- Cast
check-‚äë? (cast t A B C) (cast t‚Ä≤ A‚Ä≤ B‚Ä≤ C‚Ä≤) =
  -- relate by Cast
  (isYes (A ‚äë? A‚Ä≤) ‚àß isYes (B ‚äë? B‚Ä≤) ‚àß check-‚äë? t t‚Ä≤) ‚à®
  -- relate by CastL
  (isYes (A ‚äë<:? C‚Ä≤) ‚àß isYes (B ‚äë<:? C‚Ä≤) ‚àß check-‚äë? t (cast t‚Ä≤ A‚Ä≤ B‚Ä≤ C‚Ä≤)) ‚à®
  -- relate by CastR
  (isYes (C ‚äë? A‚Ä≤) ‚àß isYes (C ‚äë? B‚Ä≤) ‚àß check-‚äë? (cast t A B C) t‚Ä≤)
-- Special case: cast on the left, blame on the right
check-‚äë? (cast t A B C) (err (blame p) A‚Ä≤) =
  {- relate by CastL -}
  (isYes (A ‚äë? A‚Ä≤) ‚àß isYes (B ‚äë? A‚Ä≤) ‚àß check-‚äë? t (err (blame p) A‚Ä≤)) ‚à®
  {- relate by Blame -}
  (isYes (C ‚äë? A‚Ä≤))
-- CastL
check-‚äë? (cast t A B C) t‚Ä≤ =
  let C‚Ä≤ = get-type t‚Ä≤ in
  {- intuition: more precise side can go up in subtyping -}
  isYes (A ‚äë<:? C‚Ä≤) ‚àß isYes (B ‚äë<:? C‚Ä≤) ‚àß check-‚äë? t t‚Ä≤
-- CastR
check-‚äë? t (cast t‚Ä≤ A‚Ä≤ B‚Ä≤ C‚Ä≤) =
  let C = get-type t in
  isYes (C ‚äë? A‚Ä≤) ‚àß isYes (C ‚äë? B‚Ä≤) ‚àß check-‚äë? t t‚Ä≤
-- Blame
check-‚äë? t (err (blame p) A‚Ä≤) =
  let A = get-type t in
  isYes (A ‚äë? A‚Ä≤)
-- Otherwise
check-‚äë? _ _ = false
