module Simulator.Simulator where

open import Data.Unit
open import Data.Nat
open import Data.List
open import Data.Bool renaming (Bool to ùîπ; _‚âü_ to _‚âü·µá_)
open import Data.Maybe
open import Data.Product using (_√ó_; ‚àÉ-syntax; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to ‚ü®_,_‚ü©)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)
open import Function using (case_of_)

open import Common.Utils
open import Common.Types
open import Common.BlameLabels
open import Surface.SurfaceLang
open import Surface.Precision
open import CC.CCStatics renaming (Term to CCTerm;
  `_ to var; $_of_ to const_of_; ∆õ‚ü¶_‚üß_Àô_of_ to lam‚ü¶_‚üß_Àô_of_; !_ to *_)
open import CC.Compile renaming (compile to ùíû; compilation-preserves-type to ùíû-pres)
open import CC.Reduction
open import CC.TypeSafety
open import CC.BigStep
open import CC.MultiStep renaming (multi-trans to _‚Ü†_)
open import Memory.Heap CCTerm Value

open import Simulator.AST
open import Simulator.CheckPrecision


sim-helper : ‚àÄ {Œ£ gc A} M Œº
  ‚Üí [] Õæ Œ£ Õæ gc Õæ low ‚ä¢ M ‚¶Ç A
  ‚Üí Œ£ ‚ä¢ Œº ‚Üí (t : AST) ‚Üí (k : ‚Ñï)
    ------------------------------------------
  ‚Üí Maybe (‚Ñï √ó ‚àÉ[ N ] ‚àÉ[ Œº‚Ä≤ ] (M ‚à£ Œº ‚à£ low ‚Äî‚Ü† N ‚à£ Œº‚Ä≤))
sim-helper {A = A} M Œº ‚ä¢M ‚ä¢Œº t 0 =
  if (check-‚äë? (to-ast M ‚ä¢M A) t) then just ‚ü® 0 , M , Œº , M ‚à£ Œº ‚à£ _ ‚àé ‚ü© else nothing
sim-helper {A = A} M Œº ‚ä¢M ‚ä¢Œº t (suc k-1) =
  if (check-‚äë? (to-ast M ‚ä¢M A) t) then just ‚ü® 0 , M , Œº , M ‚à£ Œº ‚à£ _ ‚àé ‚ü©
    else
    (case progress low M ‚ä¢M Œº ‚ä¢Œº of Œª where
      (step {N} {Œº‚Ä≤} M‚ÜíN) ‚Üí
        let ‚ü® Œ£‚Ä≤ , Œ£‚Ä≤‚äáŒ£ , ‚ä¢N , ‚ä¢Œº‚Ä≤ ‚ü© = preserve ‚ä¢M ‚ä¢Œº (low‚âæ _) M‚ÜíN in
        do
          ‚ü® n , N‚Ä≤ , Œº‚Ä≥ , N‚Ü†N‚Ä≤ ‚ü© ‚Üê sim-helper N Œº‚Ä≤ ‚ä¢N ‚ä¢Œº‚Ä≤ t k-1
          just ‚ü® 1 + n , N‚Ä≤ , Œº‚Ä≥ , M ‚à£ _ ‚à£ _ ‚Äî‚Üí‚ü® M‚ÜíN ‚ü© N‚Ü†N‚Ä≤ ‚ü©
      (done v)      {- M is value already -} ‚Üí nothing
      (err E-error) {- M is an error -}      ‚Üí nothing)

{-
          M‚Ä≤
          ‚äî|
  M ‚Äî‚Ü†‚Çô N
-}
step-left : ‚àÄ {Œ£ Œ£‚Ä≤ gc gc‚Ä≤ A A‚Ä≤} M M‚Ä≤ Œº‚ÇÅ
  ‚Üí (‚ä¢M  : [] Õæ Œ£  Õæ gc  Õæ low ‚ä¢ M  ‚¶Ç A)
  ‚Üí (‚ä¢M‚Ä≤ : [] Õæ Œ£‚Ä≤ Õæ gc‚Ä≤ Õæ low ‚ä¢ M‚Ä≤ ‚¶Ç A‚Ä≤)
  ‚Üí (‚ä¢Œº‚ÇÅ : Œ£ ‚ä¢ Œº‚ÇÅ)
    ---------------------------------------------------
  ‚Üí Maybe (‚Ñï √ó ‚àÉ[ N ] ‚àÉ[ Œº‚ÇÇ ] (M ‚à£ Œº‚ÇÅ ‚à£ low ‚Äî‚Ü† N ‚à£ Œº‚ÇÇ))
step-left {A = A} {A‚Ä≤} M M‚Ä≤ Œº‚ÇÅ ‚ä¢M ‚ä¢M‚Ä≤ ‚ä¢Œº‚ÇÅ =
  sim-helper M Œº‚ÇÅ ‚ä¢M ‚ä¢Œº‚ÇÅ (to-ast M‚Ä≤ ‚ä¢M‚Ä≤ A‚Ä≤) magic-num

step-right : ‚àÄ {Œ£ Œ£‚Ä≤ gc gc‚Ä≤ A A‚Ä≤} M M‚Ä≤ Œº‚ÇÅ Œº‚ÇÅ‚Ä≤
  ‚Üí (‚ä¢M  : [] Õæ Œ£  Õæ gc  Õæ low ‚ä¢ M  ‚¶Ç A)
  ‚Üí (‚ä¢M‚Ä≤ : [] Õæ Œ£‚Ä≤ Õæ gc‚Ä≤ Õæ low ‚ä¢ M‚Ä≤ ‚¶Ç A‚Ä≤)
  ‚Üí (‚ä¢Œº‚ÇÅ  : Œ£  ‚ä¢ Œº‚ÇÅ)
  ‚Üí (‚ä¢Œº‚ÇÅ‚Ä≤ : Œ£‚Ä≤ ‚ä¢ Œº‚ÇÅ‚Ä≤)
  ‚Üí (k : ‚Ñï)  -- gas: steps left for the right side
  ‚Üí (n : ‚Ñï)  -- steps taken on the left side
  ‚Üí (n‚Ä≤ : ‚Ñï) -- steps taken on the right side
    ------------------------------------------------------------
  ‚Üí (‚Ñï √ó ‚àÉ[ N ]  ‚àÉ[ Œº‚ÇÇ  ] (M  ‚à£ Œº‚ÇÅ  ‚à£ low ‚Äî‚Ü† N  ‚à£ Œº‚ÇÇ )) √ó
     (‚Ñï √ó ‚àÉ[ N‚Ä≤ ] ‚àÉ[ Œº‚ÇÇ‚Ä≤ ] (M‚Ä≤ ‚à£ Œº‚ÇÅ‚Ä≤ ‚à£ low ‚Äî‚Ü† N‚Ä≤ ‚à£ Œº‚ÇÇ‚Ä≤)) √ó
     (List (‚Ñï √ó ‚Ñï))
step-right M M‚Ä≤ Œº‚ÇÅ Œº‚ÇÅ‚Ä≤ ‚ä¢M ‚ä¢M‚Ä≤ ‚ä¢Œº ‚ä¢Œº‚ÇÅ‚Ä≤ 0 n n‚Ä≤ =
  -- we run out of gas and can't further proceed on the more precise side,
  -- - or either side
  ‚ü® ‚ü® 0 , M , Œº‚ÇÅ , _ ‚à£ _ ‚à£ _ ‚àé ‚ü© , ‚ü® 0 , M‚Ä≤ , Œº‚ÇÅ‚Ä≤ , _ ‚à£ _ ‚à£ _ ‚àé ‚ü© , [] ‚ü©
step-right M M‚Ä≤ Œº‚ÇÅ Œº‚ÇÅ‚Ä≤ ‚ä¢M ‚ä¢M‚Ä≤ ‚ä¢Œº‚ÇÅ ‚ä¢Œº‚ÇÅ‚Ä≤ (suc k-1) n‚ÇÄ n‚ÇÄ‚Ä≤ =
  -- the more precise side (right) takes one step
  case progress low M‚Ä≤ ‚ä¢M‚Ä≤ Œº‚ÇÅ‚Ä≤ ‚ä¢Œº‚ÇÅ‚Ä≤ of Œª where
  (step {N‚Ä≤} {Œº‚ÇÇ‚Ä≤} M‚Ä≤‚ÜíN‚Ä≤) ‚Üí
    let ‚ü® _ , _ , ‚ä¢N‚Ä≤ , ‚ä¢Œº‚ÇÇ‚Ä≤ ‚ü© = preserve ‚ä¢M‚Ä≤ ‚ä¢Œº‚ÇÅ‚Ä≤ (low‚âæ _) M‚Ä≤‚ÜíN‚Ä≤ in
    case step-left M N‚Ä≤ Œº‚ÇÅ ‚ä¢M ‚ä¢N‚Ä≤ ‚ä¢Œº‚ÇÅ of Œª where
    -- `step-left` recursively steps on the less precise side
    {-
      M‚Ä≤ ‚Äî‚Üí  N‚Ä≤
      ‚äî|       ‚äî|
      M  ‚Äî‚Ü†‚Çô N
    -}
    (just ‚ü® n , N , Œº‚ÇÇ , M‚Ü†N ‚ü©) ‚Üí
      let ‚ü® _ , _ , ‚ä¢N , ‚ä¢Œº‚ÇÇ ‚ü© = multi-pres ‚ä¢M ‚ä¢Œº‚ÇÅ (low‚âæ _) M‚Ü†N in
      let ‚ü® ‚ü® n‚ÇÅ , N‚ÇÅ , Œº‚ÇÉ , N‚Ü†N‚ÇÅ ‚ü© ,
            ‚ü® n‚ÇÅ‚Ä≤ , N‚ÇÅ‚Ä≤ , Œº‚ÇÉ‚Ä≤ , N‚Ä≤‚Ü†N‚ÇÅ‚Ä≤ ‚ü© ,
            s ‚ü© = step-right N N‚Ä≤ Œº‚ÇÇ Œº‚ÇÇ‚Ä≤ ‚ä¢N ‚ä¢N‚Ä≤ ‚ä¢Œº‚ÇÇ ‚ä¢Œº‚ÇÇ‚Ä≤ k-1 (n + n‚ÇÄ) (1 + n‚ÇÄ‚Ä≤) in
      ‚ü® ‚ü® n + n‚ÇÅ , N‚ÇÅ , Œº‚ÇÉ , M‚Ü†N ‚Ü† N‚Ü†N‚ÇÅ ‚ü© ,
        ‚ü® 1 + n‚ÇÅ‚Ä≤ , N‚ÇÅ‚Ä≤ , Œº‚ÇÉ‚Ä≤ , _ ‚à£ _ ‚à£ _ ‚Äî‚Üí‚ü® M‚Ä≤‚ÜíN‚Ä≤ ‚ü© N‚Ä≤‚Ü†N‚ÇÅ‚Ä≤ ‚ü© ,
        ‚ü® n + n‚ÇÄ , 1 + n‚ÇÄ‚Ä≤ ‚ü© ‚à∑ s ‚ü©
    nothing ‚Üí
      -- if we can't find N to stay in simulation
      -- we don't go anywhere else
      ‚ü® ‚ü® 0 , M , Œº‚ÇÅ , _ ‚à£ _ ‚à£ _ ‚àé ‚ü© ,
        ‚ü® 1 , N‚Ä≤ , Œº‚ÇÇ‚Ä≤ , _ ‚à£ _ ‚à£ _ ‚Äî‚Üí‚ü® M‚Ä≤‚ÜíN‚Ä≤ ‚ü© _ ‚à£ _ ‚à£ _ ‚àé ‚ü© ,
        [] ‚ü©
  _ ‚Üí -- if M‚Ä≤ is a value or an error
    ‚ü® ‚ü® 0 , M , Œº‚ÇÅ , _ ‚à£ _ ‚à£ _ ‚àé ‚ü© ,
      ‚ü® 0 , M‚Ä≤ , Œº‚ÇÅ‚Ä≤ , _ ‚à£ _ ‚à£ _ ‚àé ‚ü© ,
      [] ‚ü©

simulator : ‚àÄ {A A‚Ä≤} (M M‚Ä≤ : Term)
  ‚Üí [] Õæ l low ‚ä¢·¥≥ M  ‚¶Ç A
  ‚Üí [] Õæ l low ‚ä¢·¥≥ M‚Ä≤ ‚¶Ç A‚Ä≤
    -------------------------------------------------------------------
  ‚Üí (‚Ñï √ó ‚àÉ[ N‚ÇÅ  ] ‚àÉ[ N‚ÇÇ  ] ‚àÉ[ Œº  ] (N‚ÇÅ  ‚à£ ‚àÖ ‚à£ low ‚Äî‚Ü† N‚ÇÇ  ‚à£ Œº )) √ó
     (‚Ñï √ó ‚àÉ[ N‚ÇÅ‚Ä≤ ] ‚àÉ[ N‚ÇÇ‚Ä≤ ] ‚àÉ[ Œº‚Ä≤ ] (N‚ÇÅ‚Ä≤ ‚à£ ‚àÖ ‚à£ low ‚Äî‚Ü† N‚ÇÇ‚Ä≤ ‚à£ Œº‚Ä≤)) √ó
     (List (‚Ñï √ó ‚Ñï))
simulator {A} {A‚Ä≤} M M‚Ä≤ ‚ä¢M ‚ä¢M‚Ä≤ =
  let N‚ÇÅ  = ùíû M ‚ä¢M   ; ‚ä¢N‚ÇÅ  = ùíû-pres M ‚ä¢M   in
  let N‚ÇÅ‚Ä≤ = ùíû M‚Ä≤ ‚ä¢M‚Ä≤ ; ‚ä¢N‚ÇÅ‚Ä≤ = ùíû-pres M‚Ä≤ ‚ä¢M‚Ä≤ in
  if check-‚äë? (to-ast N‚ÇÅ ‚ä¢N‚ÇÅ A) (to-ast N‚ÇÅ‚Ä≤ ‚ä¢N‚ÇÅ‚Ä≤ A‚Ä≤) then
    (let ‚ü® ‚ü® n , N‚ÇÇ , Œº , N‚ÇÅ‚Ü†N‚ÇÇ ‚ü© ,
           ‚ü® n‚Ä≤ , N‚ÇÇ‚Ä≤ , Œº‚Ä≤ , N‚ÇÅ‚Ä≤‚Ü†N‚ÇÇ‚Ä≤ ‚ü© ,
           s ‚ü© = step-right N‚ÇÅ N‚ÇÅ‚Ä≤ ‚àÖ ‚àÖ ‚ä¢N‚ÇÅ ‚ä¢N‚ÇÅ‚Ä≤ ‚ä¢Œº-nil ‚ä¢Œº-nil magic-num 0 0 in
     ‚ü® ‚ü® n , N‚ÇÅ , N‚ÇÇ , Œº , N‚ÇÅ‚Ü†N‚ÇÇ ‚ü© , ‚ü® n‚Ä≤ , N‚ÇÅ‚Ä≤ , N‚ÇÇ‚Ä≤ , Œº‚Ä≤ , N‚ÇÅ‚Ä≤‚Ü†N‚ÇÇ‚Ä≤ ‚ü© , ‚ü® 0 , 0 ‚ü© ‚à∑ s ‚ü©)
    else ‚ü® ‚ü® 0 , N‚ÇÅ , N‚ÇÅ , ‚àÖ , _ ‚à£ _ ‚à£ _ ‚àé ‚ü© , ‚ü® 0 , N‚ÇÅ‚Ä≤ , N‚ÇÅ‚Ä≤ , ‚àÖ , _ ‚à£ _ ‚à£ _ ‚àé ‚ü© , [] ‚ü©
