module Simulator.Experiment where

open import Data.Unit
open import Data.Nat
open import Data.List
open import Data.Bool renaming (Bool to ùîπ; _‚âü_ to _‚âü·µá_)
open import Data.Maybe
open import Data.Product using (_√ó_; ‚àÉ-syntax; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to ‚ü®_,_‚ü©)
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)
open import Function using (case_of_)

open import Common.Utils
open import Common.Types
open import Common.BlameLabels
open import Memory.Addr
open import CC.CCStatics

open import Simulator.AST
open import Simulator.CheckPrecision

M M‚Ä≤ : Term
-- M = (addr a‚ü¶ high ‚üß 0 of low) ‚ü® cast (Ref (` Bool of l high) of l low) (Ref (` Bool of ‚ãÜ) of ‚ãÜ) (pos 0) (~-ty ~‚ãÜ (~-ref (~-ty ~‚ãÜ ~-Œπ))) ‚ü©
-- M‚Ä≤ = ((addr a‚ü¶ high ‚üß 0 of low) ‚ü® cast (Ref (` Bool of l high) of l low) (Ref (` Bool of l high) of ‚ãÜ) (pos 0) (~-ty ~‚ãÜ ~·µ£-refl) ‚ü©)
--      ‚ü® cast (Ref (` Bool of l high) of ‚ãÜ) (Ref (` Bool of l high) of l high) (pos 0) (~-ty ‚ãÜ~ ~·µ£-refl) ‚ü©

-- ‚ä¢M : [] Õæ ‚ü® [] ,  ‚ü® 0 , ` Bool ‚ü© ‚à∑ [] ‚ü© Õæ l low Õæ low ‚ä¢ M ‚¶Ç Ref (` Bool of ‚ãÜ) of ‚ãÜ
-- ‚ä¢M = ‚ä¢cast (‚ä¢addr refl)

-- ‚ä¢M‚Ä≤ : [] Õæ ‚ü® [] ,  ‚ü® 0 , ` Bool ‚ü© ‚à∑ [] ‚ü© Õæ l low Õæ low ‚ä¢ M‚Ä≤ ‚¶Ç Ref (` Bool of l high) of l high
-- ‚ä¢M‚Ä≤ = ‚ä¢cast (‚ä¢cast (‚ä¢addr refl))

-- result = check-‚äë? (to-ast M ‚ä¢M (Ref (` Bool of ‚ãÜ) of ‚ãÜ)) (to-ast M‚Ä≤ ‚ä¢M‚Ä≤ (Ref (` Bool of l high) of l high))

M =
  `let (prot high ((addr a‚ü¶ high ‚üß 0 of low) :=‚úì
                   ((($ false of low) ‚ü® cast (` Bool of l low) (` Bool of ‚ãÜ) (pos 0) (~-ty ~‚ãÜ ~-Œπ) ‚ü©)
                                      ‚ü® cast (` Bool of ‚ãÜ) (` Bool of l high) (pos 0) (~-ty ‚ãÜ~ ~-Œπ) ‚ü©)))
  (! ((addr a‚ü¶ high ‚üß 0 of low)
      ‚ü® cast (Ref (` Bool of l high) of l low) (Ref (` Bool of ‚ãÜ) of ‚ãÜ) (pos 0) (~-ty ~‚ãÜ (~-ref (~-ty ~‚ãÜ ~-Œπ))) ‚ü©))
M‚Ä≤ =
  `let (prot high ((((addr a‚ü¶ high ‚üß 0 of low)
                     ‚ü® cast (Ref (` Bool of l high) of l low) (Ref (` Bool of l high) of ‚ãÜ) (pos 0) (~-ty ~‚ãÜ ~·µ£-refl) ‚ü©)
                     ‚ü® cast (Ref (` Bool of l high) of ‚ãÜ) (Ref (` Bool of l high) of l high) (pos 0) (~-ty ‚ãÜ~ ~·µ£-refl) ‚ü©) :=‚úì ($ false of low)))
  (! ((addr a‚ü¶ high ‚üß 0 of low) ‚ü® cast (Ref (` Bool of l high) of l low) (Ref (` Bool of l high) of ‚ãÜ) (pos 0) (~-ty ~‚ãÜ ~·µ£-refl) ‚ü©))

‚ä¢M : [] Õæ ‚ü® [] ,  ‚ü® 0 , ` Bool ‚ü© ‚à∑ [] ‚ü© Õæ l low Õæ low ‚ä¢ M ‚¶Ç ` Bool of ‚ãÜ
‚ä¢M = ‚ä¢let (‚ä¢prot (‚ä¢assign‚úì (‚ä¢sub (‚ä¢addr refl) (<:-ty (<:-l l‚âºh) <:·µ£-refl)) (‚ä¢cast (‚ä¢cast ‚ä¢const)) h‚âºh)) (‚ä¢deref (‚ä¢cast (‚ä¢addr refl)))

‚ä¢M‚Ä≤ : [] Õæ ‚ü® [] ,  ‚ü® 0 , ` Bool ‚ü© ‚à∑ [] ‚ü© Õæ l low Õæ low ‚ä¢ M‚Ä≤ ‚¶Ç ` Bool of ‚ãÜ
‚ä¢M‚Ä≤ =
  ‚ä¢let (‚ä¢prot (‚ä¢assign‚úì (‚ä¢cast (‚ä¢cast (‚ä¢addr refl))) (‚ä¢sub ‚ä¢const (<:-ty (<:-l l‚âºh) <:-Œπ)) h‚âºh))
  (‚ä¢deref (‚ä¢cast (‚ä¢addr refl)))

result = check-‚äë? (to-ast M ‚ä¢M (` Bool of ‚ãÜ)) (to-ast M‚Ä≤ ‚ä¢M‚Ä≤ (` Bool of ‚ãÜ))
