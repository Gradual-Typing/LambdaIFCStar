module PrettyPrinter.GraphViz.Simulation where

open import Data.Nat
open import Data.Bool renaming (Bool to ùîπ; _‚âü_ to _‚âü·µá_)
open import Data.List
open import Data.Product using (_√ó_; ‚àÉ-syntax; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to ‚ü®_,_‚ü©)
open import Relation.Nullary.Decidable using (isYes)
open import Agda.Builtin.String
open import Text.Printf

open import Common.Utils using (magic-num)
open import Common.Types
open import CC.MultiStep
open import PrettyPrinter.GraphViz.MultiStep renaming (pprint to pprint-‚Ü†)


print-sim-edges : List (‚Ñï √ó ‚Ñï) ‚Üí (last-n : ‚Ñï) ‚Üí String
print-sim-edges [] last = ""
print-sim-edges (‚ü® n , m ‚ü© ‚à∑ rest) last =
  let l_node = printf "left%u"  n
      r_node = printf "right%u" m in
  primStringAppend
  (if isYes (n ‚âü last)
    then (printf "  %s -> %s;\n" l_node r_node)
    else (printf "  %s -> %s; { rank=\"same\"; %s; %s; }\n" l_node r_node l_node r_node))
  (print-sim-edges rest n)

print-sim-diagram : ‚àÄ {M‚ÇÅ M‚ÇÅ‚Ä≤ M‚ÇÇ M‚ÇÇ‚Ä≤ Œº‚ÇÅ Œº‚ÇÅ‚Ä≤ Œº‚ÇÇ Œº‚ÇÇ‚Ä≤}
  ‚Üí M‚ÇÅ  ‚à£ Œº‚ÇÅ  ‚à£ low ‚Äî‚Ü† M‚ÇÇ  ‚à£ Œº‚ÇÇ   {- reduction seq on the left   -}
  ‚Üí M‚ÇÅ‚Ä≤ ‚à£ Œº‚ÇÅ‚Ä≤ ‚à£ low ‚Äî‚Ü† M‚ÇÇ‚Ä≤ ‚à£ Œº‚ÇÇ‚Ä≤  {- reduction seq on the right  -}
  ‚Üí List (‚Ñï √ó ‚Ñï)                    {- edges between two subgraphs -}
    ---------------
  ‚Üí String
print-sim-diagram M‚ÇÅ‚Ü†M‚ÇÇ M‚ÇÅ‚Ä≤‚Ü†M‚ÇÇ‚Ä≤ s =
  printf
  -- NOTE: use the `splines` option to draw straight lines
  -- - see https://graphviz.org/docs/attrs/splines/
  "digraph {
  splines=line;
  node[shape=plaintext];
  subgraph left {
    rankdir=\"TB\";
%s
  }
  subgraph right {
    rankdir=\"TB\";
%s
  }
  edge[style=dotted, constraint=false, arrowhead=none, minlen=3];
%s
}\n" (pprint-‚Ü† "left" M‚ÇÅ‚Ü†M‚ÇÇ) (pprint-‚Ü† "right" M‚ÇÅ‚Ä≤‚Ü†M‚ÇÇ‚Ä≤) (print-sim-edges s magic-num)
